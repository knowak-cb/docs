{
  "openapi": "3.0.0",
  "info": {
    "title": "Deribit API",
    "description": "Deribit API v2.1.1 - REST API for cryptocurrency derivatives trading",
    "version": "2.1.1"
  },
  "servers": [
    {
      "url": "http://localhost:8082/api/v2",
      "description": "local test server"
    },
    {
      "url": "https://test.deribit.com/api/v2"
    }
  ],
  "tags": [
    {
      "name": "WebSocket Only",
      "description": "Can only be used over websockets."
    },
    {
      "name": "Public",
      "description": "Public methods can be used without authentication."
    },
    {
      "name": "Private",
      "description": "Private methods require authentication. All requests must include a valid OAuth2 token. A token can be requested using the /public/auth method. When using the websockets protocol, the token must be included as a parameter `access_token` in the message. When using REST (HTTP GET), the token may also be passed in the `Authorization` header."
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Session Management"
    },
    {
      "name": "Subscription Management",
      "description": "Subscription works as notifications, so users will automatically (after subscribing) receive messages from the server. Overview for each channel response format is described in subscriptions section."
    },
    {
      "name": "Account Management"
    },
    {
      "name": "Trading"
    },
    {
      "name": "Market Data"
    },
    {
      "name": "Wallet"
    },
    {
      "name": "Chat"
    }
  ],
  "paths": {
    "/private/get_positions": {
      "get": {
        "description": "Retrieve user positions. To retrieve subaccount positions, use `subaccount_id` parameter.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "schema": {
              "example": "BTC"
            },
            "required": false
          },
          {
            "name": "kind",
            "description": "Kind filter on positions",
            "in": "query",
            "schema": {
              "example": "future"
            },
            "required": false
          },
          {
            "name": "subaccount_id",
            "description": "The user id for the subaccount",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetPositionsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2236,
                      "result": [
                        {
                          "average_price": 7440.18,
                          "delta": 0.006687487,
                          "direction": "buy",
                          "estimated_liquidation_price": 1.74,
                          "floating_profit_loss": 0,
                          "index_price": 7466.79,
                          "initial_margin": 0.000197283,
                          "instrument_name": "BTC-PERPETUAL",
                          "interest_value": 1.7362511643080387,
                          "kind": "future",
                          "leverage": 34,
                          "maintenance_margin": 0.000143783,
                          "mark_price": 7476.65,
                          "open_orders_margin": 0.000197288,
                          "realized_funding": -1e-08,
                          "realized_profit_loss": -9e-09,
                          "settlement_price": 7476.65,
                          "size": 50,
                          "size_currency": 0.006687487,
                          "total_profit_loss": 3.2781e-05
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/PrivateGetPositionsResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2236,
                    "method": "private/get_positions",
                    "params": {
                      "currency": "BTC",
                      "kind": "future"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_positions",
            "og:title": "private/get_positions"
          }
        }
      }
    },
    "/private/get_position": {
      "get": {
        "description": "Retrieve user position.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetPositionResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 404,
                      "result": {
                        "average_price": 0,
                        "delta": 0,
                        "direction": "buy",
                        "estimated_liquidation_price": 0,
                        "floating_profit_loss": 0,
                        "index_price": 3555.86,
                        "initial_margin": 0,
                        "instrument_name": "BTC-PERPETUAL",
                        "interest_value": 1.7362511643080387,
                        "leverage": 100,
                        "kind": "future",
                        "maintenance_margin": 0,
                        "mark_price": 3556.62,
                        "open_orders_margin": 0.000165889,
                        "realized_profit_loss": 0,
                        "settlement_price": 3555.44,
                        "size": 0,
                        "size_currency": 0,
                        "total_profit_loss": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/PrivateGetPositionResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 404,
                    "method": "private/get_position",
                    "params": {
                      "instrument_name": "BTC-PERPETUAL"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_position",
            "og:title": "private/get_position"
          }
        }
      }
    },
    "/private/get_account_summary": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/wallet_currency"
            }
          },
          {
            "name": "subaccount_id",
            "description": "The user id for the subaccount",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "description": "Include additional fields",
            "in": "query",
            "name": "extended",
            "required": false,
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetAccountSummary200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2515,
                      "result": {
                        "delta_total_map": {
                          "btc_usd": 31.594357699
                        },
                        "margin_balance": 302.62729214,
                        "futures_session_rpl": -0.03258105,
                        "options_session_rpl": 0,
                        "estimated_liquidation_ratio_map": {
                          "btc_usd": 0.1009872222854525
                        },
                        "session_upl": 0.05271555,
                        "email": "user@example.com",
                        "system_name": "user",
                        "username": "user",
                        "interuser_transfers_enabled": false,
                        "id": 10,
                        "estimated_liquidation_ratio": 0.10098722,
                        "options_gamma_map": {
                          "btc_usd": 1e-05
                        },
                        "options_vega": 0.0858,
                        "options_value": -0.0086,
                        "available_withdrawal_funds": 301.35396172,
                        "projected_delta_total": 32.613978,
                        "maintenance_margin": 0.8857841,
                        "total_pl": -0.33084225,
                        "limits": {
                          "limits_per_currency": false,
                          "non_matching_engine": {
                            "burst": 1500,
                            "rate": 1000
                          },
                          "matching_engine": {
                            "trading": {
                              "total": {
                                "burst": 250,
                                "rate": 200
                              }
                            },
                            "spot": {
                              "burst": 250,
                              "rate": 200
                            },
                            "quotes": {
                              "burst": 500,
                              "rate": 500
                            },
                            "max_quotes": {
                              "burst": 10,
                              "rate": 10
                            },
                            "guaranteed_quotes": {
                              "burst": 2,
                              "rate": 2
                            },
                            "cancel_all": {
                              "burst": 250,
                              "rate": 200
                            }
                          }
                        },
                        "options_theta_map": {
                          "btc_usd": 15.97071
                        },
                        "projected_maintenance_margin": 0.7543841,
                        "available_funds": 301.38059622,
                        "login_enabled": false,
                        "options_delta": -1.01962,
                        "balance": 302.60065765,
                        "security_keys_enabled": false,
                        "referrer_id": null,
                        "mmp_enabled": false,
                        "equity": 302.61869214,
                        "block_rfq_self_match_prevention": true,
                        "futures_session_upl": 0.05921555,
                        "fee_balance": 0,
                        "currency": "BTC",
                        "options_session_upl": -0.0065,
                        "projected_initial_margin": 1.01529592,
                        "options_theta": 15.97071,
                        "creation_timestamp": 1687352432143,
                        "self_trading_extended_to_subaccounts": false,
                        "portfolio_margining_enabled": false,
                        "cross_collateral_enabled": false,
                        "margin_model": "segregated_sm",
                        "options_vega_map": {
                          "btc_usd": 0.0858
                        },
                        "futures_pl": -0.32434225,
                        "options_pl": -0.0065,
                        "type": "main",
                        "self_trading_reject_mode": "cancel_maker",
                        "initial_margin": 1.24669592,
                        "spot_reserve": 0,
                        "delta_total": 31.602958,
                        "options_gamma": 1e-05,
                        "session_rpl": -0.03258105,
                        "fees": [
                          {
                            "value": {
                              "default": {
                                "type": "fixed",
                                "taker": 0.00035,
                                "maker": -0.0001
                              },
                              "block_trade": 0.3
                            },
                            "kind": "perpetual",
                            "index_name": "btc_usd"
                          },
                          {
                            "value": {
                              "default": {
                                "type": "relative",
                                "taker": 0.625,
                                "maker": 0.625
                              },
                              "block_trade": 0.625
                            },
                            "kind": "option",
                            "index_name": "btc_usd"
                          },
                          {
                            "value": {
                              "default": {
                                "type": "fixed",
                                "taker": 0.00035,
                                "maker": -0.0001
                              },
                              "block_trade": 0.3
                            },
                            "kind": "future",
                            "index_name": "btc_usd"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves user account summary. To read subaccount summary use `subaccount_id` parameter.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2515,
                    "method": "private/get_account_summary",
                    "params": {
                      "currency": "BTC",
                      "extended": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_account_summary",
            "og:title": "private/get_account_summary"
          }
        }
      }
    },
    "/private/get_account_summaries": {
      "get": {
        "parameters": [
          {
            "name": "subaccount_id",
            "description": "The user id for the subaccount",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "description": "Include additional fields",
            "in": "query",
            "name": "extended",
            "required": false,
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetAccountSummaries200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2515,
                      "result": {
                        "id": 10,
                        "email": "user@example.com",
                        "system_name": "user",
                        "username": "user",
                        "block_rfq_self_match_prevention": true,
                        "creation_timestamp": 1687352432143,
                        "type": "main",
                        "referrer_id": null,
                        "login_enabled": false,
                        "security_keys_enabled": false,
                        "mmp_enabled": false,
                        "interuser_transfers_enabled": false,
                        "self_trading_reject_mode": "cancel_maker",
                        "self_trading_extended_to_subaccounts": false,
                        "summaries": [
                          {
                            "currency": "BTC",
                            "delta_total_map": {
                              "btc_usd": 31.594357699
                            },
                            "margin_balance": 302.62729214,
                            "futures_session_rpl": -0.03258105,
                            "options_session_rpl": 0,
                            "estimated_liquidation_ratio_map": {
                              "btc_usd": 0.1009872222854525
                            },
                            "session_upl": 0.05271555,
                            "estimated_liquidation_ratio": 0.10098722,
                            "options_gamma_map": {
                              "btc_usd": 1e-05
                            },
                            "options_vega": 0.0858,
                            "options_value": -0.0086,
                            "available_withdrawal_funds": 301.35396172,
                            "projected_delta_total": 32.613978,
                            "maintenance_margin": 0.8857841,
                            "total_pl": -0.33084225,
                            "limits": {
                              "limits_per_currency": false,
                              "non_matching_engine": {
                                "burst": 1500,
                                "rate": 1000
                              },
                              "matching_engine": {
                                "trading": {
                                  "total": {
                                    "burst": 250,
                                    "rate": 200
                                  }
                                },
                                "spot": {
                                  "burst": 250,
                                  "rate": 200
                                },
                                "quotes": {
                                  "burst": 500,
                                  "rate": 500
                                },
                                "max_quotes": {
                                  "burst": 10,
                                  "rate": 10
                                },
                                "guaranteed_quotes": {
                                  "burst": 2,
                                  "rate": 2
                                },
                                "cancel_all": {
                                  "burst": 250,
                                  "rate": 200
                                }
                              }
                            },
                            "projected_maintenance_margin": 0.7543841,
                            "available_funds": 301.38059622,
                            "options_delta": -1.01962,
                            "balance": 302.60065765,
                            "equity": 302.61869214,
                            "futures_session_upl": 0.05921555,
                            "fee_balance": 0,
                            "options_session_upl": -0.0065,
                            "projected_initial_margin": 1.01529592,
                            "options_theta": 15.97071,
                            "portfolio_margining_enabled": false,
                            "cross_collateral_enabled": false,
                            "margin_model": "segregated_sm",
                            "options_vega_map": {
                              "btc_usd": 0.0858
                            },
                            "futures_pl": -0.32434225,
                            "options_pl": -0.0065,
                            "initial_margin": 1.24669592,
                            "spot_reserve": 0,
                            "delta_total": 31.602958,
                            "options_gamma": 1e-05,
                            "session_rpl": -0.03258105,
                            "fees": [
                              {
                                "value": {
                                  "default": {
                                    "type": "fixed",
                                    "taker": 0.00035,
                                    "maker": -0.0001
                                  },
                                  "block_trade": 0.3
                                },
                                "kind": "perpetual",
                                "index_name": "btc_usd"
                              },
                              {
                                "value": {
                                  "default": {
                                    "type": "relative",
                                    "taker": 0.625,
                                    "maker": 0.625
                                  },
                                  "block_trade": 0.625
                                },
                                "kind": "option",
                                "index_name": "btc_usd"
                              },
                              {
                                "value": {
                                  "default": {
                                    "type": "fixed",
                                    "taker": 0.00035,
                                    "maker": -0.0001
                                  },
                                  "block_trade": 0.3
                                },
                                "kind": "future",
                                "index_name": "btc_usd"
                              }
                            ]
                          },
                          {
                            "currency": "ETH",
                            "futures_session_upl": 0,
                            "portfolio_margining_enabled": false,
                            "available_funds": 99.999598,
                            "initial_margin": 0.000402,
                            "futures_session_rpl": 0,
                            "options_gamma": 0,
                            "balance": 100,
                            "options_vega_map": {},
                            "session_upl": 0,
                            "fee_balance": 0,
                            "delta_total_map": {
                              "eth_usd": 0
                            },
                            "projected_maintenance_margin": 0,
                            "options_gamma_map": {},
                            "projected_delta_total": 0,
                            "margin_model": "segregated_sm",
                            "futures_pl": 0,
                            "options_theta": 0,
                            "limits": {
                              "limits_per_currency": false,
                              "non_matching_engine": {
                                "burst": 1500,
                                "rate": 1000
                              },
                              "matching_engine": {
                                "trading": {
                                  "total": {
                                    "burst": 250,
                                    "rate": 200
                                  }
                                },
                                "spot": {
                                  "burst": 250,
                                  "rate": 200
                                },
                                "quotes": {
                                  "burst": 500,
                                  "rate": 500
                                },
                                "max_quotes": {
                                  "burst": 10,
                                  "rate": 10
                                },
                                "guaranteed_quotes": {
                                  "burst": 2,
                                  "rate": 2
                                },
                                "cancel_all": {
                                  "burst": 250,
                                  "rate": 200
                                }
                              }
                            },
                            "options_delta": 0,
                            "equity": 100,
                            "projected_initial_margin": 0.0002,
                            "estimated_liquidation_ratio_map": {
                              "eth_usd": 0
                            },
                            "spot_reserve": 0.0002,
                            "cross_collateral_enabled": false,
                            "available_withdrawal_funds": 99.999597,
                            "delta_total": 0,
                            "options_session_upl": 0,
                            "maintenance_margin": 0,
                            "options_theta_map": {},
                            "additional_reserve": 0,
                            "estimated_liquidation_ratio": 0,
                            "options_pl": 0,
                            "options_session_rpl": 0,
                            "options_vega": 0,
                            "total_pl": 0,
                            "session_rpl": 0,
                            "options_value": 0,
                            "margin_balance": 100,
                            "fees": [
                              {
                                "value": {
                                  "default": {
                                    "type": "fixed",
                                    "taker": 0.00025,
                                    "maker": -5e-05
                                  },
                                  "block_trade": 0.2
                                },
                                "kind": "perpetual",
                                "index_name": "eth_usd"
                              },
                              {
                                "value": {
                                  "default": {
                                    "type": "relative",
                                    "taker": 0.5,
                                    "maker": 0.5
                                  },
                                  "block_trade": 0.5
                                },
                                "kind": "option",
                                "index_name": "eth_usd"
                              },
                              {
                                "value": {
                                  "default": {
                                    "type": "fixed",
                                    "taker": 0.00025,
                                    "maker": -5e-05
                                  },
                                  "block_trade": 0.2
                                },
                                "kind": "future",
                                "index_name": "eth_usd"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves a per-currency list of user account summaries. To read subaccount summary use `subaccount_id` parameter.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2515,
                    "method": "private/get_account_summaries",
                    "params": {
                      "extended": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_account_summaries",
            "og:title": "private/get_account_summaries"
          }
        }
      }
    },
    "/private/pme/simulate": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency for which the Extended Risk Matrix will be calculated. Use `CROSS` for Cross Collateral simulation.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "add_positions",
            "required": false,
            "in": "query",
            "description": "If `true`, adds simulated positions to current positions, otherwise uses only simulated positions. By default `true`",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "simulated_positions",
            "required": false,
            "in": "query",
            "description": "Object with positions in following form: `{InstrumentName1: Position1, InstrumentName2: Position2...}`, for example `{\"BTC-PERPETUAL\": -1.0}` (or corresponding URI-encoding for GET). Size in base currency.",
            "schema": {
              "type": "object",
              "properties": {
                "$key": {
                  "description": "Instrument name"
                },
                "$value": {
                  "description": "Position size"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Getsimulate200response"
          }
        },
        "description": "Calculates the Extended Risk Matrix and margin information for the selected currency or against the entire Cross-Collateral portfolio.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "x-mint": {
          "metadata": {
            "title": "private/pme/simulate",
            "og:title": "private/pme/simulate"
          }
        }
      }
    },
    "/private/simulate_portfolio": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "example": "BTC"
            }
          },
          {
            "name": "add_positions",
            "required": false,
            "in": "query",
            "description": "If `true`, adds simulated positions to current positions, otherwise uses only simulated positions. By default `true`",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "simulated_positions",
            "required": false,
            "in": "query",
            "description": "Object with positions in following form: `{InstrumentName1: Position1, InstrumentName2: Position2...}`, for example `{\"BTC-PERPETUAL\": -1000.0}` (or corresponding URI-encoding for GET). For futures in USD, for options in base currency.",
            "schema": {
              "type": "object",
              "properties": {
                "$key": {
                  "description": "Instrument name"
                },
                "$value": {
                  "description": "Position size"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateSimulatePortfolioResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2,
                      "result": {
                        "projected_initial_margin": 37662472.03416069,
                        "initial_margin": 37662472.03416069,
                        "total_pl": 40419.10179263,
                        "additional_reserve": 0,
                        "available_withdrawal_funds": 115871741.76065847,
                        "options_pl": 921.55562578,
                        "delta_total_map": {
                          "btc_usd": 68024.519462366
                        },
                        "available_subaccount_transfer_funds": 0,
                        "projected_delta_total": 69080.932029,
                        "projected_maintenance_margin": 30129215.84817124,
                        "total_equity_usd": 13075634611389.318,
                        "options_gamma": -0.03907,
                        "currency": "BTC",
                        "options_theta": 142583.29246,
                        "spot_reserve": 0,
                        "total_initial_margin_usd": 3139528603778.822,
                        "options_vega": -39322.23046,
                        "margin_balance": 153534213.79481918,
                        "futures_session_rpl": 1.309136,
                        "options_gamma_map": {
                          "btc_usd": -0.03907
                        },
                        "available_funds": 115871741.76065847,
                        "futures_pl": 39497.54616685,
                        "cross_collateral_enabled": true,
                        "delta_total": 69080.932029,
                        "options_session_rpl": 0,
                        "total_margin_balance_usd": 12798550648250.61,
                        "options_value": -1056.41256672,
                        "options_session_upl": -174.67960675,
                        "maintenance_margin": 30129215.84817124,
                        "total_maintenance_margin_usd": 2511559381417.215,
                        "options_vega_map": {
                          "btc_usd": -39322.23046
                        },
                        "session_rpl": 1.309136,
                        "locked_balance": 0,
                        "session_upl": -339.16214185,
                        "margin_model": "cross_pm",
                        "portfolio_margining_enabled": true,
                        "equity": 150075253.91354558,
                        "balance": 150076473.4995114,
                        "total_delta_total_usd": 6157454218.3753195,
                        "fee_balance": 0,
                        "options_delta": 2883.38481,
                        "options_theta_map": {
                          "btc_usd": 142583.29246
                        },
                        "futures_session_upl": -164.48253509
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Calculates portfolio margin info for simulated position or current position of the user. This request has a special restricted rate limit (not more than once per a second).",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 22222,
                    "method": "private/simulate_portfolio",
                    "params": {
                      "currency": "BTC",
                      "add_positions": true,
                      "simulated_positions": {
                        "BTC-PERPETUAL": 1.0
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/simulate_portfolio",
            "og:title": "private/simulate_portfolio"
          }
        }
      }
    },
    "/private/get_access_log": {
      "get": {
        "parameters": [
          {
            "name": "offset",
            "description": "The offset for pagination, default - `0`",
            "in": "query",
            "required": false,
            "schema": {
              "example": 10,
              "type": "integer"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetAccessLogResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "records_total": 34,
                        "data": [
                          {
                            "timestamp": 1575876682576,
                            "result": "success",
                            "ip": "127.0.0.1",
                            "id": 45,
                            "country": "Local Country",
                            "city": "Local Town"
                          },
                          {
                            "timestamp": 1575876459309,
                            "result": "success",
                            "ip": "127.0.0.1",
                            "id": 44,
                            "country": "Local Country",
                            "city": "Local Town"
                          },
                          {
                            "timestamp": 1575546252774,
                            "result": "disabled_tfa",
                            "ip": "127.0.0.1",
                            "id": 43,
                            "country": "Local Country",
                            "city": "Local Town"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Lists access logs for the user",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_access_log",
                    "params": {
                      "offset": 0,
                      "count": 3
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_access_log",
            "og:title": "private/get_access_log"
          }
        }
      }
    },
    "/private/get_affiliate_program_info": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetAffiliateProgramInfoResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2,
                      "result": {
                        "received": {
                          "eth": 4e-05,
                          "btc": 1e-06
                        },
                        "number_of_affiliates": 1,
                        "link": "https://www.deribit.com/reg-xxx.zxyq",
                        "is_enabled": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves user`s affiliates count, payouts and link.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2,
                    "method": "private/get_affiliate_program_info",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_affiliate_program_info",
            "og:title": "private/get_affiliate_program_info"
          }
        }
      }
    },
    "/private/enable_affiliate_program": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetenableAffiliateProgram200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 24,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Enables affiliate program for user **📖 Related Support Article:** [Affiliate Program](https://support.deribit.com/hc/en-us/articles/25944777728797-Affiliate-Program)",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 24,
                    "method": "private/enable_affiliate_program",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/enable_affiliate_program",
            "og:title": "private/enable_affiliate_program"
          }
        }
      }
    },
    "/private/change_margin_model": {
      "get": {
        "parameters": [
          {
            "name": "user_id",
            "description": "Id of a (sub)account - by default current user id is used",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false
          },
          {
            "name": "margin_model",
            "description": "Margin model",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "cross_pm",
                "cross_sm",
                "segregated_pm",
                "segregated_sm"
              ]
            },
            "required": true
          },
          {
            "name": "dry_run",
            "description": "If `true` request returns the result without switching the margining model. Default: `false`",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateChangeMarginModelResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": [
                        {
                          "old_state": {
                            "maintenance_margin_rate": 0,
                            "initial_margin_rate": 0,
                            "available_balance": 0
                          },
                          "new_state": {
                            "maintenance_margin_rate": 0,
                            "initial_margin_rate": 0,
                            "available_balance": 0
                          },
                          "currency": "eth"
                        },
                        {
                          "old_state": {
                            "maintenance_margin_rate": 0.02862727,
                            "initial_margin_rate": 0.45407615,
                            "available_balance": 0.553590509
                          },
                          "new_state": {
                            "maintenance_margin_rate": 0.02710204,
                            "initial_margin_rate": 0.03252245,
                            "available_balance": 0.98106428
                          },
                          "currency": "btc"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Change margin model",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/change_margin_model",
                    "params": {
                      "user_id": 3,
                      "margin_model": "cross_pm"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/change_margin_model",
            "og:title": "private/change_margin_model"
          }
        }
      }
    },
    "/private/get_user_locks": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetUserLocksResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "id": 74,
                      "result": [
                        {
                          "message": "locked in one currency",
                          "locked": true,
                          "currency": "BTC"
                        },
                        {
                          "locked": false,
                          "currency": "ETH"
                        },
                        {
                          "locked": false,
                          "currency": "USDC"
                        },
                        {
                          "locked": false,
                          "currency": "SOL"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves information about locks on user account",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 74,
                    "method": "private/get_user_locks",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_user_locks",
            "og:title": "private/get_user_locks"
          }
        }
      }
    },
    "/private/set_self_trading_config": {
      "get": {
        "parameters": [
          {
            "name": "mode",
            "description": "Self trading prevention behavior: `reject_taker` (reject the incoming order), `cancel_maker` (cancel the matched order in the book)",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "reject_taker",
                "cancel_maker"
              ]
            }
          },
          {
            "name": "extended_to_subaccounts",
            "description": "If value is `true` trading is prevented between subaccounts of given account, otherwise they are treated separately",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "block_rfq_self_match_prevention",
            "description": "When Block RFQ Self Match Prevention is enabled, it ensures that RFQs cannot be executed between accounts that belong to the same legal entity. This setting is independent of the general self-match prevention settings and must be configured separately.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetsetSelfTradingConfig200response"
          }
        },
        "description": "Configure self trading behavior **📖 Related Support Article:** Account settings page",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/set_self_trading_config",
                    "params": {
                      "mode": "cancel_maker",
                      "extended_to_subaccounts": true,
                      "block_rfq_self_match_prevention": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/set_self_trading_config",
            "og:title": "private/set_self_trading_config"
          }
        }
      }
    },
    "/private/set_disabled_trading_products": {
      "get": {
        "parameters": [
          {
            "name": "user_id",
            "description": "Id of a (sub)account",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": true
          },
          {
            "name": "trading_products",
            "in": "query",
            "required": true,
            "description": "List of available trading products. Available products: perpetual, futures, options, future_combos, option_combos, spots",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "perpetual",
                  "futures",
                  "options",
                  "future_combos",
                  "option_combos",
                  "spots"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetsetDisabledTradingProducts200response"
          }
        },
        "description": "Configure disabled trading products for subaccounts. Only main accounts can modify this for subaccounts. <br>**[TFA required](#security-keys)**",
        "tags": [
          "Account Management",
          "Private"
        ],
        "x-mint": {
          "metadata": {
            "title": "private/set_disabled_trading_products",
            "og:title": "private/set_disabled_trading_products"
          }
        }
      }
    },
    "/private/disable_api_key": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "description": "Id of key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetdisableApiKey200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2861,
                      "result": {
                        "timestamp": 1560242676023,
                        "max_scope": "account:read_write block_trade:read trade:read_write wallet:read_write",
                        "id": 3,
                        "enabled": false,
                        "default": false,
                        "client_secret": "B6RsF9rrLY5ezEGBQkyLlV-UC7whyPJ34BMA-kKYpes",
                        "client_id": "1sXMQBhM",
                        "name": ""
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Disables api key with given id. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2861,
                    "method": "private/disable_api_key",
                    "params": {
                      "id": 3
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/disable_api_key",
            "og:title": "private/disable_api_key"
          }
        }
      }
    },
    "/private/enable_api_key": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "description": "Id of key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetenableApiKey200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 8580,
                      "result": {
                        "timestamp": 1560242634599,
                        "max_scope": "account:read_write block_trade:read trade:read_write wallet:read_write",
                        "id": 3,
                        "enabled": true,
                        "default": false,
                        "client_secret": "B6RsF9rrLY5ezEGBQkyLlV-UC7whyPJ34BMA-kKYpes",
                        "client_id": "1sXMQBhM",
                        "name": ""
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Enables api key with given id. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8580,
                    "method": "private/enable_api_key",
                    "params": {
                      "id": 3
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/enable_api_key",
            "og:title": "private/enable_api_key"
          }
        }
      }
    },
    "/private/create_api_key": {
      "get": {
        "parameters": [
          {
            "name": "max_scope",
            "in": "query",
            "required": true,
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, its value is set as none. Please check details described in Access scope",
            "schema": {
              "$ref": "#/components/schemas/max_scope"
            }
          },
          {
            "name": "name",
            "description": "Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "TestName"
            },
            "required": false
          },
          {
            "name": "public_key",
            "in": "query",
            "required": false,
            "description": "ED25519 or RSA PEM Encoded public key that should be used to create asymmetric API Key for signing requests/authentication requests with user's private key. **📖 Related Support Article:** Asymmetric API keys",
            "schema": {
              "type": "string",
              "example": "-----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAM7FWhKquNqLmTOV4hfYT5r3AjrYiORTT6Tn5HIfFNV8= -----END PUBLIC KEY-----"
            }
          },
          {
            "name": "enabled_features",
            "in": "query",
            "required": false,
            "description": "List of enabled advanced on-key features. Available options: - `restricted_block_trades`: Limit the block_trade read the scope of the API key to block trades that have been made using this specific API key - `block_trade_approval`: Block trades created using this API key require additional user approval. Methods that use `block_rfq` scope are not affected by Block Trade approval feature",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "restricted_block_trades",
                  "block_trade_approval"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetcreateApiKey200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 8974,
                      "result": {
                        "timestamp": 1560238048714,
                        "max_scope": "account:read block_trade:read_write trade:read wallet:none",
                        "id": 5,
                        "enabled": true,
                        "enabled_features": [],
                        "default": false,
                        "public_key": "-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAM7FWhKquNqLmTOV4hfYT5r3AjrYiORTT6Tn5HIfFNV8=\n-----END PUBLIC KEY-----",
                        "client_secret": "9c:6d:c9:02:fd:9f:75:6e:14:bb:71:c5:74:95:86:c8",
                        "client_id": "wcVoQGam",
                        "name": ""
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new api key with a given scope. Important notes **TFA required** **Note:** You can display the created API key using the private/list_api_keys method. **📖 Related Support Article:** Creating new API key on Deribit",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8974,
                    "method": "private/create_api_key",
                    "params": {
                      "name": "Public key 1",
                      "max_scope": "account:read trade:read block_trade:read_write wallet:none",
                      "public_key": "-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAM7FWhKquNqLmTOV4hfYT5r3AjrYiORTT6Tn5HIfFNV8=\n-----END PUBLIC KEY-----"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/create_api_key",
            "og:title": "private/create_api_key"
          }
        }
      }
    },
    "/private/change_scope_in_api_key": {
      "get": {
        "parameters": [
          {
            "name": "max_scope",
            "in": "query",
            "required": true,
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, its value is set as none. Please check details described in Access scope",
            "schema": {
              "$ref": "#/components/schemas/max_scope"
            }
          },
          {
            "name": "id",
            "description": "Id of key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetchangeScopeInApiKey200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2453,
                      "result": {
                        "timestamp": 1560242482758,
                        "max_scope": "account:read_write block_trade:read trade:read_write wallet:read_write",
                        "id": 3,
                        "enabled": true,
                        "default": false,
                        "client_secret": "B6RsF9rrLY5ezEGBQkyLlV-UC7whyPJ34BMA-kKYpes",
                        "client_id": "1sXMQBhM",
                        "name": ""
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Changes scope for key with given id. [Important notes](#creating-editing-removing-api-keys). <br>**[TFA required](#security-keys)**",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2453,
                    "method": "private/change_scope_in_api_key",
                    "params": {
                      "max_scope": "account:read_write wallet:read_write block_trade:read trade:read_write",
                      "id": 3
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/change_scope_in_api_key",
            "og:title": "private/change_scope_in_api_key"
          }
        }
      }
    },
    "/private/change_api_key_name": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "description": "Id of key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "name",
            "description": "Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "TestName"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetchangeApiKeyName200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2453,
                      "result": {
                        "timestamp": 1560242482758,
                        "max_scope": "account:read_write block_trade:read trade:read_write wallet:read_write",
                        "id": 3,
                        "enabled": true,
                        "default": false,
                        "client_secret": "B6RsF9rrLY5ezEGBQkyLlV-UC7whyPJ34BMA-kKYpes",
                        "client_id": "1sXMQBhM",
                        "name": "KeyName3"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Changes name for key with given id. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2453,
                    "method": "private/change_api_key_name",
                    "params": {
                      "name": "KeyName3",
                      "id": 3
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/change_api_key_name",
            "og:title": "private/change_api_key_name"
          }
        }
      }
    },
    "/private/list_api_keys": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicListApiKeysResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2553,
                      "result": [
                        {
                          "timestamp": 1560236001108,
                          "max_scope": "account:read block_trade:read trade:read_write wallet:read",
                          "id": 1,
                          "enabled": false,
                          "default": false,
                          "client_secret": "SjM57m1T2CfXZ4vZ76X1APjqRlJdtzHI8IwVXoQnfoM",
                          "client_id": "TiA4AyLPq3",
                          "name": "",
                          "enabled_features": []
                        },
                        {
                          "timestamp": 1560236287708,
                          "max_scope": "account:read_write block_trade:read_write trade:read_write wallet:read_write",
                          "id": 2,
                          "enabled": true,
                          "default": true,
                          "client_secret": "mwNOvbUVyQczytQ5IVM8CbzmgqNJ81WvLKfu6MXcJPs",
                          "client_id": "aD-KFx-H",
                          "name": "",
                          "enabled_features": []
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves list of api keys. [Important notes](#creating-editing-removing-api-keys). <br> **[TFA required](#security-keys)**",
        "tags": [
          "Account Management",
          "Private"
        ],
        "x-mint": {
          "metadata": {
            "title": "private/list_api_keys",
            "og:title": "private/list_api_keys"
          }
        }
      }
    },
    "/private/reset_api_key": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "description": "Id of key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetresetApiKey200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 6524,
                      "result": {
                        "timestamp": 1560238942222,
                        "max_scope": "account:read block_trade:read trade:read wallet:read",
                        "id": 3,
                        "enabled": true,
                        "default": false,
                        "client_secret": "P9Z_c73KaBPwpoTVfsXzehAhjhdJn5kM7Zlz_hhDhE8",
                        "client_id": "IY2D68DS",
                        "name": ""
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Resets secret in api key. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 6524,
                    "method": "private/reset_api_key",
                    "params": {
                      "id": 3
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/reset_api_key",
            "og:title": "private/reset_api_key"
          }
        }
      }
    },
    "/private/remove_api_key": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "description": "Id of key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetremoveApiKey200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 8190,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Removes api key. [Important notes](#creating-editing-removing-api-keys).",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8190,
                    "method": "private/remove_api_key",
                    "params": {
                      "id": 2
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/remove_api_key",
            "og:title": "private/remove_api_key"
          }
        }
      }
    },
    "/private/edit_api_key": {
      "get": {
        "parameters": [
          {
            "name": "id",
            "description": "Id of key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "name": "max_scope",
            "in": "query",
            "required": true,
            "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, its value is set as none. Please check details described in Access scope",
            "schema": {
              "$ref": "#/components/schemas/max_scope"
            }
          },
          {
            "name": "name",
            "description": "Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "TestName"
            },
            "required": false
          },
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "description": "Enables/disables the API key. `true` to enable, `false` to disable",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "enabled_features",
            "in": "query",
            "required": false,
            "description": "List of enabled advanced on-key features. Available options: - `restricted_block_trades`: Limit the block_trade read the scope of the API key to block trades that have been made using this specific API key - `block_trade_approval`: Block trades created using this API key require additional user approval. Methods that use `block_rfq` scope are not affected by Block Trade approval feature",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "restricted_block_trades",
                  "block_trade_approval"
                ]
              }
            }
          },
          {
            "name": "ip_whitelist",
            "in": "query",
            "required": false,
            "description": "Whitelist provided IP address on a selected key",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GeteditApiKey200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2453,
                      "result": {
                        "timestamp": 1560242482758,
                        "max_scope": "account:read_write block_trade:read trade:read_write wallet:read_write",
                        "id": 3,
                        "enabled": true,
                        "default": false,
                        "client_secret": "B6RsF9rrLY5ezEGBQkyLlV-UC7whyPJ34BMA-kKYpes",
                        "client_id": "1sXMQBhM",
                        "name": "NewKeyName"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Edits existing API key. At least one parameter is required. [Important notes](#creating-editing-removing-api-keys) <br>**[TFA required](#security-keys)**",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2453,
                    "method": "private/edit_api_key",
                    "params": {
                      "name": "NewKeyName",
                      "max_scope": "account:read_write wallet:read_write block_trade:read trade:read_write",
                      "id": 3
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/edit_api_key",
            "og:title": "private/edit_api_key"
          }
        }
      }
    },
    "/public/get_announcements": {
      "get": {
        "parameters": [
          {
            "name": "start_timestamp",
            "description": "The most recent timestamp to return the results for (milliseconds since the UNIX epoch)",
            "in": "query",
            "schema": {
              "default": "Current time"
            },
            "required": false
          },
          {
            "name": "count",
            "description": "Maximum count of returned announcements, default - `5`, maximum - `50`",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 5,
              "example": 10,
              "maximum": 50,
              "minimum": 1
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetAnnouncementsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7661,
                      "result": [
                        {
                          "title": "Example announcement",
                          "publication_timestamp": 1550058362418,
                          "important": false,
                          "id": 1550058362418,
                          "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves announcements. Default \"start_timestamp\" parameter value is current timestamp, \"count\" parameter value must be between 1 and 50, default is 5.",
        "tags": [
          "Account Management",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7661,
                    "method": "public/get_announcements",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_announcements",
            "og:title": "public/get_announcements"
          }
        }
      }
    },
    "/private/get_new_announcements": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetNewAnnouncements200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3022,
                      "result": [
                        {
                          "title": "Example announcement",
                          "publication_timestamp": 1550058362418,
                          "important": false,
                          "id": 1550058362418,
                          "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves announcements that have not been marked read by the user.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3022,
                    "method": "private/get_new_announcements",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_new_announcements",
            "og:title": "private/get_new_announcements"
          }
        }
      }
    },
    "/private/set_announcement_as_read": {
      "get": {
        "parameters": [
          {
            "description": "the ID of the announcement",
            "in": "query",
            "name": "announcement_id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1550058362418
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetsetAnnouncementAsRead200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 5147,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Marks an announcement as read, so it will not be shown in `get_new_announcements`.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 5147,
                    "method": "private/set_announcement_as_read",
                    "params": {
                      "announcement_id": 1550058362418
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/set_announcement_as_read",
            "og:title": "private/set_announcement_as_read"
          }
        }
      }
    },
    "/private/get_email_language": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetEmailLanguageResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9265,
                      "result": "en"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the language to be used for emails.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9265,
                    "method": "private/get_email_language",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_email_language",
            "og:title": "private/get_email_language"
          }
        }
      }
    },
    "/private/create_subaccount": {
      "get": {
        "description": "Create a new subaccount **📖 Related Support Article:** Subaccounts",
        "tags": [
          "Account Management",
          "Private"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateCreateSubaccountResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 5414,
                      "result": {
                        "email": "user_AAA@email.com",
                        "id": 13,
                        "is_password": false,
                        "login_enabled": false,
                        "portfolio": {
                          "eth": {
                            "available_funds": 0,
                            "available_withdrawal_funds": 0,
                            "balance": 0,
                            "currency": "eth",
                            "equity": 0,
                            "initial_margin": 0,
                            "maintenance_margin": 0,
                            "margin_balance": 0
                          },
                          "btc": {
                            "available_funds": 0,
                            "available_withdrawal_funds": 0,
                            "balance": 0,
                            "currency": "btc",
                            "equity": 0,
                            "initial_margin": 0,
                            "maintenance_margin": 0,
                            "margin_balance": 0
                          }
                        },
                        "receive_notifications": false,
                        "system_name": "user_1_4",
                        "security_keys_enabled": false,
                        "type": "subaccount",
                        "username": "user_1_4"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 5414,
                    "method": "private/create_subaccount",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/create_subaccount",
            "og:title": "private/create_subaccount"
          }
        }
      }
    },
    "/private/change_subaccount_name": {
      "get": {
        "description": "Change the user name for a subaccount",
        "tags": [
          "Account Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "sid",
            "description": "The user id for the subaccount",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 7
            },
            "required": true
          },
          {
            "name": "name",
            "description": "The new user name",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "new_user_1_1"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetchangeSubaccountName200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3964,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3964,
                    "method": "private/change_subaccount_name",
                    "params": {
                      "sid": 7,
                      "name": "new_user_1_1"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/change_subaccount_name",
            "og:title": "private/change_subaccount_name"
          }
        }
      }
    },
    "/private/set_email_language": {
      "get": {
        "parameters": [
          {
            "description": "The abbreviated language name. Valid values include `\"en\"`, `\"ko\"`, `\"zh\"`, `\"ja\"`, `\"ru\"`",
            "in": "query",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string",
              "example": "en"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetsetEmailLanguage200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3269,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Changes the language to be used for emails.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3269,
                    "method": "private/set_email_language",
                    "params": {
                      "language": "en"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/set_email_language",
            "og:title": "private/set_email_language"
          }
        }
      }
    },
    "/private/set_email_for_subaccount": {
      "get": {
        "description": "Assign an email address to a subaccount. User will receive an email with a confirmation link. <br>**[TFA required](#security-keys)**",
        "tags": [
          "Account Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "sid",
            "description": "The user id for the subaccount",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 7
            },
            "required": true
          },
          {
            "name": "email",
            "description": "The email address for the subaccount",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "user_1_1@email.com"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetsetEmailForSubaccount200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1667,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1667,
                    "method": "private/set_email_for_subaccount",
                    "params": {
                      "sid": 7,
                      "email": "user_1_1@email.com"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/set_email_for_subaccount",
            "og:title": "private/set_email_for_subaccount"
          }
        }
      }
    },
    "/private/toggle_subaccount_login": {
      "get": {
        "description": "Enable or disable login for a subaccount. If login is disabled and a session for the subaccount exists, this session will be terminated. <br>**[TFA required](#security-keys)**",
        "tags": [
          "Account Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "sid",
            "description": "The user id for the subaccount",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 7
            },
            "required": true
          },
          {
            "name": "state",
            "description": "enable or disable login.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "enable",
                "disable"
              ],
              "example": "enable"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GettoggleSubaccountLogin200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 938,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 938,
                    "method": "private/toggle_subaccount_login",
                    "params": {
                      "sid": 7,
                      "state": "enable"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/toggle_subaccount_login",
            "og:title": "private/toggle_subaccount_login"
          }
        }
      }
    },
    "/private/toggle_notifications_from_subaccount": {
      "get": {
        "description": "Enable or disable sending of notifications for the subaccount. <br>**[TFA required](#security-keys)**",
        "tags": [
          "Account Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "sid",
            "description": "The user id for the subaccount",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 7
            },
            "required": true
          },
          {
            "name": "state",
            "description": "enable (`true`) or disable (`false`) notifications",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GettoggleNotificationsFromSubaccount200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9995,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9995,
                    "method": "private/toggle_notifications_from_subaccount",
                    "params": {
                      "sid": 7,
                      "state": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/toggle_notifications_from_subaccount",
            "og:title": "private/toggle_notifications_from_subaccount"
          }
        }
      }
    },
    "/private/get_subaccounts": {
      "get": {
        "description": "Get information about subaccounts. When called from subaccount, the response will include limited details for the main account and details for the subaccount initiating the request. The portfolio information will be included in the response only if the `with_portfolio` parameter is set to `true`.",
        "tags": [
          "Account Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "with_portfolio",
            "description": "Portfolio flag: `true` for portfolio information, `false` for subaccount information only. `false` by default",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetSubaccountsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 4947,
                      "result": [
                        {
                          "email": "user_AAA@email.com",
                          "id": 2,
                          "is_password": true,
                          "margin_model": "segregated_sm",
                          "login_enabled": true,
                          "portfolio": {
                            "eth": {
                              "additional_reserve": 0,
                              "spot_reserve": 0,
                              "available_funds": 5,
                              "available_withdrawal_funds": 5,
                              "balance": 5,
                              "currency": "eth",
                              "equity": 5,
                              "initial_margin": 0,
                              "maintenance_margin": 0,
                              "margin_balance": 5
                            },
                            "btc": {
                              "additional_reserve": 0,
                              "spot_reserve": 0,
                              "available_funds": 5.000413075,
                              "available_withdrawal_funds": 5.000413075,
                              "balance": 5.000593987,
                              "currency": "btc",
                              "equity": 5.000571846,
                              "initial_margin": 0.000158771,
                              "maintenance_margin": 0.000115715,
                              "margin_balance": 5.000571846
                            }
                          },
                          "receive_notifications": false,
                          "system_name": "user_1",
                          "security_keys_enabled": false,
                          "security_keys_assignments": [],
                          "type": "main",
                          "username": "user_1"
                        },
                        {
                          "email": "user_AAA@gmail.com",
                          "id": 7,
                          "is_password": true,
                          "margin_model": "cross_pm",
                          "login_enabled": false,
                          "portfolio": {
                            "eth": {
                              "additional_reserve": 0,
                              "spot_reserve": 0,
                              "available_funds": 0,
                              "available_withdrawal_funds": 0,
                              "balance": 0,
                              "currency": "eth",
                              "equity": 0,
                              "initial_margin": 0,
                              "maintenance_margin": 0,
                              "margin_balance": 0
                            },
                            "btc": {
                              "additional_reserve": 0,
                              "spot_reserve": 0,
                              "available_funds": 0,
                              "available_withdrawal_funds": 0,
                              "balance": 0,
                              "currency": "btc",
                              "equity": 0,
                              "initial_margin": 0,
                              "maintenance_margin": 0,
                              "margin_balance": 0
                            }
                          },
                          "receive_notifications": false,
                          "system_name": "user_1_1",
                          "security_keys_enabled": false,
                          "security_keys_assignments": [],
                          "type": "subaccount",
                          "username": "user_1_1"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/PrivateGetSubaccountsResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 4947,
                    "method": "private/get_subaccounts",
                    "params": {
                      "with_portfolio": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_subaccounts",
            "og:title": "private/get_subaccounts"
          }
        }
      }
    },
    "/private/get_subaccounts_details": {
      "get": {
        "description": "Get subaccounts positions",
        "tags": [
          "Account Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "with_open_orders",
            "description": "Optional parameter to ask for open orders list, default: `false`",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetSubaccountsDetailsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "result": [
                        {
                          "uid": 3,
                          "positions": [
                            {
                              "total_profit_loss": -0.000118183,
                              "size_currency": 0.004152776,
                              "size": 200.0,
                              "settlement_price": 48150.36,
                              "realized_profit_loss": -8.79e-07,
                              "realized_funding": -8.8e-07,
                              "open_orders_margin": 0.0,
                              "mark_price": 48160.55,
                              "maintenance_margin": 8.9286e-05,
                              "leverage": 34,
                              "kind": "future",
                              "instrument_name": "BTC-PERPETUAL",
                              "initial_margin": 0.000122508,
                              "index_price": 47897.12,
                              "floating_profit_loss": -3.451e-05,
                              "estimated_liquidation_price": 2.33,
                              "direction": "buy",
                              "delta": 0.004152776,
                              "average_price": 49571.3
                            }
                          ]
                        },
                        {
                          "uid": 10,
                          "positions": [
                            {
                              "total_profit_loss": 3.7333e-05,
                              "size_currency": -0.001308984,
                              "size": -60.0,
                              "settlement_price": 47886.98,
                              "realized_profit_loss": 0.0,
                              "open_orders_margin": 0.0,
                              "mark_price": 45837.07,
                              "maintenance_margin": 2.8143e-05,
                              "leverage": 34,
                              "kind": "future",
                              "instrument_name": "BTC-3SEP21",
                              "initial_margin": 3.8615e-05,
                              "index_price": 47897.12,
                              "floating_profit_loss": 3.7333e-05,
                              "estimated_liquidation_price": null,
                              "direction": "sell",
                              "delta": -0.001308984,
                              "average_price": 47182.76
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/PrivateGetSubaccountsDetailsResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_subaccounts_details",
                    "params": {
                      "currency": "BTC"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_subaccounts_details",
            "og:title": "private/get_subaccounts_details"
          }
        }
      }
    },
    "/private/remove_subaccount": {
      "get": {
        "description": "Remove empty subaccount. <br>**[TFA required](#security-keys)**",
        "tags": [
          "Account Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "subaccount_id",
            "description": "The user id for the subaccount",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 120
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetremoveSubaccount200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 6,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 6,
                    "method": "private/remove_subaccount",
                    "params": {
                      "subaccount_id": 120
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/remove_subaccount",
            "og:title": "private/remove_subaccount"
          }
        }
      }
    },
    "/private/get_transaction_log": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/wallet_currency"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "query",
            "description": "The following keywords can be used to filter the results: `trade`, `maker`, `taker`, `open`, `close`, `liquidation`, `buy`, `sell`, `withdrawal`, `delivery`, `settlement`, `deposit`, `transfer`, `option`, `future`, `correction`, `block_trade`, `swap`. Plus withdrawal or transfer addresses",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "settlement"
            },
            "required": false
          },
          {
            "name": "count",
            "description": "Count of transaction log entries returned, default - `100`, maximum - `250`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 250,
              "minimum": 1
            }
          },
          {
            "name": "subaccount_id",
            "description": "Id of a subaccount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 9
            }
          },
          {
            "name": "continuation",
            "description": "Continuation token for pagination",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 429946
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetTransactionLogResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 4,
                      "result": {
                        "logs": [
                          {
                            "username": "TestUser",
                            "user_seq": 6009,
                            "user_id": 7,
                            "type": "transfer",
                            "trade_id": null,
                            "timestamp": 1613659830333,
                            "side": "-",
                            "price": null,
                            "position": null,
                            "order_id": null,
                            "interest_pl": null,
                            "instrument_name": null,
                            "info": {
                              "transfer_type": "subaccount",
                              "other_user_id": 27,
                              "other_user": "Subaccount"
                            },
                            "id": 61312,
                            "equity": 3000.9275869,
                            "currency": "BTC",
                            "commission": 0,
                            "change": -2.5,
                            "cashflow": -2.5,
                            "balance": 3001.22270418
                          },
                          {
                            "username": "TestUser",
                            "user_seq": 6008,
                            "user_id": 7,
                            "type": "settlement",
                            "trade_id": null,
                            "total_interest_pl": 1.243e-05,
                            "timestamp": 1613659544153,
                            "side": "long",
                            "session_upl": 0.00220172,
                            "session_rpl": -4.467e-05,
                            "price_currency": "USD",
                            "price": 51807.07,
                            "position": 1520,
                            "order_id": null,
                            "interest_pl": 9.93e-06,
                            "instrument_name": "BTC-PERPETUAL",
                            "info": {
                              "settlement_price": 51807,
                              "floating_pl": 0.00220172
                            },
                            "id": 61311,
                            "equity": 3003.42821428,
                            "currency": "BTC",
                            "commission": null,
                            "change": 0.00215706,
                            "cashflow": 0.00215706,
                            "balance": 3003.72270418,
                            "amount": 1520
                          },
                          {
                            "username": "TestUser",
                            "user_seq": 6007,
                            "user_id": 7,
                            "type": "deposit",
                            "trade_id": null,
                            "timestamp": 1613657828414,
                            "side": "-",
                            "price": null,
                            "position": null,
                            "order_id": null,
                            "interest_pl": null,
                            "instrument_name": null,
                            "info": {
                              "transaction": "de6eba075855f32c9510f338d3ca0900376cedcb9f7b142caccfbdc292d3237e",
                              "deposit_type": "wallet",
                              "addr": "2N8prMvpZHr8aYqodX3S4yhz5wMxjY8La3p"
                            },
                            "id": 61291,
                            "equity": 3003.4876111,
                            "currency": "BTC",
                            "commission": 0,
                            "change": 0.65,
                            "cashflow": 0.65,
                            "balance": 3003.72054712
                          },
                          {
                            "username": "TestUser",
                            "user_seq": 6006,
                            "user_role": "maker",
                            "user_id": 7,
                            "type": "trade",
                            "ip": "11.222.33.44",
                            "trade_id": "28349",
                            "timestamp": 1613657734620,
                            "side": "open buy",
                            "profit_as_cashflow": false,
                            "price_currency": "BTC",
                            "price": 0.1537,
                            "position": 0.7,
                            "order_id": "67546",
                            "mark_price": 0.04884653215049635,
                            "interest_pl": 0,
                            "instrument_name": "BTC-19FEB21-49200-C",
                            "info": "Source: api",
                            "id": 61289,
                            "equity": 3002.83270455,
                            "currency": "BTC",
                            "commission": 0,
                            "change": -0.10759,
                            "cashflow": -0.10759,
                            "balance": 3003.07054712,
                            "amount": 0.7
                          },
                          {
                            "username": "TestUser",
                            "user_seq": 6005,
                            "user_role": "maker",
                            "user_id": 7,
                            "type": "trade",
                            "trade_id": "28349",
                            "timestamp": 1613657734620,
                            "side": "close buy",
                            "profit_as_cashflow": false,
                            "price_currency": "BTC",
                            "price": 0.1537,
                            "position": 0,
                            "order_id": "67546",
                            "mark_price": 0.04884653215049635,
                            "interest_pl": 0,
                            "instrument_name": "BTC-19FEB21-49200-C",
                            "info": "Source: api",
                            "id": 61288,
                            "equity": 3002.83270455,
                            "currency": "BTC",
                            "commission": 0,
                            "change": -0.04611,
                            "cashflow": -0.04611,
                            "balance": 3003.17813712,
                            "amount": 0.3
                          }
                        ],
                        "continuation": 61282
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest user trades that have occurred for a specific instrument and within a given time range. **📖 Related Support Article:** Transaction log",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 4,
                    "method": "private/get_transaction_log",
                    "params": {
                      "currency": "BTC",
                      "start_timestamp": "1613657734000",
                      "end_timestamp": "1613660407000",
                      "count": 5
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_transaction_log",
            "og:title": "private/get_transaction_log"
          }
        }
      }
    },
    "/private/list_custody_accounts": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_private_list_custody_accounts_200",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2515,
                      "result": [
                        {
                          "name": "copper",
                          "currency": "BTC",
                          "client_id": "4KVcFrrzmXBR",
                          "external_id": "24f97d44-1d72-4641-8527-811268a0bdd3",
                          "balance": 0.5,
                          "withdrawals_require_security_key": false,
                          "pending_withdrawal_balance": 0.1,
                          "auto_deposit": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves user custody accounts list. **📖 Related Support Article:** [Custody Options](https://support.deribit.com/hc/en-us/articles/26533163120413-Custody-Options)",
        "tags": [
          "Account Management",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2515,
                    "method": "private/list_custody_accounts",
                    "params": {
                      "currency": "BTC"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/list_custody_accounts",
            "og:title": "private/list_custody_accounts"
          }
        }
      }
    },
    "/public/auth": {
      "get": {
        "description": "Retrieve an Oauth access token, to be used for authentication of 'private' requests. Three methods of authentication are supported: - `client_credentials` - using the client id and client secret that can be found on the API page on the website - `client_signature` - using the client id that can be found on the API page on the website and user generated signature. The signature is calculated using some fields provided in the request, using formula described here Deribit signature credentials - `refresh_token` - using a refresh token that was received from an earlier invocation The response will contain an access token, expiration period (number of seconds that the token is valid) and a refresh token that can be used to get a new set of tokens. **📖 Related Support Article:** API Authentication Guide",
        "tags": [
          "Authentication",
          "Public"
        ],
        "parameters": [
          {
            "name": "grant_type",
            "description": "Method of authentication",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "client_credentials",
                "client_signature",
                "refresh_token"
              ],
              "example": "client_credentials"
            },
            "required": true
          },
          {
            "name": "client_id",
            "description": "Required for grant type `client_credentials` and `client_signature`",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "fo7WAPRm4P"
            },
            "required": true
          },
          {
            "name": "client_secret",
            "description": "Required for grant type `client_credentials`",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "W0H6FJW4IRPZ1MOQ8FP6KMC5RZDUUKXS"
            },
            "required": true
          },
          {
            "name": "refresh_token",
            "description": "Required for grant type `refresh_token`",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "timestamp",
            "description": "Required for grant type `client_signature`, provides time when request has been generated (milliseconds since the UNIX epoch)",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": true
          },
          {
            "name": "signature",
            "description": "Required for grant type `client_signature`; it's a cryptographic signature calculated over provided fields using user **secret key**. The signature should be calculated as an HMAC (Hash-based Message Authentication Code) with `SHA256` hash algorithm",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "nonce",
            "description": "Optional for grant type `client_signature`; delivers user generated initialization vector for the server token",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "data",
            "description": "Optional for grant type `client_signature`; contains any user specific value",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "state",
            "description": "Will be passed back in the response",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "scope",
            "description": "Describes type of the access for assigned token, possible values: `connection`, `session:name`, `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `expires:NUMBER`, `ip:ADDR`. Details are elucidated in Access scope",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "connection"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicAuthResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9929,
                      "result": {
                        "access_token": "1582628593469.1MbQ-J_4.CBP-OqOwm_FBdMYj4cRK2dMXyHPfBtXGpzLxhWg31nHu3H_Q60FpE5_vqUBEQGSiMrIGzw3nC37NMb9d1tpBNqBOM_Ql9pXOmgtV9Yj3Pq1c6BqC6dU6eTxHMFO67x8GpJxqw_QcKP5IepwGBD-gfKSHfAv9AEnLJkNu3JkMJBdLToY1lrBnuedF3dU_uARm",
                        "expires_in": 31536000,
                        "refresh_token": "1582628593469.1GP4rQd0.A9Wa78o5kFRIUP49mScaD1CqHgiK50HOl2VA6kCtWa8BQZU5Dr03BhcbXPNvEh3I_MVixKZXnyoBeKJwLl8LXnfo180ckAiPj3zOclcUu4zkXuF3NNP3sTPcDf1B3C1CwMKkJ1NOcf1yPmRbsrd7hbgQ-hLa40tfx6Oa-85ymm_3Z65LZcnCeLrqlj_A9jM",
                        "scope": "connection mainaccount",
                        "enabled_features": [],
                        "token_type": "bearer"
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/PublicAuthResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9929,
                    "method": "public/auth",
                    "params": {
                      "grant_type": "client_credentials",
                      "client_id": "fo7WAPRm4P",
                      "client_secret": "W0H6FJW4IRPZ1MOQ8FP6KMC5RZDUUKXS"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/auth",
            "og:title": "public/auth"
          }
        }
      }
    },
    "/public/exchange_token": {
      "get": {
        "description": "Generates a token for a new subject id. This method can be used to switch between subaccounts.",
        "tags": [
          "Authentication",
          "Public"
        ],
        "parameters": [
          {
            "name": "refresh_token",
            "description": "Refresh token",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1568800656974.1CWcuzUS.MGy49NK4hpTwvR1OYWfpqMEkH4T4oDg4tNIcrM7KdeyxXRcSFqiGzA_D4Cn7mqWocHmlS89FFmUYcmaN2H7lNKKTnhRg5EtrzsFCCiuyN0Wv9y-LbGLV3-Ojv_kbD50FoScQ8BDXS5b_w6Ir1MqEdQ3qFZ3MLcvlPiIgG2BqyJX3ybYnVpIlrVrrdYD1-lkjLcjxOBNJvvUKNUAzkQ"
            },
            "required": true
          },
          {
            "name": "subject_id",
            "description": "New subject id",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "required": true
          },
          {
            "name": "scope",
            "description": "Optional scope override for the new session. Cannot exceed caller's permissions. Supports `session` scope for direct session creation during token exchange.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetexchangeToken200response"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7619,
                    "method": "public/exchange_token",
                    "params": {
                      "refresh_token": "1568800656974.1CWcuzUS.MGy49NK4hpTwvR1OYWfpqMEkH4T4oDg4tNIcrM7KdeyxXRcSFqiGzA_D4Cn7mqWocHmlS89FFmUYcmaN2H7lNKKTnhRg5EtrzsFCCiuyN0Wv9y-LbGLV3-Ojv_kbD50FoScQ8BDXS5b_w6Ir1MqEdQ3qFZ3MLcvlPiIgG2BqyJX3ybYnVpIlrVrrdYD1-lkjLcjxOBNJvvUKNUAzkQ",
                      "subject_id": 10
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/exchange_token",
            "og:title": "public/exchange_token"
          }
        }
      }
    },
    "/public/fork_token": {
      "get": {
        "description": "Generates a token for a new named session. This method can be used only with session scoped tokens.",
        "tags": [
          "Authentication",
          "Public"
        ],
        "parameters": [
          {
            "name": "refresh_token",
            "description": "Refresh token",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1568800656974.1CWcuzUS.MGy49NK4hpTwvR1OYWfpqMEkH4T4oDg4tNIcrM7KdeyxXRcSFqiGzA_D4Cn7mqWocHmlS89FFmUYcmaN2H7lNKKTnhRg5EtrzsFCCiuyN0Wv9y-LbGLV3-Ojv_kbD50FoScQ8BDXS5b_w6Ir1MqEdQ3qFZ3MLcvlPiIgG2BqyJX3ybYnVpIlrVrrdYD1-lkjLcjxOBNJvvUKNUAzkQ"
            },
            "required": true
          },
          {
            "name": "session_name",
            "description": "New session name",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "forked_session_name"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetforkToken200response"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7620,
                    "method": "public/fork_token",
                    "params": {
                      "refresh_token": "1568800656974.1CWcuzUS.MGy49NK4hpTwvR1OYWfpqMEkH4T4oDg4tNIcrM7KdeyxXRcSFqiGzA_D4Cn7mqWocHmlS89FFmUYcmaN2H7lNKKTnhRg5EtrzsFCCiuyN0Wv9y-LbGLV3-Ojv_kbD50FoScQ8BDXS5b_w6Ir1MqEdQ3qFZ3MLcvlPiIgG2BqyJX3ybYnVpIlrVrrdYD1-lkjLcjxOBNJvvUKNUAzkQ",
                      "session_name": "forked_session_name"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/fork_token",
            "og:title": "public/fork_token"
          }
        }
      }
    },
    "/private/logout": {
      "get": {
        "parameters": [
          {
            "name": "invalidate_token",
            "description": "If value is `true` all tokens created in current session are invalidated, default: `true`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "description": "Gracefully close websocket connection, when COD (Cancel On Disconnect) is enabled orders are not cancelled",
        "tags": [
          "Authentication",
          "WebSocket Only",
          "Private"
        ],
        "responses": {
          "200": {
            "description": "closes WS connection"
          },
          "400": {
            "$ref": "#/components/responses/Getlogout400response"
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/logout",
            "og:title": "private/logout"
          }
        }
      }
    },
    "/private/get_block_rfqs": {
      "get": {
        "parameters": [
          {
            "name": "count",
            "description": "Count of Block RFQs returned, maximum - `1000`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "state",
            "description": "State of Block RFQ",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "filled",
                "traded",
                "cancelled",
                "expired",
                "closed"
              ]
            }
          },
          {
            "name": "role",
            "description": "Role of the user in Block RFQ. When the `any` role is selected, the method returns all Block RFQs in which the user has participated, either as the `taker` or as a `maker`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "any",
                "taker",
                "maker"
              ]
            }
          },
          {
            "name": "continuation",
            "description": "The continuation parameter specifies the starting point for fetching historical Block RFQs. When provided, the endpoint returns Block RFQs, starting from the specified ID and continuing backward (e.g., if `continuation` is 50, results will include Block RFQs of ID 49, 48, etc.)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "block_rfq_id",
            "required": false,
            "in": "query",
            "description": "ID of the Block RFQ",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The currency symbol",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/block_rfq_currency"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetBlockRfqsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "continuation": null,
                        "block_rfqs": [
                          {
                            "state": "open",
                            "amount": 40000,
                            "role": "maker",
                            "combo_id": "BTC-15NOV24",
                            "legs": [
                              {
                                "direction": "sell",
                                "instrument_name": "BTC-15NOV24",
                                "ratio": 1
                              }
                            ],
                            "creation_timestamp": 1731062457741,
                            "block_rfq_id": 508,
                            "expiration_timestamp": 1731062757741,
                            "hedge": {
                              "amount": 10,
                              "direction": "buy",
                              "price": 70000,
                              "instrument_name": "BTC-PERPETUAL"
                            },
                            "taker_rating": "1-2"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This method returns a list of Block RFQs that were either created by the user or assigned to them as a maker, sorted in descending order. `trades` and `mark_price` are only visible for the filled Block RFQ. When a `block_rfq_id` is specified, only that particular Block RFQ will be returned. If called by a `taker`, response will additionally include `makers` list and `label` if previously provided. If called by the `maker`, the `trades` will include the maker's alias, but only for trades in which this maker participated. Can be optionally filtered by currency.",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_block_rfqs",
                    "params": {
                      "count": 20,
                      "state": "open",
                      "role": "maker"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_block_rfqs",
            "og:title": "private/get_block_rfqs"
          }
        }
      }
    },
    "/private/create_block_rfq": {
      "get": {
        "parameters": [
          {
            "description": "List of legs used to create Block RFQ",
            "in": "query",
            "name": "legs",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 3 properties"
              }
            }
          },
          {
            "name": "trade_allocations",
            "description": "List of allocations for Block RFQ pre-allocation. Allows to split amount between different (sub)accounts or broker clients. Each allocation must specify either `user_id` (for direct allocation) or `client_info` object (for broker allocation), and amount.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 3 properties"
              }
            }
          },
          {
            "description": "Hedge leg of the Block RFQ. There is only one hedge leg allowed per Block RFQ",
            "in": "query",
            "name": "hedge",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "instrument_name": {
                  "$ref": "#/components/schemas/instrument_name"
                },
                "direction": {
                  "$ref": "#/components/schemas/direction"
                },
                "price": {
                  "type": "number"
                },
                "amount": {
                  "$ref": "#/components/schemas/amount"
                }
              }
            }
          },
          {
            "name": "label",
            "description": "User defined label for the Block RFQ (maximum 64 characters)",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "makers",
            "description": "List of targeted Block RFQ makers. Only those makers will be notified about created Block RFQ. If the list is empty, all available makers will be targeted.",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "name": "disclosed",
            "description": "Determines whether the RFQ is non-anonymous, revealing both taker and maker aliases. It can be set to `false` (anonymous mode) only when at least 5 makers are targeted. Default value is `true`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateCreateBlockRfqResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "label": "example",
                        "state": "created",
                        "amount": 20000,
                        "role": "taker",
                        "bids": [],
                        "asks": [],
                        "combo_id": "BTC-15NOV24",
                        "legs": [
                          {
                            "direction": "sell",
                            "instrument_name": "BTC-15NOV24",
                            "ratio": 1
                          }
                        ],
                        "creation_timestamp": 1731062187555,
                        "block_rfq_id": 507,
                        "expiration_timestamp": 1731062487555,
                        "hedge": {
                          "amount": 10,
                          "direction": "buy",
                          "price": 70000,
                          "instrument_name": "BTC-PERPETUAL"
                        },
                        "makers": [
                          "MAKER1"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Taker method** This method creates a new Block RFQ. Block RFQ pre-allocation: The taker can split the total amount between different (sub)accounts using the `trade_allocations` parameter. The taker can also allocate to himself. Each allocation must specify either `user_id` (for direct allocation) or `client_info` object (for broker allocation), and `amount`. **📖 Related Support Article:** Deribit Block RFQ API walkthrough",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/create_block_rfq",
                    "params": {
                      "legs": [
                        {
                          "instrument_name": "BTC-15NOV24",
                          "amount": 20000,
                          "direction": "sell"
                        }
                      ],
                      "hedge": {
                        "amount": 10,
                        "direction": "buy",
                        "price": 70000,
                        "instrument_name": "BTC-PERPETUAL"
                      },
                      "label": "example",
                      "makers": [
                        "MAKER1"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/create_block_rfq",
            "og:title": "private/create_block_rfq"
          }
        }
      }
    },
    "/private/cancel_block_rfq": {
      "get": {
        "parameters": [
          {
            "name": "block_rfq_id",
            "required": true,
            "in": "query",
            "description": "ID of the Block RFQ",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateCancelBlockRfqResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "creation_timestamp": 1729855159611,
                        "block_rfq_id": 366,
                        "expiration_timestamp": 1729855459611,
                        "role": "taker",
                        "asks": [],
                        "bids": [],
                        "makers": [],
                        "amount": 100000,
                        "legs": [
                          {
                            "ratio": 1,
                            "instrument_name": "BTC-1NOV24",
                            "direction": "sell"
                          },
                          {
                            "ratio": 1,
                            "instrument_name": "BTC-PERPETUAL",
                            "direction": "buy"
                          }
                        ],
                        "combo_id": "BTC-FS-1NOV24_PERP",
                        "state": "cancelled",
                        "label": "example"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "<b>Taker method</b> <p>This method cancels a Block RFQ using the specified `block_rfq_id`.</p>",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/cancel_block_rfq",
                    "params": {
                      "block_rfq_id": 366
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_block_rfq",
            "og:title": "private/cancel_block_rfq"
          }
        }
      }
    },
    "/private/accept_block_rfq": {
      "get": {
        "parameters": [
          {
            "name": "block_rfq_id",
            "required": true,
            "in": "query",
            "description": "ID of the Block RFQ",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Maximum acceptable price for execution",
            "in": "query",
            "name": "price",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
            "in": "query",
            "name": "amount",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/amount"
            }
          },
          {
            "description": "Direction of the trade from the taker perspective",
            "in": "query",
            "name": "direction",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/direction"
            }
          },
          {
            "description": "Hedge leg of the Block RFQ. There is only one hedge leg allowed per Block RFQ",
            "in": "query",
            "name": "hedge",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "instrument_name": {
                  "$ref": "#/components/schemas/instrument_name"
                },
                "direction": {
                  "$ref": "#/components/schemas/direction"
                },
                "price": {
                  "type": "number"
                },
                "amount": {
                  "$ref": "#/components/schemas/amount"
                }
              }
            }
          },
          {
            "description": "List of legs used to trade Block RFQ",
            "in": "query",
            "name": "legs",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 3 properties"
              }
            }
          },
          {
            "name": "time_in_force",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "fill_or_kill",
                "good_til_cancelled"
              ],
              "example": "fill_or_kill"
            },
            "description": "Specifies how long the order should remain active"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateAcceptBlockRfqResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "block_trades": [
                          {
                            "id": "BLOCK-423",
                            "timestamp": 1730798381504,
                            "trades": [
                              {
                                "timestamp": 1730798381502,
                                "state": "filled",
                                "fee": 1.5e-07,
                                "amount": 100,
                                "direction": "buy",
                                "price": 69696.8,
                                "index_price": 70000,
                                "profit_loss": 0,
                                "instrument_name": "BTC-8NOV24-70000-C",
                                "trade_seq": 113,
                                "mark_price": 0.03,
                                "order_id": "2899",
                                "matching_id": null,
                                "tick_direction": 2,
                                "combo_id": "BTC-CS-8NOV24-70000_72000",
                                "block_rfq_id": 1,
                                "api": true,
                                "contracts": 100,
                                "post_only": false,
                                "block_trade_id": "BLOCK-423",
                                "trade_id": "771",
                                "order_type": "limit",
                                "mmp": false,
                                "risk_reducing": false,
                                "reduce_only": false,
                                "block_trade_leg_count": 2,
                                "self_trade": false,
                                "fee_currency": "BTC",
                                "liquidity": "T"
                              },
                              {
                                "timestamp": 1730798381502,
                                "state": "filled",
                                "fee": 1.5e-07,
                                "amount": 100,
                                "direction": "sell",
                                "price": 69677.4,
                                "index_price": 70000,
                                "profit_loss": 0,
                                "instrument_name": "BTC-8NOV24-72000-C",
                                "trade_seq": 113,
                                "mark_price": 0.02,
                                "order_id": "2900",
                                "matching_id": null,
                                "tick_direction": 2,
                                "combo_id": "BTC-CS-8NOV24-70000_72000",
                                "block_rfq_id": 1,
                                "api": true,
                                "contracts": 100,
                                "post_only": false,
                                "block_trade_id": "BLOCK-423",
                                "trade_id": "772",
                                "order_type": "limit",
                                "mmp": false,
                                "risk_reducing": false,
                                "reduce_only": false,
                                "block_trade_leg_count": 2,
                                "self_trade": false,
                                "fee_currency": "BTC",
                                "liquidity": "T"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "<b>Taker method</b> <p>This method allows Block RFQ taker to accept the response by sending a single crossing price. The order can be either filled immediately (`fill_or_kill`) or remain active until cancelled (`good_til_cancelled`). Please note that after Block RFQ creation, a grace period of 5 seconds begins, during which the taker cannot see quotes or trade the Block RFQ.</p>",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/accept_block_rfq",
                    "params": {
                      "block_rfq_id": 1,
                      "legs": [
                        {
                          "instrument_name": "BTC-8NOV24-70000-C",
                          "ratio": 1,
                          "direction": "buy"
                        },
                        {
                          "instrument_name": "BTC-8NOV24-72000-C",
                          "ratio": 1,
                          "direction": "sell"
                        }
                      ],
                      "price": 0.01,
                      "direction": "buy",
                      "amount": 100,
                      "time_in_force": "fill_or_kill"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/accept_block_rfq",
            "og:title": "private/accept_block_rfq"
          }
        }
      }
    },
    "/private/cancel_block_rfq_trigger": {
      "get": {
        "parameters": [
          {
            "name": "block_rfq_id",
            "required": true,
            "in": "query",
            "description": "ID of the Block RFQ",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateCancelBlockRfqTriggerResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "creation_timestamp": 1730798381504,
                        "expiration_timestamp": 1730798481504,
                        "block_rfq_id": 123,
                        "role": "taker",
                        "state": "open",
                        "taker_rating": "1-2",
                        "makers": [
                          "maker1",
                          "maker2"
                        ],
                        "amount": 100,
                        "min_trade_amount": 10,
                        "legs": [
                          {
                            "instrument_name": "BTC-8NOV24-70000-C",
                            "ratio": 1
                          },
                          {
                            "instrument_name": "BTC-8NOV24-72000-C",
                            "ratio": 1
                          }
                        ],
                        "combo_id": "BTC-CS-8NOV24-70000_72000",
                        "label": "My Block RFQ",
                        "app_name": "Example Application",
                        "mark_price": 0.025,
                        "disclosed": false,
                        "trade_trigger": {
                          "state": "cancelled",
                          "price": 0.01,
                          "direction": "buy",
                          "cancel_reason": "User cancelled"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "<b>Taker method</b> <p>This method allows Block RFQ taker to cancel an active trigger for a Block RFQ. The response includes the full Block RFQ object with the trade trigger state set to cancelled.</p>",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/cancel_block_rfq_trigger",
                    "params": {
                      "block_rfq_id": 123
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_block_rfq_trigger",
            "og:title": "private/cancel_block_rfq_trigger"
          }
        }
      }
    },
    "/private/get_block_rfq_quotes": {
      "get": {
        "parameters": [
          {
            "name": "block_rfq_id",
            "required": false,
            "in": "query",
            "description": "ID of the Block RFQ",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "label",
            "description": "User defined label for the Block RFQ quote (maximum 64 characters). Used to identify quotes of a selected Block RFQ",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "block_rfq_quote_id",
            "required": false,
            "in": "query",
            "description": "ID of the Block RFQ quote",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetBlockRfqQuotesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "label": "example_quote",
                        "amount": 20000,
                        "direction": "buy",
                        "price": 74600,
                        "legs": [
                          {
                            "direction": "buy",
                            "price": 74600,
                            "instrument_name": "BTC-15NOV24",
                            "ratio": 1
                          }
                        ],
                        "creation_timestamp": 1731076586371,
                        "block_rfq_id": 1,
                        "replaced": false,
                        "filled_amount": 0,
                        "last_update_timestamp": 1731076638591,
                        "hedge": {
                          "amount": 10,
                          "direction": "buy",
                          "price": 70000,
                          "instrument_name": "BTC-PERPETUAL"
                        },
                        "block_rfq_quote_id": 8,
                        "quote_state": "open",
                        "execution_instruction": "all_or_none"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "<b>Maker method</b> <p>This method retrieves all open quotes for Block RFQs. When a `block_rfq_id` is specified, only the open quotes for that particular Block RFQ will be returned. When a `label` is specified, all quotes with this label are returned. `block_rfq_quote_id` returns one specific quote.</p>",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_block_rfq_quotes",
                    "params": {
                      "block_rfq_id": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_block_rfq_quotes",
            "og:title": "private/get_block_rfq_quotes"
          }
        }
      }
    },
    "/private/add_block_rfq_quote": {
      "get": {
        "parameters": [
          {
            "name": "label",
            "description": "User defined label for the Block RFQ quote (maximum 64 characters). Used to identify quotes of a selected Block RFQ",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "block_rfq_id",
            "required": true,
            "in": "query",
            "description": "ID of the Block RFQ",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
            "in": "query",
            "name": "amount",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/amount"
            }
          },
          {
            "description": "Direction of trade from the maker perspective",
            "in": "query",
            "name": "direction",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/direction"
            }
          },
          {
            "description": "List of legs used for Block RFQ quote",
            "in": "query",
            "name": "legs",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 4 properties"
              }
            }
          },
          {
            "description": "Hedge leg of the Block RFQ. There is only one hedge leg allowed per Block RFQ",
            "in": "query",
            "name": "hedge",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "instrument_name": {
                  "$ref": "#/components/schemas/instrument_name"
                },
                "direction": {
                  "$ref": "#/components/schemas/direction"
                },
                "price": {
                  "type": "number"
                },
                "amount": {
                  "$ref": "#/components/schemas/amount"
                }
              }
            }
          },
          {
            "name": "execution_instruction",
            "required": false,
            "in": "query",
            "description": "Execution instruction of the quote. Default - `any_part_of` `\"all_or_none (AON)\"` - The quote can only be filled entirely or not at all, ensuring that its amount matches the amount specified in the Block RFQ. Additionally, 'all_or_none' quotes have priority over 'any_part_of' quotes at the same price level. `\"any_part_of (APO)\"` - The quote can be filled either partially or fully, with the filled amount potentially being less than the Block RFQ amount.",
            "schema": {
              "type": "string",
              "enum": [
                "all_or_none",
                "any_part_of"
              ]
            }
          },
          {
            "description": "Aggregated price used for quoting future spreads.",
            "in": "query",
            "name": "price",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "expires_at",
            "description": "The timestamp when the quote expires (milliseconds since the Unix epoch)",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 1745312540321
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateAddBlockRfqQuoteResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "label": "example_quote",
                        "amount": 10000,
                        "direction": "buy",
                        "price": 69600,
                        "legs": [
                          {
                            "direction": "buy",
                            "price": 69600,
                            "instrument_name": "BTC-15NOV24",
                            "ratio": 1
                          }
                        ],
                        "creation_timestamp": 1731076586371,
                        "block_rfq_id": 3,
                        "replaced": false,
                        "filled_amount": 0,
                        "hedge": {
                          "amount": 10,
                          "direction": "buy",
                          "price": 70000,
                          "instrument_name": "BTC-PERPETUAL"
                        },
                        "last_update_timestamp": 1731076586371,
                        "block_rfq_quote_id": 8,
                        "quote_state": "open"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "<b>Maker method</b> <p>This method adds quote to the existing Block RFQ. To calculate individual leg prices, the `private/get_leg_prices` endpoint can be utilized.</p>",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/add_block_rfq_quote",
                    "params": {
                      "label": "example_quote",
                      "block_rfq_id": 3,
                      "amount": 10000,
                      "direction": "buy",
                      "legs": [
                        {
                          "instrument_name": "BTC-15NOV24",
                          "price": 69600,
                          "ratio": "1",
                          "direction": "buy"
                        }
                      ],
                      "hedge": {
                        "amount": 10,
                        "direction": "buy",
                        "price": 70000,
                        "instrument_name": "BTC-PERPETUAL"
                      },
                      "execution_instruction": "any_part_of",
                      "expires_at": 1745312540321
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/add_block_rfq_quote",
            "og:title": "private/add_block_rfq_quote"
          }
        }
      }
    },
    "/private/edit_block_rfq_quote": {
      "get": {
        "parameters": [
          {
            "description": "List of legs used for Block RFQ quote",
            "in": "query",
            "name": "legs",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 4 properties"
              }
            }
          },
          {
            "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
            "in": "query",
            "name": "amount",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/amount"
            }
          },
          {
            "name": "block_rfq_quote_id",
            "required": false,
            "in": "query",
            "description": "ID of the Block RFQ quote",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "label",
            "description": "User defined label for the Block RFQ quote (maximum 64 characters). Used to identify quotes of a selected Block RFQ",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "description": "Hedge leg of the Block RFQ. There is only one hedge leg allowed per Block RFQ",
            "in": "query",
            "name": "hedge",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "instrument_name": {
                  "$ref": "#/components/schemas/instrument_name"
                },
                "direction": {
                  "$ref": "#/components/schemas/direction"
                },
                "price": {
                  "type": "number"
                },
                "amount": {
                  "$ref": "#/components/schemas/amount"
                }
              }
            }
          },
          {
            "name": "block_rfq_id",
            "required": false,
            "in": "query",
            "description": "ID of the Block RFQ",
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Aggregated price used for quoting future spreads.",
            "in": "query",
            "name": "price",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateEditBlockRfqQuoteResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "label": "example_quote",
                        "amount": 20000,
                        "direction": "buy",
                        "price": 74600,
                        "legs": [
                          {
                            "direction": "buy",
                            "price": 74600,
                            "instrument_name": "BTC-15NOV24",
                            "ratio": 1
                          }
                        ],
                        "creation_timestamp": 1731076586371,
                        "block_rfq_id": 3,
                        "replaced": true,
                        "filled_amount": 0,
                        "last_update_timestamp": 1731076638591,
                        "hedge": {
                          "amount": 10,
                          "direction": "buy",
                          "price": 70000,
                          "instrument_name": "BTC-PERPETUAL"
                        },
                        "block_rfq_quote_id": 8,
                        "quote_state": "open"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "<b>Maker method</b> <p>This method edits a Block RFQ quote using the specified `block_rfq_quote_id`. Alternatively, user can use a combination of `block_rfq_id` and `label` to edit the quote.</p>",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/edit_block_rfq_quote",
                    "params": {
                      "label": "example_quote",
                      "block_rfq_id": 3,
                      "amount": 20000,
                      "direction": "buy",
                      "legs": [
                        {
                          "instrument_name": "BTC-15NOV24",
                          "price": 74600,
                          "ratio": "1",
                          "direction": "buy"
                        }
                      ],
                      "hedge": {
                        "amount": 10,
                        "direction": "buy",
                        "price": 70000,
                        "instrument_name": "BTC-PERPETUAL"
                      },
                      "execution_instruction": "any_part_of"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/edit_block_rfq_quote",
            "og:title": "private/edit_block_rfq_quote"
          }
        }
      }
    },
    "/private/cancel_block_rfq_quote": {
      "get": {
        "parameters": [
          {
            "name": "block_rfq_quote_id",
            "required": false,
            "in": "query",
            "description": "ID of the Block RFQ quote",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "label",
            "description": "User defined label for the Block RFQ quote (maximum 64 characters). Used to identify quotes of a selected Block RFQ",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "block_rfq_id",
            "required": false,
            "in": "query",
            "description": "ID of the Block RFQ",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateCancelBlockRfqQuoteResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "label": "example_quote",
                        "amount": 20000,
                        "direction": "buy",
                        "price": 74600,
                        "legs": [
                          {
                            "direction": "buy",
                            "price": 74600,
                            "instrument_name": "BTC-15NOV24",
                            "ratio": 1
                          }
                        ],
                        "creation_timestamp": 1731076586371,
                        "block_rfq_id": 3,
                        "replaced": false,
                        "filled_amount": 0,
                        "last_update_timestamp": 1731076655746,
                        "hedge": {
                          "amount": 10,
                          "direction": "buy",
                          "price": 70000,
                          "instrument_name": "BTC-PERPETUAL"
                        },
                        "block_rfq_quote_id": 8,
                        "quote_state": "cancelled"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "<b>Maker method</b> <p>This method cancels a single Block RFQ quote. You can identify the quote to cancel using either:</p> <ul> <li><code>block_rfq_quote_id</code> - the unique ID of the quote</li> <li><code>block_rfq_id</code> + <code>label</code> - the Block RFQ ID and the quote label</li> </ul> <p><b>Note:</b> Mass cancellation by label is not supported. This method cancels only one quote at a time.</p>",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/cancel_block_rfq_quote",
                    "params": {
                      "label": "example_quote",
                      "block_rfq_id": 3
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_block_rfq_quote",
            "og:title": "private/cancel_block_rfq_quote"
          }
        }
      }
    },
    "/private/cancel_all_block_rfq_quotes": {
      "get": {
        "parameters": [
          {
            "name": "block_rfq_id",
            "required": false,
            "in": "query",
            "description": "ID of the Block RFQ",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "detailed",
            "description": "When detailed is set to `true` output format is changed. See description. Default: `false`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateCancelAllBlockRfqQuotesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "result": 1
                    }
                  }
                }
              }
            }
          }
        },
        "description": "<b>Maker method</b> <p>This method cancels all user quotes in all Block RFQs. Optionally cancels all quotes in a specific RFQ if the `block_rfq_id` is provided.</p> <p><b>Note:</b> Mass cancellation by label is not supported. This method will cancel all quotes regardless of their labels.</p>",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 24,
                    "method": "private/cancel_all_block_rfq_quotes",
                    "params": {
                      "block_rfq_id": 154
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_all_block_rfq_quotes",
            "og:title": "private/cancel_all_block_rfq_quotes"
          }
        }
      }
    },
    "/private/get_block_rfq_makers": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetBlockRfqMakersResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": [
                        "MAKER1",
                        "MAKER2",
                        "MAKER3"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This method returns a list of all available Block RFQ makers.",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_block_rfq_makers",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_block_rfq_makers",
            "og:title": "private/get_block_rfq_makers"
          }
        }
      }
    },
    "/public/get_block_rfq_trades": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol or `\"any\"` for all",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency_with_any"
            }
          },
          {
            "name": "continuation",
            "description": "Continuation token for pagination. Consists of `timestamp` and `block_rfq_id`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1738050297271:103"
            }
          },
          {
            "name": "count",
            "description": "Count of Block RFQs returned, maximum - `1000`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetBlockRfqTradesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "continuation": "1739739009234:6570",
                        "block_rfqs": [
                          {
                            "id": 6611,
                            "timestamp": 1739803305362,
                            "combo_id": "BTC-CS-28FEB25-100000_106000",
                            "legs": [
                              {
                                "price": 0.1,
                                "direction": "buy",
                                "instrument_name": "BTC-28FEB25-100000-C",
                                "ratio": 1
                              },
                              {
                                "price": 0.05,
                                "direction": "sell",
                                "instrument_name": "BTC-28FEB25-106000-C",
                                "ratio": 1
                              }
                            ],
                            "amount": 12.5,
                            "direction": "sell",
                            "mark_price": 0.010356754,
                            "trades": [
                              {
                                "price": 0.05,
                                "amount": 12.5,
                                "direction": "sell",
                                "hedge_amount": 50
                              }
                            ],
                            "hedge": {
                              "price": 96000,
                              "amount": 50,
                              "direction": "sell",
                              "instrument_name": "BTC-PERPETUAL"
                            },
                            "index_prices": {
                              "btc_usd": 96000,
                              "btc_usdc": 95950
                            }
                          },
                          {
                            "id": 6600,
                            "timestamp": 1739774397766,
                            "combo_id": "BTC-CS-28FEB25-100000_106000",
                            "legs": [
                              {
                                "price": 0.1,
                                "direction": "buy",
                                "instrument_name": "BTC-28FEB25-100000-C",
                                "ratio": 1
                              },
                              {
                                "price": 0.05,
                                "direction": "sell",
                                "instrument_name": "BTC-28FEB25-106000-C",
                                "ratio": 1
                              }
                            ],
                            "amount": 12.5,
                            "direction": "sell",
                            "mark_price": 0.007458089,
                            "trades": [
                              {
                                "price": 0.05,
                                "amount": 12.5,
                                "direction": "sell",
                                "hedge_amount": 50
                              }
                            ],
                            "hedge": {
                              "price": 96000,
                              "amount": 50,
                              "direction": "sell",
                              "instrument_name": "BTC-PERPETUAL"
                            },
                            "index_prices": {
                              "btc_usd": 96000,
                              "btc_usdc": 95950
                            }
                          },
                          {
                            "id": 6579,
                            "timestamp": 1739743922308,
                            "combo_id": "BTC-CS-17FEB25-89000_90000",
                            "legs": [
                              {
                                "price": 0.08,
                                "direction": "buy",
                                "instrument_name": "BTC-17FEB25-89000-C",
                                "ratio": 1
                              },
                              {
                                "price": 0.075,
                                "direction": "sell",
                                "instrument_name": "BTC-17FEB25-90000-C",
                                "ratio": 1
                              }
                            ],
                            "amount": 12.5,
                            "direction": "sell",
                            "mark_price": 0.010314468,
                            "trades": [
                              {
                                "price": 0.005,
                                "amount": 12.5,
                                "direction": "sell"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This method returns a list of recent Block RFQs trades. Can be optionally filtered by currency.",
        "tags": [
          "Block RFQ",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "public/get_block_rfq_trades",
                    "params": {
                      "currency": "BTC"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_block_rfq_trades",
            "og:title": "public/get_block_rfq_trades"
          }
        }
      }
    },
    "/private/get_block_rfq_user_info": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetBlockRfqUserInfoResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "parent": {
                          "identity": "MAKER1",
                          "is_maker": true
                        },
                        "users": [
                          {
                            "user_id": 1,
                            "taker_rating": 98.5,
                            "identity": "TAKER1",
                            "is_maker": false
                          },
                          {
                            "user_id": 2,
                            "taker_rating": 97.0
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Returns identity and rating information for the requesting account and its subaccounts. Includes both group-level and individual user-level alias data, if available.",
        "tags": [
          "Block RFQ",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_block_rfq_user_info",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_block_rfq_user_info",
            "og:title": "private/get_block_rfq_user_info"
          }
        }
      }
    },
    "/private/simulate_block_trade": {
      "get": {
        "parameters": [
          {
            "description": "Describes if user wants to be maker or taker of trades",
            "in": "query",
            "name": "role",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/role"
            }
          },
          {
            "description": "List of trades for block trade",
            "in": "query",
            "name": "trades",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 4 properties"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateSimulateBlockTradeResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "result": true
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Checks if a block trade can be executed",
        "tags": [
          "Block Trade",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/simulate_block_trade",
                    "params": {
                      "role": "maker",
                      "trades": [
                        {
                          "instrument_name": "BTC-PERPETUAL",
                          "direction": "buy",
                          "price": 11624,
                          "amount": 40
                        },
                        {
                          "instrument_name": "BTC-9AUG19-10250-P",
                          "direction": "buy",
                          "amount": 1.2,
                          "price": 0.0707
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/simulate_block_trade",
            "og:title": "private/simulate_block_trade"
          }
        }
      }
    },
    "/private/verify_block_trade": {
      "get": {
        "parameters": [
          {
            "description": "Timestamp, shared with other party (milliseconds since the UNIX epoch)",
            "in": "query",
            "name": "timestamp",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "description": "Nonce, shared with other party",
            "in": "query",
            "name": "nonce",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/nonce"
            }
          },
          {
            "description": "Describes if user wants to be maker or taker of trades",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/role"
            }
          },
          {
            "description": "List of trades for block trade",
            "in": "query",
            "name": "trades",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 4 properties"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateVerifyBlockTradeResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "result": {
                        "signature": "1565172710935.1ESE83qh.g6fbgRd4VWagaJz7xdi2WaV-q-d3J0njoz1jZavuRudZJZif9uH8XdUAx1LHsu0E3e0ZG_xe1UPYlwo41xRVrkWU6OMgygDRafUkEmBuk9iLqjc9rh4"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Verifies and creates block trade signature<br><br><strong>Note:</strong> In the API, the `direction` field is always expressed from the maker's perspective. This means that when you accept a block trade as a taker, the direction shown in the API represents the opposite side of your trade. For example, if you are buying puts as a taker, the API will show the operation as a \"sell put\" (maker's perspective), and you will be verifying and accepting a \"sell put\" block trade.<br><br>**📖 Related Support Article:** [Block Trading](https://support.deribit.com/hc/en-us/articles/25944688627229-Block-Trading)",
        "tags": [
          "Block Trade",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/verify_block_trade",
                    "params": {
                      "nonce": "okpdjkdo",
                      "timestamp": 1565172650935,
                      "role": "maker",
                      "trades": [
                        {
                          "instrument_name": "BTC-PERPETUAL",
                          "direction": "buy",
                          "price": 11624,
                          "amount": 40
                        },
                        {
                          "instrument_name": "BTC-9AUG19-10250-P",
                          "direction": "buy",
                          "amount": 1.2,
                          "price": 0.0707
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/verify_block_trade",
            "og:title": "private/verify_block_trade"
          }
        }
      }
    },
    "/private/execute_block_trade": {
      "get": {
        "parameters": [
          {
            "description": "Timestamp, shared with other party (milliseconds since the UNIX epoch)",
            "in": "query",
            "name": "timestamp",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "description": "Nonce, shared with other party",
            "in": "query",
            "name": "nonce",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/nonce"
            }
          },
          {
            "description": "Describes if user wants to be maker or taker of trades",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/role"
            }
          },
          {
            "description": "List of trades for block trade",
            "in": "query",
            "name": "trades",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 4 properties"
              }
            }
          },
          {
            "description": "Signature of block trade generated by `private/verify_block_trade_method`",
            "in": "query",
            "name": "counterparty_signature",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/block_trade_signature"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetexecuteBlockTrade200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "result": {
                        "trades": [
                          {
                            "trade_seq": 30289730,
                            "trade_id": "48079573",
                            "timestamp": 1590485535978,
                            "tick_direction": 0,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 8900.0,
                            "post_only": false,
                            "order_type": "limit",
                            "order_id": "4009043192",
                            "matching_id": "None",
                            "mark_price": 8895.19,
                            "liquidity": "M",
                            "instrument_name": "BTC-PERPETUAL",
                            "index_price": 8900.45,
                            "fee_currency": "BTC",
                            "fee": -0.00561798,
                            "direction": "sell",
                            "block_trade_id": "6165",
                            "amount": 200000.0
                          },
                          {
                            "underlying_price": 8902.86,
                            "trade_seq": 1,
                            "trade_id": "48079574",
                            "timestamp": 1590485535979,
                            "tick_direction": 1,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 0.0133,
                            "post_only": false,
                            "order_type": "limit",
                            "order_id": "4009043194",
                            "matching_id": "None",
                            "mark_price": 0.01831619,
                            "liquidity": "M",
                            "iv": 62.44,
                            "instrument_name": "BTC-28MAY20-9000-C",
                            "index_price": 8900.45,
                            "fee_currency": "BTC",
                            "fee": 0.002,
                            "direction": "sell",
                            "block_trade_id": "6165",
                            "amount": 5.0
                          }
                        ],
                        "timestamp": 1590485535980,
                        "id": "6165"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates block trade<br><br>The whole request have to be exact the same as in `private/verify_block_trade`, only `role` field should be set appropriately - it basically means that both sides have to agree on the same `timestamp`, `nonce`, `trades` fields and server will assure that `role` field is different between sides (each party accepted own role).<br><br>Using the same `timestamp` and `nonce` by both sides in `private/verify_block_trade` assures that even if unintentionally both sides execute given block trade with valid `counterparty_signature`, the given block trade will be executed only once.<br><br><strong>Note:</strong> In the API, the `direction` field is always expressed from the maker's perspective. This means that when you accept a block trade as a taker, the direction shown in the API represents the opposite side of your trade. For example, if you are buying puts as a taker, the API will show the operation as a \"sell put\" (maker's perspective), and you will be verifying and accepting a \"sell put\" block trade.<br><br>**📖 Related Support Article:** [Block Trading](https://support.deribit.com/hc/en-us/articles/25944688627229-Block-Trading)",
        "tags": [
          "Block Trade",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/execute_block_trade",
                    "params": {
                      "nonce": "bszyprbq",
                      "timestamp": 1590485535899,
                      "role": "maker",
                      "trades": [
                        {
                          "instrument_name": "BTC-PERPETUAL",
                          "direction": "sell",
                          "price": 8900.0,
                          "amount": 200000
                        },
                        {
                          "instrument_name": "BTC-28MAY20-9000-C",
                          "direction": "sell",
                          "amount": 5.0,
                          "price": 0.0133
                        }
                      ],
                      "counterparty_signature": "1590485595899.1Mn52L_Q.lNyNBzXXo-_QBT_wDuMgnhA7uS9tBqdQ5TLN6rxbuoAiQhyaJYGJrm5IV_9enp9niY_x8D60AJLm3yEKPUY1Dv3T0TW0n5-ADPpJF7Fpj0eVDZpZ6QCdX8snBWrSJ0TtqevnO64RCBlN1dIm2T70PP9dlhiqPDAUYI4fpB1vLYI"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/execute_block_trade",
            "og:title": "private/execute_block_trade"
          }
        }
      }
    },
    "/private/invalidate_block_trade_signature": {
      "get": {
        "parameters": [
          {
            "description": "Signature of block trade that will be invalidated",
            "in": "query",
            "name": "signature",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/block_trade_signature"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetinvalidateBlockTradeSignature200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "User at any time (before the private/execute_block_trade is called) can invalidate its own signature effectively cancelling block trade",
        "tags": [
          "Block Trade",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/invalidate_block_trade_signature",
                    "params": {
                      "signature": "1565173369982.1M9tO0Q-.z9n9WyZUU5op9pEz6Jtd2CI71QxQMMsCZAexnIfK9HQRT1pKH3clxeIbY7Bqm-yMcWIoE3IfCDPW5VEdiN-6oS0YkKUyXPD500MUf3ULKhfkmH81EZs"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/invalidate_block_trade_signature",
            "og:title": "private/invalidate_block_trade_signature"
          }
        }
      }
    },
    "/private/get_block_trade": {
      "get": {
        "parameters": [
          {
            "description": "Block trade id",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/block_trade_id"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetBlockTradeResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "result": {
                        "trades": [
                          {
                            "trade_seq": 37,
                            "trade_id": "92437",
                            "timestamp": 1565089523719,
                            "tick_direction": 3,
                            "state": "filled",
                            "price": 0.0001,
                            "order_type": "limit",
                            "order_id": "343062",
                            "matching_id": null,
                            "liquidity": "T",
                            "iv": 0,
                            "instrument_name": "BTC-9AUG19-10250-C",
                            "index_price": 11738,
                            "fee_currency": "BTC",
                            "fee": 0.00025,
                            "direction": "sell",
                            "block_trade_id": "61",
                            "amount": 10
                          },
                          {
                            "trade_seq": 25350,
                            "trade_id": "92435",
                            "timestamp": 1565089523719,
                            "tick_direction": 3,
                            "state": "filled",
                            "price": 11590,
                            "order_type": "limit",
                            "order_id": "343058",
                            "matching_id": null,
                            "liquidity": "T",
                            "instrument_name": "BTC-PERPETUAL",
                            "index_price": 11737.98,
                            "fee_currency": "BTC",
                            "fee": 1.64e-06,
                            "direction": "buy",
                            "block_trade_id": "61",
                            "amount": 190
                          }
                        ],
                        "timestamp": 1565089523720,
                        "id": "61"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Returns information about the users block trade",
        "tags": [
          "Block Trade",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_block_trade",
                    "params": {
                      "id": "61"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_block_trade",
            "og:title": "private/get_block_trade"
          }
        }
      }
    },
    "/private/get_block_trades": {
      "get": {
        "parameters": [
          {
            "description": "The currency symbol",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "count",
            "description": "Count of Block Trades returned, maximum - `101`",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 101,
              "minimum": 1
            }
          },
          {
            "name": "start_id",
            "description": "Response will contain block trades older than the one provided in this field",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/block_trade_id"
            }
          },
          {
            "name": "end_id",
            "description": "The id of the oldest block trade to be returned, `start_id` is required with `end_id`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/block_trade_id"
            }
          },
          {
            "name": "block_rfq_id",
            "required": false,
            "in": "query",
            "description": "ID of the Block RFQ",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "broker_code",
            "in": "query",
            "description": "Broker code to filter block trades. Only broker clients can use `broker_code` to filter broker block trades. Use `any` for all block trades.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2krM7sJsx"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetBlockTradesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "result": [
                        {
                          "trades": [
                            {
                              "trade_seq": 4,
                              "trade_id": "92462",
                              "timestamp": 1565093070164,
                              "tick_direction": 2,
                              "state": "filled",
                              "price": 0.0151,
                              "order_type": "limit",
                              "order_id": "343121",
                              "matching_id": null,
                              "liquidity": "M",
                              "iv": 72.38,
                              "instrument_name": "BTC-9AUG19-11500-P",
                              "index_price": 11758.65,
                              "fee_currency": "BTC",
                              "fee": 0,
                              "direction": "sell",
                              "block_trade_id": "66",
                              "amount": 2.3
                            },
                            {
                              "trade_seq": 41,
                              "trade_id": "92460",
                              "timestamp": 1565093070164,
                              "tick_direction": 2,
                              "state": "filled",
                              "price": 11753,
                              "order_type": "limit",
                              "order_id": "343117",
                              "matching_id": null,
                              "liquidity": "M",
                              "instrument_name": "BTC-9AUG19",
                              "index_price": 11758.65,
                              "fee_currency": "BTC",
                              "fee": 0,
                              "direction": "sell",
                              "block_trade_id": "66",
                              "amount": 50
                            }
                          ],
                          "timestamp": 1565093070165,
                          "id": "66"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Returns list of users block trades. If currency is not provided, returns block trades for all currencies. `block_rfq_id` can be provided to receive block trades related to that particular Block RFQ.",
        "tags": [
          "Block Trade",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_block_trades",
                    "params": {
                      "currency": "BTC",
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_block_trades",
            "og:title": "private/get_block_trades"
          }
        }
      }
    },
    "/private/get_pending_block_trades": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetPendingBlockTradesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 6,
                      "result": [
                        {
                          "nonce": "bt-468nha",
                          "app_name": "test",
                          "trades": [
                            {
                              "instrument_name": "BTC-PERPETUAL",
                              "price": 70246.66,
                              "direction": "buy",
                              "amount": 10
                            }
                          ],
                          "role": "maker",
                          "user_id": 7,
                          "state": {
                            "value": "initial",
                            "timestamp": 1711468813552
                          },
                          "timestamp": 1711468813551
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**DEPRECATED**: This method is deprecated. Please use `private/get_block_trade_requests` instead.<br><br>Provides a list of pending block trade approvals. `timestamp` and `nonce` received in response can be used to approve or reject the pending block trade.<br><br> To use a block trade approval feature the additional API key setting feature called: `enabled_features: block_trade_approval` is required. This key has to be given to broker/registered partner who performs the trades on behalf of the user for the feature to be active. If the user wants to approve the trade, he has to approve it from different API key with doesn't have this feature enabled.",
        "tags": [
          "Block Trade",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 6,
                    "method": "private/get_pending_block_trades",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_pending_block_trades",
            "og:title": "private/get_pending_block_trades"
          }
        }
      }
    },
    "/private/get_block_trade_requests": {
      "get": {
        "parameters": [
          {
            "name": "broker_code",
            "in": "query",
            "description": "Broker code to filter block trade requests. Only broker clients can use `broker_code` to query for their executed broker block trades.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "jpqYKgg1"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetBlockTradeRequestsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": [
                        {
                          "timestamp": 1742824052538,
                          "state": {
                            "timestamp": 1742824052539,
                            "value": "initial"
                          },
                          "username": "Trader",
                          "user_id": 8,
                          "role": "taker",
                          "trades": [
                            {
                              "amount": 100000,
                              "direction": "buy",
                              "price": 87516.83,
                              "instrument_name": "BTC-PERPETUAL"
                            }
                          ],
                          "broker_code": "jpqYKgg1",
                          "broker_name": "Test Broker",
                          "counterparty_state": {
                            "timestamp": 1742824052538,
                            "value": "approved"
                          },
                          "nonce": "29rKkuD3NSBPet4njrpNWEuHBm9s"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Provides a list of block trade requests including pending approvals, declined trades, and expired trades. `timestamp` and `nonce` received in response can be used to approve or reject the pending block trade.<br><br> To use a block trade approval feature the additional API key setting feature called: `enabled_features: block_trade_approval` is required. This key has to be given to broker/registered partner who performs the trades on behalf of the user for the feature to be active. If the user wants to approve the trade, he has to approve it from different API key with doesn't have this feature enabled.<br><br> Only broker clients can use `broker_code` to query for their broker block trade requests.",
        "tags": [
          "Block Trade",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_block_trade_requests",
                    "params": {
                      "broker_code": "jpqYKgg1"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_block_trade_requests",
            "og:title": "private/get_block_trade_requests"
          }
        }
      }
    },
    "/private/approve_block_trade": {
      "get": {
        "parameters": [
          {
            "description": "Timestamp, shared with other party (milliseconds since the UNIX epoch)",
            "in": "query",
            "name": "timestamp",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "description": "Nonce, shared with other party",
            "in": "query",
            "name": "nonce",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/nonce"
            }
          },
          {
            "description": "Describes if user wants to be maker or taker of trades",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/role"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetapproveBlockTrade200response"
          }
        },
        "description": "Used to approve a pending block trade. `nonce` and `timestamp` are used to identify the block trade while `role` should be opposite to the trading counterparty.<br><br> To use a block trade approval feature the additional API key setting feature called: `enabled_features: block_trade_approval` is required. This key has to be given to broker/registered partner who performs the trades on behalf of the user for the feature to be active. If the user wants to approve the trade, he has to approve it from different API key with doesn't have this feature enabled.",
        "tags": [
          "Block Trade",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/approve_block_trade",
                    "params": {
                      "timestamp": 1711468813551,
                      "nonce": "bt-468nha",
                      "role": "maker"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/approve_block_trade",
            "og:title": "private/approve_block_trade"
          }
        }
      }
    },
    "/private/reject_block_trade": {
      "get": {
        "parameters": [
          {
            "description": "Timestamp, shared with other party (milliseconds since the UNIX epoch)",
            "in": "query",
            "name": "timestamp",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "description": "Nonce, shared with other party",
            "in": "query",
            "name": "nonce",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/nonce"
            }
          },
          {
            "description": "Describes if user wants to be maker or taker of trades",
            "in": "query",
            "name": "role",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/role"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetrejectBlockTrade200response"
          }
        },
        "description": "Used to reject a pending block trade. `nonce` and `timestamp` are used to identify the block trade while `role` should be opposite to the trading counterparty.<br><br> To use a block trade approval feature the additional API key setting feature called: `enabled_features: block_trade_approval` is required. This key has to be given to broker/registered partner who performs the trades on behalf of the user for the feature to be active. If the user wants to approve the trade, he has to approve it from different API key with doesn't have this feature enabled.",
        "tags": [
          "Block Trade",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/reject_block_trade",
                    "params": {
                      "timestamp": 1711468813551,
                      "nonce": "bt-468nha",
                      "role": "maker"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/reject_block_trade",
            "og:title": "private/reject_block_trade"
          }
        }
      }
    },
    "/private/get_broker_trades": {
      "get": {
        "parameters": [
          {
            "description": "The currency symbol",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `20`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "start_id",
            "description": "Response will contain block trades older than the one provided in this field",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/block_trade_id"
            }
          },
          {
            "name": "end_id",
            "description": "The id of the oldest block trade to be returned, `start_id` is required with `end_id`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/block_trade_id"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetBrokerTradesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "history": [
                          {
                            "id": "BLOCK-7",
                            "timestamp": 1747239767111,
                            "trades": [
                              {
                                "timestamp": 1747239767111,
                                "amount": 100000,
                                "direction": "buy",
                                "price": 102079.75,
                                "index_price": 102079.75,
                                "instrument_name": "BTC-PERPETUAL",
                                "trade_seq": 7,
                                "mark_price": 102079.75,
                                "tick_direction": 1,
                                "contracts": 10000,
                                "trade_id": "7",
                                "block_trade_id": "BLOCK-7",
                                "block_trade_leg_count": 1
                              }
                            ],
                            "maker": {
                              "user_id": "****009",
                              "client_id": 2,
                              "client_name": "Test Client 2",
                              "client_link_name": "Test Client 2 l",
                              "client_link_id": 2
                            },
                            "taker": {
                              "user_id": "****008",
                              "client_id": 1,
                              "client_name": "Test Client 1",
                              "client_link_name": "Test Client 1 l",
                              "client_link_id": 1
                            }
                          }
                        ],
                        "next_start_id": 6
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Broker Method** Returns list of broker block trades. If currency is not provided, returns broker block trades for all currencies.",
        "tags": [
          "Block Trade",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_broker_trades",
                    "params": {
                      "currency": "BTC",
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_broker_trades",
            "og:title": "private/get_broker_trades"
          }
        }
      }
    },
    "/private/get_broker_trade_requests": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetBrokerTradeRequestsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7,
                      "result": [
                        {
                          "timestamp": 1742824052547,
                          "state": "activated",
                          "trades": [
                            {
                              "amount": 100000,
                              "direction": "buy",
                              "price": 87516.83,
                              "instrument_name": "BTC-PERPETUAL"
                            }
                          ],
                          "maker": {
                            "state": "initial",
                            "client_id": 1,
                            "user_id": "***009",
                            "client_name": "Test Client",
                            "client_link_name": "Test Client 2",
                            "client_link_id": 2
                          },
                          "taker": {
                            "state": "initial",
                            "client_id": 1,
                            "user_id": "***008",
                            "client_name": "Test Client",
                            "client_link_name": "Test Client 1",
                            "client_link_id": 1
                          },
                          "nonce": "3WqPoAsmde9aXCSEBVUmi2XxGkgA"
                        },
                        {
                          "timestamp": 1742824052538,
                          "state": "activated",
                          "trades": [
                            {
                              "amount": 100000,
                              "direction": "buy",
                              "price": 87516.83,
                              "instrument_name": "BTC-PERPETUAL"
                            }
                          ],
                          "maker": {
                            "state": "approved",
                            "client_id": 1,
                            "user_id": "***009",
                            "client_name": "Test Client",
                            "client_link_name": "Test Client 2",
                            "client_link_id": 2
                          },
                          "taker": {
                            "state": "initial",
                            "client_id": 1,
                            "user_id": "***008",
                            "client_name": "Test Client",
                            "client_link_name": "Test Client 1",
                            "client_link_id": 1
                          },
                          "nonce": "29rKkuD3NSBPet4njrpNWEuHBm9s"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "**Broker Method** Provides a list of broker block trade requests including pending approvals, declined trades, and expired trades. `timestamp` and `nonce` received in response can be used to approve or reject the pending broker block trade.",
        "tags": [
          "Block Trade",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7,
                    "method": "private/get_broker_trade_requests",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_broker_trade_requests",
            "og:title": "private/get_broker_trade_requests"
          }
        }
      }
    },
    "/public/get_combos": {
      "get": {
        "description": "Retrieves information about active combos",
        "tags": [
          "Combo Books",
          "Public"
        ],
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol or `\"any\"` for all",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency_with_any"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetCombosResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2,
                      "result": [
                        {
                          "state_timestamp": 1650636265101,
                          "state": "active",
                          "legs": [
                            {
                              "instrument_name": "BTC-29APR22-39300-C",
                              "amount": 1
                            },
                            {
                              "instrument_name": "BTC-29APR22-39600-C",
                              "amount": -1
                            }
                          ],
                          "id": "BTC-CS-29APR22-39300_39600",
                          "instrument_id": 28,
                          "creation_timestamp": 1650636235000
                        },
                        {
                          "state_timestamp": 1650620605150,
                          "state": "active",
                          "legs": [
                            {
                              "instrument_name": "BTC-PERPETUAL",
                              "amount": -1
                            },
                            {
                              "instrument_name": "BTC-29APR22",
                              "amount": 1
                            }
                          ],
                          "id": "BTC-FS-29APR22_PERP",
                          "instrument_id": 27,
                          "creation_timestamp": 1650620575000
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2,
                    "method": "public/get_combos",
                    "params": {
                      "currency": "BTC"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_combos",
            "og:title": "public/get_combos"
          }
        }
      }
    },
    "/public/get_combo_ids": {
      "get": {
        "description": "Retrieves available combos. This method can be used to get the list of all combos, or only the list of combos in the given state.",
        "tags": [
          "Combo Books",
          "Public"
        ],
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "state",
            "description": "Combo state, if not provided combos of all states are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/combo_state"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetComboIdsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": [
                        "BTC-CS-29APR22-39300_39600",
                        "BTC-FS-29APR22_PERP"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "public/get_combo_ids",
                    "params": {
                      "currency": "BTC",
                      "state": "active"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_combo_ids",
            "og:title": "public/get_combo_ids"
          }
        }
      }
    },
    "/public/get_combo_details": {
      "get": {
        "description": "Retrieves information about a combo",
        "tags": [
          "Combo Books",
          "Public"
        ],
        "parameters": [
          {
            "name": "combo_id",
            "description": "Combo ID",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/combo_id"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetComboDetailsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3,
                      "result": {
                        "state_timestamp": 1650620605150,
                        "state": "active",
                        "legs": [
                          {
                            "instrument_name": "BTC-PERPETUAL",
                            "amount": -1
                          },
                          {
                            "instrument_name": "BTC-29APR22",
                            "amount": 1
                          }
                        ],
                        "id": "BTC-FS-29APR22_PERP",
                        "instrument_id": 27,
                        "creation_timestamp": 1650620575000
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3,
                    "method": "public/get_combo_details",
                    "params": {
                      "combo_id": "BTC-FS-29APR22_PERP"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_combo_details",
            "og:title": "public/get_combo_details"
          }
        }
      }
    },
    "/private/create_combo": {
      "get": {
        "parameters": [
          {
            "description": "List of trades used to create a combo",
            "in": "query",
            "name": "trades",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 3 properties"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateCreateComboResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 6,
                      "result": {
                        "state_timestamp": 1650960943922,
                        "state": "active",
                        "legs": [
                          {
                            "instrument_name": "BTC-29APR22-37500-C",
                            "amount": 1
                          },
                          {
                            "instrument_name": "BTC-29APR22-37500-P",
                            "amount": -1
                          }
                        ],
                        "id": "BTC-REV-29APR22-37500",
                        "instrument_id": 52,
                        "creation_timestamp": 1650960943000
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Verifies and creates a combo book or returns an existing combo matching given trades",
        "tags": [
          "Combo Books",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 6,
                    "method": "private/create_combo",
                    "params": {
                      "trades": [
                        {
                          "instrument_name": "BTC-29APR22-37500-C",
                          "amount": "1",
                          "direction": "buy"
                        },
                        {
                          "instrument_name": "BTC-29APR22-37500-P",
                          "amount": "1",
                          "direction": "sell"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/create_combo",
            "og:title": "private/create_combo"
          }
        }
      }
    },
    "/private/get_leg_prices": {
      "get": {
        "parameters": [
          {
            "description": "List of legs for which the prices will be calculated",
            "in": "query",
            "name": "legs",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 3 properties"
              }
            }
          },
          {
            "name": "price",
            "description": "Price for the whole leg structure",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetLegPricesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "legs": [
                          {
                            "ratio": 1,
                            "instrument_name": "BTC-1NOV24-67000-C",
                            "price": 0.6001,
                            "direction": "buy"
                          },
                          {
                            "ratio": 1,
                            "instrument_name": "BTC-1NOV24-66000-C",
                            "price": 0.0001,
                            "direction": "sell"
                          }
                        ],
                        "amount": 2
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This method returns individual leg prices for a given combo structure based on an aggregated price of the strategy and the mark prices of the individual legs. Please note that leg prices change dynamically with mark price fluctuations, and the algorithm is calibrated only for conventional option structures and future spreads. This method supports both inverse strategies and known linear structures within a single currency pair.",
        "tags": [
          "Combo Books",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_leg_prices",
                    "params": {
                      "price": 0.6,
                      "legs": [
                        {
                          "instrument_name": "BTC-1NOV24-67000-C",
                          "direction": "buy",
                          "amount": 2
                        },
                        {
                          "instrument_name": "BTC-1NOV24-66000-C",
                          "direction": "sell",
                          "amount": 2
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_leg_prices",
            "og:title": "private/get_leg_prices"
          }
        }
      }
    },
    "/public/get_order_book": {
      "get": {
        "parameters": [
          {
            "description": "The instrument name for which to retrieve the order book, see `public/get_instruments` to obtain instrument names.",
            "in": "query",
            "name": "instrument_name",
            "required": true,
            "schema": {
              "type": "string",
              "example": "BTC-PERPETUAL"
            }
          },
          {
            "description": "The number of entries to return for bids and asks, maximum - `10000`.",
            "in": "query",
            "name": "depth",
            "required": false,
            "schema": {
              "type": "integer",
              "enum": [
                1,
                5,
                10,
                20,
                50,
                100,
                1000,
                10000
              ],
              "example": 5
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetOrderBookResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 8772,
                      "result": {
                        "timestamp": 1550757626706,
                        "stats": {
                          "volume": 93.35589552,
                          "price_change": 0.6913,
                          "low": 3940.75,
                          "high": 3976.25
                        },
                        "state": "open",
                        "settlement_price": 3925.85,
                        "open_interest": 45.27600333464605,
                        "min_price": 3932.22,
                        "max_price": 3971.74,
                        "mark_price": 3931.97,
                        "last_price": 3955.75,
                        "instrument_name": "BTC-PERPETUAL",
                        "index_price": 3910.46,
                        "funding_8h": 0.00455263,
                        "current_funding": 0.00500063,
                        "change_id": 474988,
                        "bids": [
                          [
                            3955.75,
                            30.0
                          ],
                          [
                            3940.75,
                            102020.0
                          ],
                          [
                            3423.0,
                            42840.0
                          ]
                        ],
                        "best_bid_price": 3955.75,
                        "best_bid_amount": 30.0,
                        "best_ask_price": 0.0,
                        "best_ask_amount": 0.0,
                        "asks": []
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the order book, along with other market values for a given instrument.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8772,
                    "method": "public/get_order_book",
                    "params": {
                      "instrument_name": "BTC-PERPETUAL",
                      "depth": 5
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_order_book",
            "og:title": "public/get_order_book"
          }
        }
      }
    },
    "/public/get_order_book_by_instrument_id": {
      "get": {
        "parameters": [
          {
            "description": "The instrument ID for which to retrieve the order book, see `public/get_instruments` to obtain instrument IDs.",
            "in": "query",
            "name": "instrument_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The number of entries to return for bids and asks, maximum - `10000`.",
            "in": "query",
            "name": "depth",
            "required": false,
            "schema": {
              "type": "integer",
              "enum": [
                1,
                5,
                10,
                20,
                50,
                100,
                1000,
                10000
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetOrderBookByInstrumentId200response"
          }
        },
        "description": "Retrieves the order book, along with other market values for a given instrument ID.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "x-mint": {
          "metadata": {
            "title": "public/get_order_book_by_instrument_id",
            "og:title": "public/get_order_book_by_instrument_id"
          }
        }
      }
    },
    "/public/get_last_settlements_by_currency": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "description": "Settlement type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/settlement_type"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `20`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "continuation",
            "description": "Continuation token for pagination",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
            }
          },
          {
            "description": "The latest timestamp to return result from (milliseconds since the UNIX epoch)",
            "in": "query",
            "name": "search_start_timestamp",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetLastSettlementsByCurrency200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 4497,
                      "result": {
                        "settlements": [
                          {
                            "type": "delivery",
                            "timestamp": 1550242800013,
                            "session_profit_loss": 4.703907906,
                            "profit_loss": -0.427669766,
                            "position": 64,
                            "mark_price": 0.121679828,
                            "instrument_name": "BTC-15FEB19-4000-P",
                            "index_price": 3566.08
                          },
                          {
                            "type": "delivery",
                            "timestamp": 1550242800013,
                            "session_profit_loss": 3.135938604,
                            "profit_loss": -2.539278115,
                            "position": 206,
                            "mark_price": 0,
                            "instrument_name": "BTC-15FEB19-4000-C",
                            "index_price": 3566.08
                          }
                        ],
                        "continuation": "29XjjMM7Zc6U4oytmV27f7a6YRb5aSdVijwfuYhHRTLphugjRf1edP8uGLo3w2mWKV23QgrxsmenRGqzucc7"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves historical settlement, delivery and bankruptcy events coming from all instruments within a given currency.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 4497,
                    "method": "public/get_last_settlements_by_currency",
                    "params": {
                      "currency": "BTC",
                      "type": "delivery",
                      "count": 2
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_last_settlements_by_currency",
            "og:title": "public/get_last_settlements_by_currency"
          }
        }
      }
    },
    "/public/get_book_summary_by_currency": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, if not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetBookSummaryByCurrency200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9344,
                      "result": [
                        {
                          "volume_usd": 0,
                          "volume": 0,
                          "quote_currency": "USD",
                          "price_change": -11.1896349,
                          "open_interest": 0,
                          "mid_price": null,
                          "mark_price": 3579.73,
                          "mark_iv": 80,
                          "low": null,
                          "last": null,
                          "instrument_name": "BTC-22FEB19",
                          "high": null,
                          "estimated_delivery_price": 3579.73,
                          "creation_timestamp": 1550230036440,
                          "bid_price": null,
                          "base_currency": "BTC",
                          "ask_price": null
                        },
                        {
                          "volume_usd": 22440,
                          "volume": 6.24,
                          "quote_currency": "USD",
                          "price_change": -60.8183509,
                          "open_interest": 183180,
                          "mid_price": null,
                          "mark_price": 3579.73,
                          "mark_iv": 80,
                          "low": 3591,
                          "last": 3595,
                          "instrument_name": "BTC-PERPETUAL",
                          "high": 3595,
                          "funding_8h": 0.0002574,
                          "estimated_delivery_price": 3579.73,
                          "current_funding": 0,
                          "creation_timestamp": 1550230036440,
                          "bid_price": null,
                          "base_currency": "BTC",
                          "ask_price": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the summary information such as open interest, 24h volume, etc. for all instruments for the currency (optionally filtered by kind). **Note** - For real-time updates, we recommend using the WebSocket subscription to `ticker.{instrument_name}.{interval}` instead of polling this endpoint.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9344,
                    "method": "public/get_book_summary_by_currency",
                    "params": {
                      "currency": "BTC",
                      "kind": "future"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_book_summary_by_currency",
            "og:title": "public/get_book_summary_by_currency"
          }
        }
      }
    },
    "/public/get_book_summary_by_instrument": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetBookSummaryByInstrument200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3659,
                      "result": [
                        {
                          "volume": 0.55,
                          "underlying_price": 121.38,
                          "underlying_index": "index_price",
                          "quote_currency": "USD",
                          "price_change": -26.7793594,
                          "open_interest": 0.55,
                          "mid_price": 0.2444,
                          "mark_price": 80,
                          "low": 0.34,
                          "last": 0.34,
                          "interest_rate": 0.207,
                          "instrument_name": "ETH-22FEB19-140-P",
                          "high": 0.34,
                          "creation_timestamp": 1550227952163,
                          "bid_price": 0.1488,
                          "base_currency": "ETH",
                          "ask_price": 0.34
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the summary information such as open interest, 24h volume, etc. for a specific instrument.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3659,
                    "method": "public/get_book_summary_by_instrument",
                    "params": {
                      "instrument_name": "ETH-22FEB19-140-P"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_book_summary_by_instrument",
            "og:title": "public/get_book_summary_by_instrument"
          }
        }
      }
    },
    "/public/get_last_settlements_by_instrument": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "description": "Settlement type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/settlement_type"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `20`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "continuation",
            "description": "Continuation token for pagination",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
            }
          },
          {
            "description": "The latest timestamp to return result from (milliseconds since the UNIX epoch)",
            "in": "query",
            "name": "search_start_timestamp",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetLastSettlementsByInstrument200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 5482,
                      "result": {
                        "settlements": [
                          {
                            "type": "settlement",
                            "timestamp": 1550502000023,
                            "session_profit_loss": 0.116509752,
                            "profit_loss": -9.999999999886402e-10,
                            "position": 240,
                            "mark_price": 3578.16,
                            "instrument_name": "BTC-22FEB19",
                            "index_price": 3796.43
                          }
                        ],
                        "continuation": "2Z7mdtavzYvfuyYcHkJXvPTr9ZSMsEzM3sLCH7AbYEDd1AzTXY2hnhegQDiaP1TtU4b5iSJZ4"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves historical public settlement, delivery and bankruptcy events filtered by instrument name.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 5482,
                    "method": "public/get_last_settlements_by_instrument",
                    "params": {
                      "instrument_name": "BTC-22FEB19",
                      "type": "settlement",
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_last_settlements_by_instrument",
            "og:title": "public/get_last_settlements_by_instrument"
          }
        }
      }
    },
    "/public/get_contract_size": {
      "get": {
        "description": "Retrieves contract size of provided instrument.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetContractSizeResponse"
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_contract_size",
            "og:title": "public/get_contract_size"
          }
        }
      }
    },
    "/public/get_trade_volumes": {
      "get": {
        "parameters": [
          {
            "name": "extended",
            "description": "Request for extended statistics. Including also 7 and 30 days volumes (default false)",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetTradeVolumes200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 6387,
                      "result": [
                        {
                          "puts_volume": 48,
                          "futures_volume": 6.25578452,
                          "currency": "BTC",
                          "calls_volume": 145,
                          "spot_volume": 11.1
                        },
                        {
                          "puts_volume": 122.65,
                          "futures_volume": 374.392173,
                          "currency": "ETH",
                          "calls_volume": 37.4,
                          "spot_volume": 57.7
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves aggregated 24h trade volumes for different instrument types and currencies.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "x-mint": {
          "metadata": {
            "title": "public/get_trade_volumes",
            "og:title": "public/get_trade_volumes"
          }
        }
      }
    },
    "/public/get_index_price": {
      "get": {
        "parameters": [
          {
            "name": "index_name",
            "required": true,
            "in": "query",
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "schema": {
              "$ref": "#/components/schemas/index_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetIndexPriceResponse"
          }
        },
        "description": "Retrieves the current index price value for given index name.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "x-mint": {
          "metadata": {
            "title": "public/get_index_price",
            "og:title": "public/get_index_price"
          }
        }
      }
    },
    "/public/get_index_price_names": {
      "get": {
        "description": "Retrieves the identifiers of all supported Price Indexes",
        "tags": [
          "Market Data",
          "Public"
        ],
        "parameters": [
          {
            "name": "extended",
            "description": "When set to `true`, returns additional information including `future_combo_creation_enabled` and `option_combo_creation_enabled` for each index",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetIndexPriceNamesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7617,
                      "result": [
                        {
                          "name": "btc_usd",
                          "future_combo_creation_enabled": true,
                          "option_combo_creation_enabled": true
                        },
                        {
                          "name": "bnb_usd"
                        },
                        {
                          "name": "buidl_usd"
                        },
                        {
                          "name": "usdc_usdt",
                          "future_combo_creation_enabled": true,
                          "option_combo_creation_enabled": true
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "public/get_index_price_names",
                    "params": {
                      "extended": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_index_price_names",
            "og:title": "public/get_index_price_names"
          }
        }
      }
    },
    "/public/get_supported_index_names": {
      "get": {
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Type of a cryptocurrency price index",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "spot",
                "derivative"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetSupportedIndexNames200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 25718,
                      "result": [
                        "btc_eth",
                        "btc_usdc",
                        "eth_usdc"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the identifiers of all supported Price Indexes",
        "tags": [
          "Market Data",
          "Public"
        ],
        "x-mint": {
          "metadata": {
            "title": "public/get_supported_index_names",
            "og:title": "public/get_supported_index_names"
          }
        }
      }
    },
    "/public/get_instruments": {
      "get": {
        "description": "Retrieves available trading instruments. This method can be used to see which instruments are available for trading, or which instruments have recently expired. **Note - This endpoint has distinct API rate limiting requirements:** 1 request per 10 seconds, with a burst of 5. To avoid rate limits, we recommend using either the REST requests for server-cached data or the WebSocket subscription to [instrument_state.{kind}.{currency}](https://docs.deribit.com/#instrument-state-kind-currency) for real-time updates. For more information, see [Rate Limits](https://support.deribit.com/hc/en-us/articles/25944617523357-Rate-Limits).",
        "tags": [
          "Market Data",
          "Public"
        ],
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol or `\"any\"` for all",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency_with_any"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, if not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind"
            }
          },
          {
            "name": "expired",
            "description": "Set to true to show recently expired instruments instead of active ones.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetInstrumentsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": [
                        {
                          "tick_size": 2.5,
                          "tick_size_steps": [],
                          "taker_commission": 0.0005,
                          "settlement_period": "month",
                          "settlement_currency": "BTC",
                          "quote_currency": "USD",
                          "price_index": "btc_usd",
                          "min_trade_amount": 10,
                          "max_liquidation_commission": 0.0075,
                          "max_leverage": 50,
                          "maker_commission": 0,
                          "kind": "future",
                          "is_active": true,
                          "instrument_name": "BTC-29SEP23",
                          "instrument_id": 138583,
                          "instrument_type": "reversed",
                          "expiration_timestamp": 1695974400000,
                          "creation_timestamp": 1664524802000,
                          "counter_currency": "USD",
                          "contract_size": 10,
                          "block_trade_tick_size": 0.01,
                          "block_trade_min_trade_amount": 200000,
                          "block_trade_commission": 0.00025,
                          "base_currency": "BTC"
                        },
                        {
                          "tick_size": 0.5,
                          "tick_size_steps": [],
                          "taker_commission": 0.0005,
                          "settlement_period": "perpetual",
                          "settlement_currency": "BTC",
                          "quote_currency": "USD",
                          "price_index": "btc_usd",
                          "min_trade_amount": 10,
                          "max_liquidation_commission": 0.0075,
                          "max_leverage": 50,
                          "maker_commission": 0,
                          "kind": "future",
                          "is_active": true,
                          "instrument_name": "BTC-PERPETUAL",
                          "instrument_id": 124972,
                          "instrument_type": "reversed",
                          "expiration_timestamp": 32503708800000,
                          "creation_timestamp": 1534167754000,
                          "counter_currency": "USD",
                          "contract_size": 10,
                          "block_trade_tick_size": 0.01,
                          "block_trade_min_trade_amount": 200000,
                          "block_trade_commission": 0.00025,
                          "base_currency": "BTC"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "public/get_instruments",
                    "params": {
                      "currency": "BTC",
                      "kind": "future"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_instruments",
            "og:title": "public/get_instruments"
          }
        }
      }
    },
    "/public/get_instrument": {
      "get": {
        "description": "Retrieves information about instrument",
        "tags": [
          "Market Data",
          "Public"
        ],
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetInstrumentResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2,
                      "result": {
                        "tick_size": 0.0005,
                        "tick_size_steps": [
                          {
                            "above_price": 120,
                            "tick_size": 0.001
                          },
                          {
                            "above_price": 200,
                            "tick_size": 0.003
                          }
                        ],
                        "taker_commission": 0.0003,
                        "strike": 16000,
                        "settlement_period": "week",
                        "settlement_currency": "BTC",
                        "quote_currency": "BTC",
                        "price_index": "btc_usd",
                        "option_type": "put",
                        "min_trade_amount": 0.1,
                        "maker_commission": 0.0003,
                        "kind": "option",
                        "is_active": true,
                        "instrument_name": "BTC-13JAN23-16000-P",
                        "instrument_id": 144613,
                        "expiration_timestamp": 1673596800000,
                        "creation_timestamp": 1671696002000,
                        "counter_currency": "USD",
                        "contract_size": 1,
                        "block_trade_tick_size": 0.0001,
                        "block_trade_min_trade_amount": 25,
                        "block_trade_commission": 0.00015,
                        "base_currency": "BTC"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2,
                    "method": "public/get_instrument",
                    "params": {
                      "instrument_name": "BTC-13JAN23-16000-P"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_instrument",
            "og:title": "public/get_instrument"
          }
        }
      }
    },
    "/public/get_historical_volatility": {
      "get": {
        "description": "Provides information about historical volatility for given cryptocurrency.",
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          }
        ],
        "tags": [
          "Market Data",
          "Public"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetHistoricalVolatilityResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 8387,
                      "result": [
                        [
                          1549720800000,
                          14.747743607344217
                        ],
                        [
                          1549720800000,
                          14.747743607344217
                        ],
                        [
                          1549724400000,
                          14.74257778551467
                        ],
                        [
                          1549728000000,
                          14.73502799931767
                        ],
                        [
                          1549731600000,
                          14.73502799931767
                        ],
                        [
                          1549735200000,
                          14.73502799931767
                        ],
                        [
                          1550228400000,
                          46.371891307340015
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8387,
                    "method": "public/get_historical_volatility",
                    "params": {
                      "currency": "BTC"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_historical_volatility",
            "og:title": "public/get_historical_volatility"
          }
        }
      }
    },
    "/public/get_funding_rate_history": {
      "get": {
        "description": "Retrieves hourly historical interest rate for requested PERPETUAL instrument.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetFundingRateHistoryResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7617,
                      "result": [
                        {
                          "timestamp": 1569891600000,
                          "index_price": 8222.87,
                          "prev_index_price": 8305.72,
                          "interest_8h": -9.234260068476106e-05,
                          "interest_1h": -4.739622041017375e-07
                        },
                        {
                          "timestamp": 1569895200000,
                          "index_price": 8286.49,
                          "prev_index_price": 8222.87,
                          "interest_8h": -6.720918180255509e-05,
                          "interest_1h": -2.8583510923267753e-07
                        },
                        {
                          "timestamp": 1569898800000,
                          "index_price": 8431.97,
                          "prev_index_price": 8286.49,
                          "interest_8h": -3.544496169694662e-05,
                          "interest_1h": -3.815906848177951e-06
                        },
                        {
                          "timestamp": 1569902400000,
                          "index_price": 8422.36,
                          "prev_index_price": 8431.97,
                          "interest_8h": -1.404147515584998e-05,
                          "interest_1h": 8.312033064379086e-07
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7617,
                    "method": "public/get_funding_rate_history",
                    "params": {
                      "instrument_name": "BTC-PERPETUAL",
                      "start_timestamp": 1569888000000,
                      "end_timestamp": 1569902400000
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_funding_rate_history",
            "og:title": "public/get_funding_rate_history"
          }
        }
      }
    },
    "/public/get_funding_rate_value": {
      "get": {
        "description": "Retrieves interest rate value for requested period. Applicable only for PERPETUAL instruments.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetFundingRateValueResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7617,
                      "result": -0.00025056853702101664
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7617,
                    "method": "public/get_funding_rate_value",
                    "params": {
                      "instrument_name": "BTC-PERPETUAL",
                      "start_timestamp": 1569888000000,
                      "end_timestamp": 1569974400000
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_funding_rate_value",
            "og:title": "public/get_funding_rate_value"
          }
        }
      }
    },
    "/public/get_mark_price_history": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetMarkPriceHistoryResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 25,
                      "result": [
                        [
                          1608142381229,
                          0.5165791606037885
                        ],
                        [
                          1608142380231,
                          0.5165737855432504
                        ],
                        [
                          1608142379227,
                          0.5165768236356326
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Public request for 5min history of markprice values for the instrument. For now the markprice history is available only for a subset of options which take part in the volatility index calculations. All other instruments, futures and perpetuals will return an empty list.",
        "tags": [
          "Market Data",
          "Mark Price",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "public/get_mark_price_history",
                    "params": {
                      "instrument_name": "BTC-25JUN21-50000-C",
                      "start_timestamp": 1609376800000,
                      "end_timestamp": 1609376810000
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_mark_price_history",
            "og:title": "public/get_mark_price_history"
          }
        }
      }
    },
    "/public/get_expirations": {
      "get": {
        "description": "Retrieves expirations for instruments. This method can be used to see instruments's expirations.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol or `\"any\"` for all or '\"grouped\"' for all grouped by currency",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/settlement_currency_with_any_and_grouped"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, `\"future\"` or `\"option\"` or `\"any\"`",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind_future_or_option_with_any"
            }
          },
          {
            "name": "currency_pair",
            "description": "The currency pair symbol",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/index_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetExpirationsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "result": {
                        "future": [
                          "21SEP24",
                          "22SEP24",
                          "PERPETUAL"
                        ],
                        "option": [
                          "21SEP24",
                          "22SEP24",
                          "23SEP24"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "public/get_expirations",
                    "params": {
                      "currency": "any",
                      "kind": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_expirations",
            "og:title": "public/get_expirations"
          }
        }
      }
    },
    "/public/get_apr_history": {
      "get": {
        "description": "Retrieves historical APR data for specified currency. Only applicable to yield-generating tokens (`USDE`, `STETH`, `USDC`, `BUILD`). **📖 Related Support Article:** [Yield reward-bearing coins](https://support.deribit.com/hc/en-us/articles/26525792475677-Yield-reward-bearing-coins)",
        "tags": [
          "Market Data",
          "Public"
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "usde",
                "steth",
                "usdc",
                "build"
              ],
              "example": "steth"
            },
            "description": "Currency for which to retrieve APR history"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 5
            },
            "description": "Number of days to retrieve (default `365`, maximum `365`)"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Used to receive APR history before given epoch day"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetAprHistoryResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "data": [
                          {
                            "day": 20200,
                            "apr": 2.814
                          },
                          {
                            "day": 20199,
                            "apr": 2.749
                          },
                          {
                            "day": 20198,
                            "apr": 2.684
                          },
                          {
                            "day": 20197,
                            "apr": 2.667
                          },
                          {
                            "day": 20196,
                            "apr": 2.722
                          }
                        ],
                        "continuation": 20196
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "public/get_apr_history",
                    "params": {
                      "currency": "steth",
                      "limit": 5
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_apr_history",
            "og:title": "public/get_apr_history"
          }
        }
      }
    },
    "/public/get_last_trades_by_instrument": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "start_seq",
            "description": "The sequence number of the first trade to be returned",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_seq",
            "description": "The sequence number of the last trade to be returned",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "sorting",
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/sorting"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetLastTradesByInstrument200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9267,
                      "result": {
                        "trades": [
                          {
                            "trade_seq": 36798,
                            "trade_id": "277976",
                            "timestamp": 1590476708320,
                            "tick_direction": 2,
                            "price": 8767.08,
                            "mark_price": 8829.7,
                            "instrument_name": "BTC-PERPETUAL",
                            "index_price": 8878.53,
                            "direction": "sell",
                            "amount": 100
                          }
                        ],
                        "has_more": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest trades that have occurred for a specific instrument.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9267,
                    "method": "public/get_last_trades_by_instrument",
                    "params": {
                      "instrument_name": "BTC-PERPETUAL",
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_last_trades_by_instrument",
            "og:title": "public/get_last_trades_by_instrument"
          }
        }
      }
    },
    "/public/get_last_trades_by_instrument_and_time": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "sorting",
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/sorting"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetLastTradesByInstrumentAndTime200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3983,
                      "result": {
                        "trades": [
                          {
                            "trade_seq": 1966031,
                            "trade_id": "ETH-2696055",
                            "timestamp": 1590479408216,
                            "tick_direction": 0,
                            "price": 203.6,
                            "mark_price": 203.41,
                            "instrument_name": "ETH-PERPETUAL",
                            "index_price": 203.45,
                            "direction": "buy",
                            "amount": 10
                          }
                        ],
                        "has_more": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest trades that have occurred for a specific instrument and within a given time range.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3983,
                    "method": "public/get_last_trades_by_instrument_and_time",
                    "params": {
                      "instrument_name": "ETH-PERPETUAL",
                      "end_timestamp": 1590480022768,
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_last_trades_by_instrument_and_time",
            "og:title": "public/get_last_trades_by_instrument_and_time"
          }
        }
      }
    },
    "/public/get_last_trades_by_currency": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind_with_combo_all"
            }
          },
          {
            "name": "start_id",
            "description": "The ID of the first trade to be returned. Number for BTC trades, or hyphen name in ex. `\"ETH-15\"` # `\"ETH_USDC-16\"`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/trade_id"
            }
          },
          {
            "name": "end_id",
            "description": "The ID of the last trade to be returned. Number for BTC trades, or hyphen name in ex. `\"ETH-15\"` # `\"ETH_USDC-16\"`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/trade_id"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "sorting",
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/sorting"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetLastTradesByCurrency200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9290,
                      "result": {
                        "trades": [
                          {
                            "trade_seq": 36798,
                            "trade_id": "277976",
                            "timestamp": 1590476708320,
                            "tick_direction": 2,
                            "price": 8767.08,
                            "mark_price": 8829.7,
                            "instrument_name": "BTC-PERPETUAL",
                            "index_price": 8878.53,
                            "direction": "sell",
                            "amount": 100
                          }
                        ],
                        "has_more": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest trades that have occurred for instruments in a specific currency symbol.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9290,
                    "method": "public/get_last_trades_by_currency",
                    "params": {
                      "currency": "BTC",
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_last_trades_by_currency",
            "og:title": "public/get_last_trades_by_currency"
          }
        }
      }
    },
    "/public/get_last_trades_by_currency_and_time": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind_with_combo_all"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "sorting",
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/sorting"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetLastTradesByCurrencyAndTime200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1469,
                      "result": {
                        "trades": [
                          {
                            "trade_seq": 3471,
                            "trade_id": "48077291",
                            "timestamp": 1590470616101,
                            "tick_direction": 2,
                            "price": 0.032,
                            "mark_price": 0.04070324,
                            "iv": 74.74,
                            "instrument_name": "BTC-25SEP20-6000-P",
                            "index_price": 8899.93,
                            "direction": "sell",
                            "amount": 0.5
                          }
                        ],
                        "has_more": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest trades that have occurred for instruments in a specific currency symbol and within a given time range.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1469,
                    "method": "public/get_last_trades_by_currency_and_time",
                    "params": {
                      "currency": "BTC",
                      "start_timestamp": 1590470022768,
                      "end_timestamp": 1590480022768,
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_last_trades_by_currency_and_time",
            "og:title": "public/get_last_trades_by_currency_and_time"
          }
        }
      }
    },
    "/public/get_currencies": {
      "get": {
        "description": "Retrieves all cryptocurrencies supported by the API.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetCurrenciesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7538,
                      "result": [
                        {
                          "coin_type": "ETHER",
                          "currency": "ETH",
                          "currency_long": "Ethereum",
                          "min_confirmations": 1,
                          "min_withdrawal_fee": 0.0001,
                          "withdrawal_fee": 0.0006,
                          "withdrawal_priorities": [],
                          "network_currency": "ETH",
                          "network_fee": 0.0006,
                          "decimals": 6
                        },
                        {
                          "coin_type": "BITCOIN",
                          "currency": "BTC",
                          "currency_long": "Bitcoin",
                          "min_confirmations": 1,
                          "min_withdrawal_fee": 0.0001,
                          "withdrawal_fee": 0.0001,
                          "withdrawal_priorities": [
                            {
                              "value": 0.15,
                              "name": "very_low"
                            },
                            {
                              "value": 1.5,
                              "name": "very_high"
                            }
                          ],
                          "network_currency": "BTC",
                          "network_fee": 0.0001,
                          "decimals": 8
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7538,
                    "method": "public/get_currencies",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_currencies",
            "og:title": "public/get_currencies"
          }
        }
      }
    },
    "/public/get_funding_chart_data": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "length",
            "description": "Specifies time period. `8h` - 8 hours, `24h` - 24 hours, `1m` - 1 month",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "8h",
                "24h",
                "1m"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetFundingChartDataResponse"
          }
        },
        "description": "Retrieve the list of the latest PERPETUAL funding chart points within a given time period.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "x-mint": {
          "metadata": {
            "title": "public/get_funding_chart_data",
            "og:title": "public/get_funding_chart_data"
          }
        }
      }
    },
    "/public/get_tradingview_chart_data": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "resolution",
            "description": "Chart bars resolution given in full minutes or keyword `1D` (only some specific resolutions are supported)",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                1,
                3,
                5,
                10,
                15,
                30,
                60,
                120,
                180,
                360,
                720,
                "1D"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetTradingviewChartDataResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 833,
                      "result": {
                        "volume": [
                          19.007942601,
                          20.095877981
                        ],
                        "cost": [
                          19000.0,
                          23400.0
                        ],
                        "ticks": [
                          1554373800000,
                          1554375600000
                        ],
                        "status": "ok",
                        "open": [
                          4963.42,
                          4986.29
                        ],
                        "low": [
                          4728.94,
                          4726.6
                        ],
                        "high": [
                          5185.45,
                          5250.87
                        ],
                        "close": [
                          5052.95,
                          5013.59
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Publicly available market data used to generate a TradingView candle chart.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 833,
                    "method": "public/get_tradingview_chart_data",
                    "params": {
                      "instrument_name": "BTC-5APR19",
                      "start_timestamp": 1554373800000,
                      "end_timestamp": 1554376800000,
                      "resolution": "30"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_tradingview_chart_data",
            "og:title": "public/get_tradingview_chart_data"
          }
        }
      }
    },
    "/public/get_volatility_index_data": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch)",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "resolution",
            "description": "Time resolution given in full seconds or keyword `1D` (only some specific resolutions are supported)",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                1,
                60,
                3600,
                43200,
                "1D"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetVolatilityIndexDataResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 5,
                      "result": {
                        "data": [
                          [
                            1598019300000,
                            0.210084879,
                            0.212860821,
                            0.210084879,
                            0.212860821
                          ],
                          [
                            1598019360000,
                            0.212869011,
                            0.212987527,
                            0.212869011,
                            0.212987527
                          ],
                          [
                            1598019420000,
                            0.212987723,
                            0.212992597,
                            0.212987723,
                            0.212992597
                          ]
                        ],
                        "continuation": null
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Public market data request for volatility index candles.",
        "tags": [
          "Market Data",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 833,
                    "method": "public/get_volatility_index_data",
                    "params": {
                      "currency": "BTC",
                      "start_timestamp": 1599373800000,
                      "end_timestamp": 1599376800000,
                      "resolution": "60"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_volatility_index_data",
            "og:title": "public/get_volatility_index_data"
          }
        }
      }
    },
    "/public/ticker": {
      "get": {
        "tags": [
          "Market Data",
          "Public"
        ],
        "description": "Get ticker for an instrument.",
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicTickerResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 8106,
                      "result": {
                        "best_ask_amount": 53040,
                        "best_ask_price": 36290,
                        "best_bid_amount": 4600,
                        "best_bid_price": 36289.5,
                        "current_funding": 0,
                        "estimated_delivery_price": 36297.02,
                        "funding_8h": 2.203e-05,
                        "index_price": 36297.02,
                        "instrument_name": "BTC-PERPETUAL",
                        "interest_value": 1.7362511643080387,
                        "last_price": 36289.5,
                        "mark_price": 36288.31,
                        "max_price": 36833.4,
                        "min_price": 35744.73,
                        "open_interest": 502231260,
                        "settlement_price": 36169.49,
                        "state": "open",
                        "stats": {
                          "high": 36824.5,
                          "low": 35213.5,
                          "price_change": 0.2362,
                          "volume": 7831.26548117,
                          "volume_usd": 282615600
                        },
                        "timestamp": 1623059681955
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8106,
                    "method": "public/ticker",
                    "params": {
                      "instrument_name": "BTC-PERPETUAL"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/ticker",
            "og:title": "public/ticker"
          }
        }
      }
    },
    "/public/get_delivery_prices": {
      "get": {
        "parameters": [
          {
            "name": "index_name",
            "required": true,
            "in": "query",
            "description": "Index identifier, matches (base) cryptocurrency with quote currency",
            "schema": {
              "$ref": "#/components/schemas/index_name"
            }
          },
          {
            "name": "offset",
            "description": "The offset for pagination, default - `0`",
            "in": "query",
            "required": false,
            "schema": {
              "example": 10,
              "type": "integer"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          }
        ],
        "description": "Retrieves delivery prices for then given index",
        "tags": [
          "Market Data"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetDeliveryPricesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3601,
                      "result": {
                        "data": [
                          {
                            "date": "2020-01-02",
                            "delivery_price": 7131.214606410254
                          },
                          {
                            "date": "2019-12-21",
                            "delivery_price": 7150.943217777777
                          },
                          {
                            "date": "2019-12-20",
                            "delivery_price": 7175.988445532345
                          },
                          {
                            "date": "2019-12-19",
                            "delivery_price": 7189.540776143791
                          },
                          {
                            "date": "2019-12-18",
                            "delivery_price": 6698.353743857118
                          }
                        ],
                        "records_total": 58
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3601,
                    "method": "public/get_delivery_prices",
                    "params": {
                      "index_name": "btc_usd",
                      "offset": 0,
                      "count": 5
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_delivery_prices",
            "og:title": "public/get_delivery_prices"
          }
        }
      }
    },
    "/private/get_jwt": {
      "get": {
        "description": "Generate a JSON web token.",
        "tags": [
          "Private"
        ],
        "parameters": [
          {
            "name": "recipient",
            "description": "Recipient of the token",
            "schema": {
              "type": "string",
              "enum": [
                "zendesk"
              ]
            },
            "in": "query",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetJwtResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjQyLCJndWlkIjo0MjQyLCJlbWFpbCI6InRyYWRlckBkZXJpYml0LmNvbSIsImRpc3BsYXlfbmFtZSI6IlRyYWRlciJ9.d-QIJqBr8E1wrG_XIQHD0VPPDP3RJqA0Va8rC2V4VCE"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/PrivateGetJwtResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_jwt",
                    "params": {
                      "recipient": "uservoice"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_jwt",
            "og:title": "private/get_jwt"
          }
        }
      }
    },
    "/public/set_heartbeat": {
      "get": {
        "parameters": [
          {
            "description": "The heartbeat interval in seconds, but not less than 10",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "example": 30,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetsetHeartbeat200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9098,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Signals the Websocket connection to send and request heartbeats. Heartbeats can be used to detect stale connections. When heartbeats have been set up, the API server will send `heartbeat` messages and `test_request` messages. Your software should respond to `test_request` messages by sending a `/api/v2/public/test` request. If your software fails to do so, the API server will immediately close the connection. If your account is configured to cancel on disconnect, any orders opened over the connection will be cancelled.",
        "tags": [
          "Session Management",
          "Public",
          "WebSocket Only"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9098,
                    "method": "public/set_heartbeat",
                    "params": {
                      "interval": 30
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/set_heartbeat",
            "og:title": "public/set_heartbeat"
          }
        }
      }
    },
    "/public/disable_heartbeat": {
      "get": {
        "description": "Stop sending heartbeat messages.",
        "tags": [
          "Session Management",
          "WebSocket Only",
          "Public"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetdisableHeartbeat200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3562,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GetdisableHeartbeat400response"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3562,
                    "method": "public/disable_heartbeat",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/disable_heartbeat",
            "og:title": "public/disable_heartbeat"
          }
        }
      }
    },
    "/private/enable_cancel_on_disconnect": {
      "get": {
        "description": "Enable Cancel On Disconnect for the connection. After enabling, all orders created via this connection will be automatically cancelled when the connection is closed. <br></br>Cancel is triggered in the following cases: when the TCP connection is properly terminated, when the connection is closed due to 10 minutes of inactivity, or when a heartbeat detects a disconnection. To reduce the inactivity timeout, consider using [public/set_heartbeat](https://docs.deribit.com/#public-set_heartbeat).<br></br> **Note**: If the connection is gracefully closed using [private/logout](https://docs.deribit.com/#private-logout), cancel-on-disconnect will **not** be triggered.<br></br> **Notice**: Cancel-on-Disconnect does not affect orders created by other connections - they will remain active! When change is applied on the `account` scope, then every newly opened connection will start with **active** Cancel on Disconnect.",
        "tags": [
          "Session Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "scope",
            "description": "Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - `connection`) **NOTICE:** Scope `connection` can be used only when working via Websocket.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "connection",
                "account"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetenableCancelOnDisconnect200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7859,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GetenableCancelOnDisconnect400response"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7859,
                    "method": "private/enable_cancel_on_disconnect",
                    "params": {
                      "scope": "account"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/enable_cancel_on_disconnect",
            "og:title": "private/enable_cancel_on_disconnect"
          }
        }
      }
    },
    "/private/disable_cancel_on_disconnect": {
      "get": {
        "description": "Disable Cancel On Disconnect for the connection.</br></br> When change is applied for the account, then every newly opened connection will start with **inactive** Cancel on Disconnect.",
        "tags": [
          "Session Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "scope",
            "description": "Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - `connection`) **NOTICE:** Scope `connection` can be used only when working via Websocket.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "connection",
                "account"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetdisableCancelOnDisconnect200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1569,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/GetdisableCancelOnDisconnect400response"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1569,
                    "method": "private/disable_cancel_on_disconnect",
                    "params": {
                      "scope": "account"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/disable_cancel_on_disconnect",
            "og:title": "private/disable_cancel_on_disconnect"
          }
        }
      }
    },
    "/private/get_cancel_on_disconnect": {
      "get": {
        "description": "Read current Cancel On Disconnect configuration for the account.",
        "tags": [
          "Session Management",
          "Private"
        ],
        "parameters": [
          {
            "name": "scope",
            "description": "Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - `connection`) **NOTICE:** Scope `connection` can be used only when working via Websocket.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "connection",
                "account"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetCancelOnDisconnectResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 220,
                      "result": {
                        "scope": "account",
                        "enabled": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/PrivateGetCancelOnDisconnectResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 220,
                    "method": "private/get_cancel_on_disconnect",
                    "params": {
                      "scope": "account"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_cancel_on_disconnect",
            "og:title": "private/get_cancel_on_disconnect"
          }
        }
      }
    },
    "/public/subscribe": {
      "get": {
        "tags": [
          "Subscription Management",
          "Public",
          "WebSocket Only"
        ],
        "description": "Subscribe to one or more channels. This is the same method as /private/subscribe, but it can only be used for 'public' channels. **📖 Related Support Article:** Market Data Collection Best Practices",
        "parameters": [
          {
            "name": "channels",
            "description": "A list of channels to subscribe to.",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-deribit-type": "channel",
                "example": "deribit_price_index.btc_usd"
              },
              "example": [
                "deribit_price_index.btc_usd"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateSubscribeResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3600,
                      "result": [
                        "deribit_price_index.btc_usd"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/PrivateSubscribeResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3600,
                    "method": "public/subscribe",
                    "params": {
                      "channels": [
                        "deribit_price_index.btc_usd"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/subscribe",
            "og:title": "public/subscribe"
          }
        }
      }
    },
    "/public/unsubscribe": {
      "get": {
        "description": "Unsubscribe from one or more channels. The response contains only the channels that were successfully unsubscribed in this request.<br> </br>**Note:** The `result` field in the response contains only the channels that were successfully processed and unsubscribed from this specific request. It does not include all previously subscribed topics. If a channel in the request is invalid, not subscribed, or fails validation, it will not appear in the result.",
        "tags": [
          "Subscription Management",
          "Public",
          "WebSocket Only"
        ],
        "parameters": [
          {
            "name": "channels",
            "description": "A list of channels to unsubscribe from. Only successfully unsubscribed channels will be returned in the result.",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-deribit-type": "channel",
                "example": "deribit_price_index.btc_usd"
              },
              "example": [
                "deribit_price_index.btc_usd"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_public_unsubscribe_200",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 8691,
                      "result": [
                        "deribit_price_index.btc_usd"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Getunsubscribe401response"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8691,
                    "method": "public/unsubscribe",
                    "params": {
                      "channels": [
                        "deribit_price_index.btc_usd"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/unsubscribe",
            "og:title": "public/unsubscribe"
          }
        }
      }
    },
    "/public/unsubscribe_all": {
      "get": {
        "description": "Unsubscribe from all the channels subscribed so far.",
        "tags": [
          "Subscription Management",
          "WebSocket Only",
          "Public"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetunsubscribeAll200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 153,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 153,
                    "method": "public/unsubscribe_all",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/unsubscribe_all",
            "og:title": "public/unsubscribe_all"
          }
        }
      }
    },
    "/private/subscribe": {
      "get": {
        "description": "Subscribe to one or more channels. The name of the channel determines what information will be provided, and in what form. **📖 Related Support Article:** Market Data Collection Best Practices",
        "tags": [
          "Subscription Management",
          "Private",
          "WebSocket Only"
        ],
        "parameters": [
          {
            "name": "channels",
            "description": "A list of channels to subscribe to.",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-deribit-type": "channel",
                "example": "deribit_price_index.btc_usd"
              },
              "example": [
                "deribit_price_index.btc_usd"
              ]
            },
            "required": true
          },
          {
            "name": "label",
            "description": "Optional label which will be added to notifications of private channels (max 16 characters).",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "TestLabel1"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateSubscribeResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 4235,
                      "result": [
                        "deribit_price_index.btc_usd"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/PrivateSubscribeResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 4235,
                    "method": "private/subscribe",
                    "params": {
                      "channels": [
                        "deribit_price_index.btc_usd"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/subscribe",
            "og:title": "private/subscribe"
          }
        }
      }
    },
    "/private/unsubscribe": {
      "get": {
        "description": "Unsubscribe from one or more channels.",
        "tags": [
          "Subscription Management",
          "Private",
          "WebSocket Only"
        ],
        "parameters": [
          {
            "name": "channels",
            "description": "A list of channels to unsubscribe from.",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "x-deribit-type": "channel",
                "example": "deribit_price_index.btc_usd"
              },
              "example": [
                "deribit_price_index.btc_usd"
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Getunsubscribe200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3370,
                      "result": [
                        "deribit_price_index.btc_usd"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Getunsubscribe401response"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3370,
                    "method": "private/unsubscribe",
                    "params": {
                      "channels": [
                        "deribit_price_index.btc_usd"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/unsubscribe",
            "og:title": "private/unsubscribe"
          }
        }
      }
    },
    "/private/unsubscribe_all": {
      "get": {
        "description": "Unsubscribe from all the channels subscribed so far.",
        "tags": [
          "Subscription Management",
          "WebSocket Only",
          "Private"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetunsubscribeAll200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 154,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 154,
                    "method": "private/unsubscribe_all",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/unsubscribe_all",
            "og:title": "private/unsubscribe_all"
          }
        }
      }
    },
    "/public/hello": {
      "get": {
        "parameters": [
          {
            "name": "client_name",
            "description": "Client software name",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "My Trading Software"
            },
            "required": true
          },
          {
            "name": "client_version",
            "description": "Client software version",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1.0.2"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Gethello200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2841,
                      "result": {
                        "version": "1.2.26"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Method used to introduce the client software connected to Deribit platform over websocket. Provided data may have an impact on the maintained connection and will be collected for internal statistical purposes. In response, Deribit will also introduce itself.",
        "tags": [
          "Supporting",
          "Public",
          "WebSocket Only"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2841,
                    "method": "public/hello",
                    "params": {
                      "client_name": "My Trading Software",
                      "client_version": "1.0.2"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/hello",
            "og:title": "public/hello"
          }
        }
      }
    },
    "/public/status": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicStatusResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 55,
                      "result": {
                        "locked_currencies": [
                          "BTC",
                          "ETH"
                        ],
                        "locked": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Method used to get information about locked currencies",
        "tags": [
          "Supporting",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 55,
                    "method": "public/status",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/status",
            "og:title": "public/status"
          }
        }
      }
    },
    "/public/test": {
      "get": {
        "parameters": [
          {
            "description": "The value \"exception\" will trigger an error response. This may be useful for testing wrapper libraries.",
            "in": "query",
            "name": "expected_result",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "exception"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicTestResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 8212,
                      "result": {
                        "version": "1.2.26"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Tests the connection to the API server, and returns its version. You can use this to make sure the API is reachable, and matches the expected version.",
        "tags": [
          "Supporting",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8212,
                    "method": "public/test",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/test",
            "og:title": "public/test"
          }
        }
      }
    },
    "/public/get_time": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PublicGetTimeResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7365,
                      "result": 1550147385946
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the current time (in milliseconds). This API endpoint can be used to check the clock skew between your software and Deribit's systems.",
        "tags": [
          "Supporting",
          "Public"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7365,
                    "method": "public/get_time",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "public/get_time",
            "og:title": "public/get_time"
          }
        }
      }
    },
    "/private/get_settlement_history_by_currency": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "description": "Settlement type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/settlement_type"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `20`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "continuation",
            "description": "Continuation token for pagination",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
            }
          },
          {
            "description": "The latest timestamp to return result from (milliseconds since the UNIX epoch)",
            "in": "query",
            "name": "search_start_timestamp",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetSettlementHistoryByCurrency200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 6074,
                      "result": {
                        "settlements": [
                          {
                            "type": "delivery",
                            "timestamp": 1550242800013,
                            "session_profit_loss": 1.567969302,
                            "profit_loss": -0.251617338,
                            "position": 13,
                            "mark_price": 0.121679828,
                            "instrument_name": "BTC-15FEB19-4000-P",
                            "index_price": 3566.08
                          }
                        ],
                        "continuation": "AHmpC39UH5EeGVjryrf731YEhjL16oqCQorSvBFZFAbbwvCN7GCbMFgno7U5JKW"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves settlement, delivery and bankruptcy events that have affected your account.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8304,
                    "method": "private/get_settlement_history_by_currency",
                    "params": {
                      "currency": "BTC",
                      "type": "delivery",
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_settlement_history_by_currency",
            "og:title": "private/get_settlement_history_by_currency"
          }
        }
      }
    },
    "/private/get_settlement_history_by_instrument": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "description": "Settlement type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/settlement_type"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `20`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "continuation",
            "description": "Continuation token for pagination",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
            }
          },
          {
            "description": "The latest timestamp to return result from (milliseconds since the UNIX epoch)",
            "in": "query",
            "name": "search_start_timestamp",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetSettlementHistoryByInstrument200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2192,
                      "result": {
                        "settlements": [
                          {
                            "type": "settlement",
                            "timestamp": 1550475692526,
                            "session_profit_loss": 0.038358299,
                            "profit_loss": -0.001783937,
                            "position": -66,
                            "mark_price": 121.67,
                            "instrument_name": "ETH-22FEB19",
                            "index_price": 119.8
                          }
                        ],
                        "continuation": "xY7T6cusbMBNpH9SNmKb94jXSBxUPojJEdCPL4YociHBUgAhWQvEP"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves public settlement, delivery and bankruptcy events filtered by instrument name",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2192,
                    "method": "private/get_settlement_history_by_instrument",
                    "params": {
                      "instrument_name": "ETH-22FEB19",
                      "type": "settlement",
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_settlement_history_by_instrument",
            "og:title": "private/get_settlement_history_by_instrument"
          }
        }
      }
    },
    "/private/get_order_history_by_instrument": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `20`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "description": "The offset for pagination, default - `0`",
            "in": "query",
            "required": false,
            "schema": {
              "example": 10,
              "type": "integer"
            }
          },
          {
            "name": "include_old",
            "description": "Include in result orders older than 2 days, default - `false`",
            "in": "query",
            "required": false,
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "include_unfilled",
            "description": "Include in result fully unfilled closed orders, default - `false`",
            "in": "query",
            "required": false,
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "with_continuation",
            "description": "When set to true, the API response format changes from a simple list of orders to an object containing the orders and a continuation token.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "continuation",
            "description": "Continuation token for pagination",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
            }
          },
          {
            "name": "historical",
            "description": "Determines whether historical trade and order records should be retrieved. `false` (default): Returns recent records: orders for 30 min, trades for 24h. `true`: Fetches historical records, available after a short delay due to indexing. Recent data is not included. **📖 Related Support Article:** Accessing historical trades and orders using API",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetOrderHistoryByInstrument200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1032,
                      "result": [
                        {
                          "time_in_force": "good_til_cancelled",
                          "reduce_only": false,
                          "price": 3886.5,
                          "post_only": false,
                          "order_type": "limit",
                          "order_state": "filled",
                          "order_id": "146475",
                          "max_show": 40,
                          "last_update_timestamp": 1550661808761,
                          "label": "",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "BTC-PERPETUAL",
                          "filled_amount": 40,
                          "direction": "buy",
                          "creation_timestamp": 1550661808761,
                          "average_price": 3659.8,
                          "api": true,
                          "amount": 40
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves history of orders that have been partially or fully filled.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1032,
                    "method": "private/get_order_history_by_instrument",
                    "params": {
                      "instrument_name": "BTC-PERPETUAL",
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_order_history_by_instrument",
            "og:title": "private/get_order_history_by_instrument"
          }
        }
      }
    },
    "/private/get_order_history_by_currency": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind_with_combo_all"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `20`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "description": "The offset for pagination, default - `0`",
            "in": "query",
            "required": false,
            "schema": {
              "example": 10,
              "type": "integer"
            }
          },
          {
            "name": "include_old",
            "description": "Include in result orders older than 2 days, default - `false`",
            "in": "query",
            "required": false,
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "include_unfilled",
            "description": "Include in result fully unfilled closed orders, default - `false`",
            "in": "query",
            "required": false,
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "with_continuation",
            "description": "When set to true, the API response format changes from a simple list of orders to an object containing the orders and a continuation token.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "continuation",
            "description": "Continuation token for pagination",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
            }
          },
          {
            "name": "historical",
            "description": "Determines whether historical trade and order records should be retrieved. `false` (default): Returns recent records: orders for 30 min, trades for 24h. `true`: Fetches historical records, available after a short delay due to indexing. Recent data is not included. **📖 Related Support Article:** Accessing historical trades and orders using API",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetOrderHistoryByCurrency200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9305,
                      "result": [
                        {
                          "time_in_force": "good_til_cancelled",
                          "reduce_only": false,
                          "price": 3886.5,
                          "post_only": false,
                          "order_type": "limit",
                          "order_state": "filled",
                          "order_id": "146475",
                          "max_show": 40,
                          "last_update_timestamp": 1550661808761,
                          "label": "",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "BTC-PERPETUAL",
                          "filled_amount": 40,
                          "direction": "buy",
                          "creation_timestamp": 1550661808761,
                          "average_price": 3659.8,
                          "api": true,
                          "amount": 40
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves history of orders that have been partially or fully filled.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9305,
                    "method": "private/get_order_history_by_currency",
                    "params": {
                      "currency": "BTC",
                      "kind": "future",
                      "count": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_order_history_by_currency",
            "og:title": "private/get_order_history_by_currency"
          }
        }
      }
    },
    "/private/get_order_state": {
      "get": {
        "description": "Retrieve the current state of an order. **Important Note for Mass Quotes:** Quote orders are order-like structures that don't fully translate to normal orders. When checking order state for quotes, the `amount` field represents the remaining amount, not the original order amount.",
        "tags": [
          "Trading",
          "Private"
        ],
        "parameters": [
          {
            "description": "The order id",
            "in": "query",
            "name": "order_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/order_id"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetOrderStateResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 4316,
                      "result": {
                        "time_in_force": "good_til_cancelled",
                        "reduce_only": false,
                        "price": 118.94,
                        "post_only": false,
                        "order_type": "limit",
                        "order_state": "filled",
                        "order_id": "ETH-331562",
                        "max_show": 37,
                        "last_update_timestamp": 1550219810944,
                        "label": "",
                        "is_rebalance": false,
                        "is_liquidation": false,
                        "instrument_name": "ETH-PERPETUAL",
                        "filled_amount": 37,
                        "direction": "sell",
                        "creation_timestamp": 1550219749176,
                        "average_price": 118.94,
                        "api": false,
                        "amount": 37
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/PrivateGetOrderStateResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 4316,
                    "method": "private/get_order_state",
                    "params": {
                      "order_id": "ETH-331562"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_order_state",
            "og:title": "private/get_order_state"
          }
        }
      }
    },
    "/private/get_order_state_by_label": {
      "get": {
        "description": "Retrieve the state of recent orders with a given label.",
        "tags": [
          "Trading",
          "Private"
        ],
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "label",
            "description": "user defined label for the order (maximum 64 characters)",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetOrderStateByLabelResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 4316,
                      "result": [
                        {
                          "time_in_force": "good_til_cancelled",
                          "reduce_only": false,
                          "price": 118.94,
                          "post_only": false,
                          "order_type": "limit",
                          "order_state": "filled",
                          "order_id": "ETH-331562",
                          "max_show": 37,
                          "last_update_timestamp": 1550219810944,
                          "label": "fooBar",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "ETH-PERPETUAL",
                          "filled_amount": 37,
                          "direction": "sell",
                          "creation_timestamp": 1550219749176,
                          "average_price": 118.94,
                          "api": false,
                          "amount": 37
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/PrivateGetOrderStateByLabelResponse"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 4316,
                    "method": "private/get_order_state_by_label",
                    "params": {
                      "currency": "ETH",
                      "label": "fooBar"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_order_state_by_label",
            "og:title": "private/get_order_state_by_label"
          }
        }
      }
    },
    "/private/get_open_orders": {
      "get": {
        "parameters": [
          {
            "name": "kind",
            "description": "Instrument kind, if not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind"
            }
          },
          {
            "name": "type",
            "description": "Order type, default - `all`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/order_type2"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetOpenOrdersResponse"
          }
        },
        "description": "Retrieves list of user's open orders across many currencies.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1953,
                    "method": "private/get_open_orders",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_open_orders",
            "og:title": "private/get_open_orders"
          }
        }
      }
    },
    "/private/get_open_orders_by_instrument": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "type",
            "description": "Order type, default - `all`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/order_type2"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetOpenOrdersByInstrument200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 8442,
                      "result": [
                        {
                          "time_in_force": "good_til_cancelled",
                          "reduce_only": false,
                          "price": 0.135,
                          "post_only": false,
                          "order_type": "limit",
                          "order_state": "open",
                          "order_id": "ETH-252017",
                          "max_show": 10,
                          "last_update_timestamp": 1550050594882,
                          "label": "",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "ETH-22FEB19-120-C",
                          "filled_amount": 0,
                          "direction": "sell",
                          "creation_timestamp": 1550050594882,
                          "average_price": 0,
                          "api": true,
                          "amount": 10
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves list of user's open orders within a given Instrument.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8442,
                    "method": "private/get_open_orders_by_instrument",
                    "params": {
                      "instrument_name": "ETH-22FEB19-120-C"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_open_orders_by_instrument",
            "og:title": "private/get_open_orders_by_instrument"
          }
        }
      }
    },
    "/private/get_open_orders_by_currency": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, if not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind"
            }
          },
          {
            "name": "type",
            "description": "Order type, default - `all`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/order_type2"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetOpenOrdersByCurrency200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1953,
                      "result": [
                        {
                          "time_in_force": "good_til_cancelled",
                          "reduce_only": false,
                          "price": 0.0028,
                          "post_only": false,
                          "order_type": "limit",
                          "order_state": "open",
                          "order_id": "146062",
                          "max_show": 10,
                          "last_update_timestamp": 1550050597036,
                          "label": "",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "BTC-15FEB19-3250-P",
                          "filled_amount": 0,
                          "direction": "buy",
                          "creation_timestamp": 1550050597036,
                          "average_price": 0,
                          "api": true,
                          "amount": 10
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves list of user's open orders.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1953,
                    "method": "private/get_open_orders_by_currency",
                    "params": {
                      "currency": "BTC"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_open_orders_by_currency",
            "og:title": "private/get_open_orders_by_currency"
          }
        }
      }
    },
    "/private/get_open_orders_by_label": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "label",
            "description": "user defined label for the order (maximum 64 characters)",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetOpenOrdersByLabel200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1953,
                      "result": [
                        {
                          "time_in_force": "good_til_cancelled",
                          "reduce_only": false,
                          "price": 0.0028,
                          "post_only": false,
                          "order_type": "limit",
                          "order_state": "open",
                          "order_id": "146062",
                          "max_show": 10,
                          "last_update_timestamp": 1550050597036,
                          "label": "fooBar",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "BTC-15FEB19-3250-P",
                          "filled_amount": 0,
                          "direction": "buy",
                          "creation_timestamp": 1550050597036,
                          "average_price": 0,
                          "api": true,
                          "amount": 10
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves list of user's open orders for given currency and label.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1953,
                    "method": "private/get_open_orders_by_label",
                    "params": {
                      "currency": "BTC",
                      "label": "fooBar"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_open_orders_by_label",
            "og:title": "private/get_open_orders_by_label"
          }
        }
      }
    },
    "/private/get_order_margin_by_ids": {
      "get": {
        "parameters": [
          {
            "name": "ids",
            "description": "Ids of orders",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "123456"
              },
              "example": [
                "ETH-349280",
                "ETH-349279",
                "ETH-349278"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetOrderMarginByIdsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 5625,
                      "result": [
                        {
                          "order_id": "ETH-349278",
                          "initial_margin": 0.00091156,
                          "initial_margin_currency": "ETH"
                        },
                        {
                          "order_id": "ETH-349279",
                          "initial_margin": 0,
                          "initial_margin_currency": "ETH"
                        },
                        {
                          "order_id": "ETH-349280",
                          "initial_margin": 0,
                          "initial_margin_currency": "ETH"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves initial margins of given orders",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 5625,
                    "method": "private/get_order_margin_by_ids",
                    "params": {
                      "ids": [
                        "ETH-349280",
                        "ETH-349279",
                        "ETH-349278"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_order_margin_by_ids",
            "og:title": "private/get_order_margin_by_ids"
          }
        }
      }
    },
    "/private/get_trigger_order_history": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `20`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "continuation",
            "description": "Continuation token for pagination",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetTriggerOrderHistoryResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2192,
                      "result": {
                        "entries": [
                          {
                            "trigger": "index",
                            "timestamp": 1555918941451,
                            "trigger_price": 5285,
                            "trigger_order_id": "SLIS-103",
                            "order_state": "new",
                            "request": "trigger:order",
                            "price": 5179.28,
                            "order_id": "671473",
                            "offset": 277,
                            "instrument_name": "BTC-PERPETUAL",
                            "amount": 10,
                            "direction": "buy"
                          }
                        ],
                        "continuation": "1555918941451.SLIS-103"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves detailed log of the user's trigger orders.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2552,
                    "method": "private/get_trigger_order_history",
                    "params": {
                      "currency": "ETH",
                      "count": 10
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_trigger_order_history",
            "og:title": "private/get_trigger_order_history"
          }
        }
      }
    },
    "/private/get_user_trades_by_instrument": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "start_seq",
            "description": "The sequence number of the first trade to be returned",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "end_seq",
            "description": "The sequence number of the last trade to be returned",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "historical",
            "description": "Determines whether historical trade and order records should be retrieved. `false` (default): Returns recent records: orders for 30 min, trades for 24h. `true`: Fetches historical records, available after a short delay due to indexing. Recent data is not included. **📖 Related Support Article:** Accessing historical trades and orders using API",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sorting",
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/sorting"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetUserTradesByInstrument200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 5728,
                      "result": {
                        "trades": [
                          {
                            "trade_seq": 1966042,
                            "trade_id": "ETH-2696068",
                            "timestamp": 1590480712800,
                            "tick_direction": 3,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 203.8,
                            "post_only": false,
                            "order_type": "market",
                            "order_id": "ETH-584830574",
                            "matching_id": null,
                            "mark_price": 203.78,
                            "liquidity": "T",
                            "instrument_name": "ETH-PERPETUAL",
                            "index_price": 203.89,
                            "fee_currency": "ETH",
                            "fee": 0.00036801,
                            "direction": "buy",
                            "amount": 100
                          },
                          {
                            "trade_seq": 1966043,
                            "trade_id": "ETH-2696069",
                            "timestamp": 1590480724473,
                            "tick_direction": 3,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 203.8,
                            "post_only": false,
                            "order_type": "market",
                            "order_id": "ETH-584830695",
                            "matching_id": null,
                            "mark_price": 203.81,
                            "liquidity": "T",
                            "instrument_name": "ETH-PERPETUAL",
                            "index_price": 203.92,
                            "fee_currency": "ETH",
                            "fee": 0.00036801,
                            "direction": "sell",
                            "amount": 100
                          }
                        ],
                        "has_more": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest user trades that have occurred for a specific instrument.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 5728,
                    "method": "private/get_user_trades_by_instrument",
                    "params": {
                      "instrument_name": "ETH-PERPETUAL",
                      "start_seq": 1966042,
                      "count": 2
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_user_trades_by_instrument",
            "og:title": "private/get_user_trades_by_instrument"
          }
        }
      }
    },
    "/private/get_user_trades_by_instrument_and_time": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "sorting",
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/sorting"
            }
          },
          {
            "name": "historical",
            "description": "Determines whether historical trade and order records should be retrieved. `false` (default): Returns recent records: orders for 30 min, trades for 24h. `true`: Fetches historical records, available after a short delay due to indexing. Recent data is not included. **📖 Related Support Article:** Accessing historical trades and orders using API",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetUserTradesByInstrumentAndTime200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 276,
                      "result": {
                        "trades": [
                          {
                            "trade_seq": 30289127,
                            "trade_id": "48078944",
                            "timestamp": 1590480866924,
                            "tick_direction": 2,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 8988.5,
                            "post_only": false,
                            "order_type": "limit",
                            "order_id": "4008716877",
                            "matching_id": null,
                            "mark_price": 8990.52,
                            "liquidity": "T",
                            "instrument_name": "BTC-PERPETUAL",
                            "index_price": 8995.15,
                            "fee_currency": "BTC",
                            "fee": 0.00037465,
                            "direction": "sell",
                            "amount": 4490
                          },
                          {
                            "trade_seq": 30289128,
                            "trade_id": "48078945",
                            "timestamp": 1590480866924,
                            "tick_direction": 2,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 8983.5,
                            "post_only": false,
                            "order_type": "limit",
                            "order_id": "4008716877",
                            "matching_id": null,
                            "mark_price": 8990.52,
                            "liquidity": "T",
                            "instrument_name": "BTC-PERPETUAL",
                            "index_price": 8995.15,
                            "fee_currency": "BTC",
                            "fee": 1.503e-05,
                            "direction": "sell",
                            "amount": 180
                          }
                        ],
                        "has_more": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest user trades that have occurred for a specific instrument and within a given time range.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 276,
                    "method": "private/get_user_trades_by_instrument_and_time",
                    "params": {
                      "instrument_name": "BTC-PERPETUAL",
                      "start_timestamp": 1590470872894,
                      "end_timestamp": 1590480872894,
                      "count": 2
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_user_trades_by_instrument_and_time",
            "og:title": "private/get_user_trades_by_instrument_and_time"
          }
        }
      }
    },
    "/private/get_user_trades_by_currency": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind_with_combo_all"
            }
          },
          {
            "name": "start_id",
            "description": "The ID of the first trade to be returned. Number for BTC trades, or hyphen name in ex. `\"ETH-15\"` # `\"ETH_USDC-16\"`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/trade_id"
            }
          },
          {
            "name": "end_id",
            "description": "The ID of the last trade to be returned. Number for BTC trades, or hyphen name in ex. `\"ETH-15\"` # `\"ETH_USDC-16\"`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/trade_id"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "sorting",
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/sorting"
            }
          },
          {
            "name": "historical",
            "description": "Determines whether historical trade and order records should be retrieved. `false` (default): Returns recent records: orders for 30 min, trades for 24h. `true`: Fetches historical records, available after a short delay due to indexing. Recent data is not included. **📖 Related Support Article:** Accessing historical trades and orders using API",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subaccount_id",
            "description": "The user id for the subaccount",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetUserTradesByCurrency200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9367,
                      "result": {
                        "trades": [
                          {
                            "underlying_price": 204.5,
                            "trade_seq": 3,
                            "trade_id": "ETH-2696060",
                            "timestamp": 1590480363130,
                            "tick_direction": 2,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 0.361,
                            "post_only": false,
                            "order_type": "limit",
                            "order_id": "ETH-584827850",
                            "matching_id": null,
                            "mark_price": 0.364585,
                            "liquidity": "T",
                            "iv": 0,
                            "instrument_name": "ETH-29MAY20-130-C",
                            "index_price": 203.72,
                            "fee_currency": "ETH",
                            "fee": 0.002,
                            "direction": "sell",
                            "amount": 5
                          },
                          {
                            "underlying_price": 204.82,
                            "trade_seq": 3,
                            "trade_id": "ETH-2696062",
                            "timestamp": 1590480416119,
                            "tick_direction": 0,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 0.015,
                            "post_only": false,
                            "order_type": "limit",
                            "order_id": "ETH-584828229",
                            "matching_id": null,
                            "mark_price": 0.000596,
                            "liquidity": "T",
                            "iv": 352.91,
                            "instrument_name": "ETH-29MAY20-140-P",
                            "index_price": 204.06,
                            "fee_currency": "ETH",
                            "fee": 0.002,
                            "direction": "buy",
                            "amount": 5
                          }
                        ],
                        "has_more": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest user trades that have occurred for instruments in a specific currency symbol. To read subaccount trades, use `subaccount_id` parameter.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9367,
                    "method": "private/get_user_trades_by_currency",
                    "params": {
                      "currency": "ETH",
                      "start_id": "ETH-34066",
                      "count": 2
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_user_trades_by_currency",
            "og:title": "private/get_user_trades_by_currency"
          }
        }
      }
    },
    "/private/get_user_trades_by_currency_and_time": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind_with_combo_all"
            }
          },
          {
            "name": "start_timestamp",
            "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "end_timestamp",
            "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "sorting",
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/sorting"
            }
          },
          {
            "name": "historical",
            "description": "Determines whether historical trade and order records should be retrieved. `false` (default): Returns recent records: orders for 30 min, trades for 24h. `true`: Fetches historical records, available after a short delay due to indexing. Recent data is not included. **📖 Related Support Article:** Accessing historical trades and orders using API",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetUserTradesByCurrencyAndTime200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9292,
                      "result": {
                        "trades": [
                          {
                            "underlying_price": 8994.95,
                            "trade_seq": 1,
                            "trade_id": "48078936",
                            "timestamp": 1590480620145,
                            "tick_direction": 1,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 0.028,
                            "post_only": false,
                            "order_type": "limit",
                            "order_id": "4008699030",
                            "matching_id": null,
                            "mark_price": 0.03135383,
                            "liquidity": "M",
                            "iv": 38.51,
                            "instrument_name": "BTC-27MAY20-8750-C",
                            "index_price": 8993.47,
                            "fee_currency": "BTC",
                            "fee": 0.0004,
                            "direction": "sell",
                            "amount": 1
                          },
                          {
                            "trade_seq": 299513,
                            "trade_id": "47958936",
                            "timestamp": 1589923311862,
                            "tick_direction": 2,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 9681.5,
                            "post_only": false,
                            "order_type": "limit",
                            "order_id": "3993343822",
                            "matching_id": null,
                            "mark_price": 9684,
                            "liquidity": "M",
                            "instrument_name": "BTC-26JUN20",
                            "index_price": 9679.48,
                            "fee_currency": "BTC",
                            "fee": -2.1e-07,
                            "direction": "buy",
                            "amount": 10
                          }
                        ],
                        "has_more": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest user trades that have occurred for instruments in a specific currency symbol and within a given time range.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9292,
                    "method": "private/get_user_trades_by_currency_and_time",
                    "params": {
                      "currency": "BTC",
                      "start_timestamp": 1590480630731,
                      "end_timestamp": 1510480630731,
                      "count": 2
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_user_trades_by_currency_and_time",
            "og:title": "private/get_user_trades_by_currency_and_time"
          }
        }
      }
    },
    "/private/get_user_trades_by_order": {
      "get": {
        "parameters": [
          {
            "description": "The order id",
            "in": "query",
            "name": "order_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/order_id"
            }
          },
          {
            "name": "sorting",
            "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/sorting"
            }
          },
          {
            "name": "historical",
            "description": "Determines whether historical trade and order records should be retrieved. `false` (default): Returns recent records: orders for 30 min, trades for 24h. `true`: Fetches historical records, available after a short delay due to indexing. Recent data is not included. **📖 Related Support Article:** Accessing historical trades and orders using API",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "description": "Retrieve the list of user trades that was created for given order",
        "tags": [
          "Trading",
          "Private"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetUserTradesByOrderResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3466,
                      "result": [
                        {
                          "trade_seq": 1966042,
                          "trade_id": "ETH-2696068",
                          "timestamp": 1590480712800,
                          "tick_direction": 3,
                          "state": "filled",
                          "reduce_only": false,
                          "price": 203.8,
                          "post_only": false,
                          "order_type": "market",
                          "order_id": "ETH-584830574",
                          "matching_id": null,
                          "mark_price": 203.78,
                          "liquidity": "T",
                          "instrument_name": "ETH-PERPETUAL",
                          "index_price": 203.89,
                          "fee_currency": "ETH",
                          "fee": 0.00036801,
                          "direction": "buy",
                          "amount": 100
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3466,
                    "method": "private/get_user_trades_by_order",
                    "params": {
                      "order_id": "ETH-584830574"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_user_trades_by_order",
            "og:title": "private/get_user_trades_by_order"
          }
        }
      }
    },
    "/private/cancel_all": {
      "get": {
        "parameters": [
          {
            "name": "detailed",
            "description": "When detailed is set to `true` output format is changed. See description. Default: `false`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "freeze_quotes",
            "description": "Whether or not to reject incoming quotes for 1 second after cancelling (`false` by default). Related to `private/mass_quote` request.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateCancelAllResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 8748,
                      "result": 37
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This method cancels all users orders and trigger orders within all currencies and instrument kinds.",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 8748,
                    "method": "private/cancel_all",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_all",
            "og:title": "private/cancel_all"
          }
        }
      }
    },
    "/private/cancel_all_by_instrument": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "type",
            "description": "Order type - `limit`, `stop`, `take`, `trigger_all` or `all`, default - `all`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/simple_order_type"
            }
          },
          {
            "name": "detailed",
            "description": "When detailed is set to `true` output format is changed. See description. Default: `false`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_combos",
            "description": "When set to `true` orders in combo instruments affecting a given position will also be cancelled. Default: `false`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "freeze_quotes",
            "description": "Whether or not to reject incoming quotes for 1 second after cancelling (`false` by default). Related to `private/mass_quote` request.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetcancelAllByInstrument200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 4122,
                      "result": 7
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Cancels all orders by instrument, optionally filtered by order type.",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 4122,
                    "method": "private/cancel_all_by_instrument",
                    "params": {
                      "instrument_name": "ETH-22FEB19-120-P",
                      "type": "all"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_all_by_instrument",
            "og:title": "private/cancel_all_by_instrument"
          }
        }
      }
    },
    "/private/cancel_all_by_currency": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind_with_combo_all"
            }
          },
          {
            "name": "type",
            "description": "Order type - `limit`, `stop`, `take`, `trigger_all` or `all`, default - `all`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/simple_order_type"
            }
          },
          {
            "name": "detailed",
            "description": "When detailed is set to `true` output format is changed. See description. Default: `false`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "freeze_quotes",
            "description": "Whether or not to reject incoming quotes for 1 second after cancelling (`false` by default). Related to `private/mass_quote` request.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetcancelAllByCurrency200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 5663,
                      "result": 3
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Cancels all orders by currency, optionally filtered by instrument kind and/or order type.",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 5663,
                    "method": "private/cancel_all_by_currency",
                    "params": {
                      "currency": "BTC",
                      "kind": "option"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_all_by_currency",
            "og:title": "private/cancel_all_by_currency"
          }
        }
      }
    },
    "/private/cancel_all_by_currency_pair": {
      "get": {
        "parameters": [
          {
            "name": "currency_pair",
            "description": "The currency pair symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/index_name"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind_with_combo_all"
            }
          },
          {
            "name": "type",
            "description": "Order type - `limit`, `stop`, `take`, `trigger_all` or `all`, default - `all`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/simple_order_type"
            }
          },
          {
            "name": "detailed",
            "description": "When detailed is set to `true` output format is changed. See description. Default: `false`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "freeze_quotes",
            "description": "Whether or not to reject incoming quotes for 1 second after cancelling (`false` by default). Related to `private/mass_quote` request.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetcancelAllByCurrencyPair200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 5663,
                      "result": 3
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Cancels all orders by currency pair, optionally filtered by instrument kind and/or order type.",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 5663,
                    "method": "private/cancel_all_by_currency_pair",
                    "params": {
                      "currency_pair": "BTC_USD",
                      "kind": "option"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_all_by_currency_pair",
            "og:title": "private/cancel_all_by_currency_pair"
          }
        }
      }
    },
    "/private/cancel_all_by_kind_or_type": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol, list of currency symbols or `\"any\"` for all",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency_with_any_and_list"
            }
          },
          {
            "name": "kind",
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind_with_combo_all"
            }
          },
          {
            "name": "type",
            "description": "Order type - `limit`, `stop`, `take`, `trigger_all` or `all`, default - `all`",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/simple_order_type"
            }
          },
          {
            "name": "detailed",
            "description": "When detailed is set to `true` output format is changed. See description. Default: `false`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "freeze_quotes",
            "description": "Whether or not to reject incoming quotes for 1 second after cancelling (`false` by default). Related to `private/mass_quote` request.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetcancelAllByKindOrType200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2,
                      "result": 6
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Cancels all orders in currency(currencies), optionally filtered by instrument kind and/or order type.",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2,
                    "method": "private/cancel_all_by_kind_or_type",
                    "params": {
                      "currency": [
                        "BTC",
                        "ETH"
                      ],
                      "kind": "future"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_all_by_kind_or_type",
            "og:title": "private/cancel_all_by_kind_or_type"
          }
        }
      }
    },
    "/private/cancel_by_label": {
      "get": {
        "parameters": [
          {
            "name": "label",
            "description": "user defined label for the order (maximum 64 characters)",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "description": "The currency symbol",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetcancelByLabel200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 47,
                      "result": 4
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Cancels orders by label. All user's orders (trigger orders too), with a given label are cancelled in all currencies or in one given currency (in this case currency queue is used). **Rate Limits:** When called without the `currency` parameter, this method is subject to `cancel_all` rate limits. Different rate limit values may apply for per-currency cancels versus calls without providing the currency parameter.",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 47,
                    "method": "private/cancel_by_label",
                    "params": {
                      "label": "label"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_by_label",
            "og:title": "private/cancel_by_label"
          }
        }
      }
    },
    "/private/cancel_quotes": {
      "get": {
        "parameters": [
          {
            "name": "detailed",
            "description": "When detailed is set to `true` output format is changed. See description. Default: `false`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "freeze_quotes",
            "description": "Whether or not to reject incoming quotes for 1 second after cancelling (`false` by default). Related to `private/mass_quote` request.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cancel_type",
            "description": "Type of cancel criteria.",
            "in": "query",
            "schema": {
              "enum": [
                "delta",
                "quote_set_id",
                "instrument",
                "instrument_kind",
                "currency",
                "currency_pair",
                "all"
              ],
              "type": "string",
              "example": "delta"
            },
            "required": true
          },
          {
            "name": "min_delta",
            "description": "Min delta to cancel by delta (for `cancel_type`: `delta`).",
            "in": "query",
            "schema": {
              "type": "number",
              "example": 0.4
            },
            "required": false
          },
          {
            "name": "max_delta",
            "description": "Max delta to cancel by delta (for `cancel_type`: `delta`).",
            "in": "query",
            "schema": {
              "type": "number",
              "example": 0.6
            },
            "required": false
          },
          {
            "name": "quote_set_id",
            "description": "Unique identifier for the Quote set.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "instrument_name",
            "description": "Instrument name.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "kind",
            "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/kind_with_combo_all"
            }
          },
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "currency_pair",
            "description": "The currency pair symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/index_name"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateCancelQuotesResponse"
          }
        },
        "description": "Cancels quotes based on the provided type. `delta` cancels quotes within a Delta range defined by `min_delta` and `max_delta`. `quote_set_id` cancels quotes by a specific Quote Set identifier. `instrument` cancels all quotes associated with a particular instrument. `kind` cancels all quotes for a certain instrument kind. `currency` cancels all quotes in a specified currency. `currency_pair` cancels all quotes in a specified currency pair. `all` cancels all quotes.",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 5663,
                    "method": "private/cancel_quotes",
                    "params": {
                      "cancel_type": "delta",
                      "min_delta": 0.4,
                      "max_delta": 0.6
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_quotes",
            "og:title": "private/cancel_quotes"
          }
        }
      }
    },
    "/private/cancel": {
      "get": {
        "parameters": [
          {
            "description": "The order id",
            "in": "query",
            "name": "order_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/order_id"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateCancelResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 4214,
                      "result": {
                        "triggered": false,
                        "trigger": "index_price",
                        "time_in_force": "good_til_cancelled",
                        "trigger_price": 144.73,
                        "reduce_only": false,
                        "price": "market_price",
                        "post_only": false,
                        "order_type": "stop_market",
                        "order_state": "untriggered",
                        "order_id": "ETH-SLIS-12",
                        "max_show": 5,
                        "last_update_timestamp": 1550575961291,
                        "label": "",
                        "is_rebalance": false,
                        "is_liquidation": false,
                        "instrument_name": "ETH-PERPETUAL",
                        "direction": "sell",
                        "creation_timestamp": 1550575961291,
                        "api": false,
                        "amount": 5
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Cancel an order, specified by order id",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 4214,
                    "method": "private/cancel",
                    "params": {
                      "order_id": "ETH-SLIS-12"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel",
            "og:title": "private/cancel"
          }
        }
      }
    },
    "/private/buy": {
      "get": {
        "description": "Places a buy order for an instrument. **📖 Related Support Article:** [Order Management Best Practices](https://support.deribit.com/hc/en-us/articles/29514039279773-Order-Management-Best-Practices)",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "amount",
            "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin. The `amount` is a mandatory parameter if `contracts` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "contracts",
            "description": "It represents the requested order size in contract units and can be passed instead of `amount`. The `contracts` is a mandatory parameter if `amount` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "type",
            "description": "The order type, default: `\"limit\"`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "limit",
                "stop_limit",
                "take_limit",
                "market",
                "stop_market",
                "take_market",
                "market_limit",
                "trailing_stop"
              ]
            },
            "required": false
          },
          {
            "name": "label",
            "description": "user defined label for the order (maximum 64 characters)",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "price",
            "description": "The order price in base currency (Only for limit and stop_limit orders) When adding an order with advanced=usd, the field price should be the option price value in USD. When adding an order with advanced=implv, the field price should be a value of implied volatility in percentages. For example, price=100, means implied volatility of 100%",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "time_in_force",
            "description": "Specifies how long the order remains in effect. Default `\"good_til_cancelled\"` `\"good_til_cancelled\"` - unfilled order remains in order book until cancelled `\"good_til_day\"` - unfilled order remains in order book till the end of the trading session `\"fill_or_kill\"` - execute a transaction immediately and completely or not at all `\"immediate_or_cancel\"` - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "good_til_cancelled",
              "enum": [
                "good_til_cancelled",
                "good_til_day",
                "fill_or_kill",
                "immediate_or_cancel"
              ]
            },
            "required": false
          },
          {
            "name": "display_amount",
            "description": "Initial display amount for iceberg order. Has to be at least 100 times minimum amount for instrument and ratio of hidden part vs visible part has to be less than 100 as well.",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            },
            "required": false
          },
          {
            "name": "post_only",
            "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the spread. Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "required": false
          },
          {
            "name": "reject_post_only",
            "description": "If an order is considered post-only and this field is set to true then the order is put to the order book unmodified or the request is rejected. Only valid in combination with `\"post_only\"` set to true",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "reduce_only",
            "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "trigger_price",
            "description": "Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "trigger_offset",
            "description": "The maximum deviation from the price peak beyond which the order will be triggered",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "trigger",
            "description": "Defines the trigger type. Required for `\"Stop-Loss\"`, `\"Take-Profit\"` and `\"Trailing\"` trigger orders",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/trigger"
            },
            "required": false
          },
          {
            "name": "advanced",
            "description": "Advanced option order type. (Only for options. Advanced USD orders are not supported for linear options.)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/advanced"
            },
            "required": false
          },
          {
            "name": "mmp",
            "description": "Order MMP flag, only for order_type 'limit'",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "valid_until",
            "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use /public/time method to obtain current server time.",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "linked_order_type",
            "description": "The type of the linked order. `\"one_triggers_other\"` - Execution of primary order triggers the placement of one or more secondary orders. `\"one_cancels_other\"` - The execution of one order in a pair automatically cancels the other, typically used to set a stop-loss and take-profit simultaneously. `\"one_triggers_one_cancels_other\"` - The execution of a primary order triggers two secondary orders (a stop-loss and take-profit pair), where the execution of one secondary order cancels the other.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "one_triggers_other",
                "one_cancels_other",
                "one_triggers_one_cancels_other"
              ]
            },
            "required": false
          },
          {
            "name": "trigger_fill_condition",
            "description": "The fill condition of the linked order (Only for linked order types), default: `first_hit`. `\"first_hit\"` - any execution of the primary order will fully cancel/place all secondary orders. `\"complete_fill\"` - a complete execution (meaning the primary order no longer exists) will cancel/place the secondary orders. `\"incremental\"` - any fill of the primary order will cause proportional partial cancellation/placement of the secondary order. The amount that will be subtracted/added to the secondary order will be rounded down to the contract size.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "first_hit",
                "complete_fill",
                "incremental"
              ],
              "default": "first_hit"
            },
            "required": false
          },
          {
            "name": "otoco_config",
            "description": "List of trades to create or cancel when this order is filled.",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 12 properties"
              }
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Getbuy200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 5275,
                      "result": {
                        "trades": [
                          {
                            "trade_seq": 1966056,
                            "trade_id": "ETH-2696083",
                            "timestamp": 1590483938456,
                            "tick_direction": 0,
                            "state": "filled",
                            "reduce_only": false,
                            "price": 203.3,
                            "post_only": false,
                            "order_type": "market",
                            "order_id": "ETH-584849853",
                            "matching_id": null,
                            "mark_price": 203.28,
                            "liquidity": "T",
                            "label": "market0000234",
                            "instrument_name": "ETH-PERPETUAL",
                            "index_price": 203.33,
                            "fee_currency": "ETH",
                            "fee": 0.00014757,
                            "direction": "buy",
                            "amount": 40
                          }
                        ],
                        "order": {
                          "web": false,
                          "time_in_force": "good_til_cancelled",
                          "replaced": false,
                          "reduce_only": false,
                          "price": 207.3,
                          "post_only": false,
                          "order_type": "market",
                          "order_state": "filled",
                          "order_id": "ETH-584849853",
                          "max_show": 40,
                          "last_update_timestamp": 1590483938456,
                          "label": "market0000234",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "ETH-PERPETUAL",
                          "filled_amount": 40,
                          "direction": "buy",
                          "creation_timestamp": 1590483938456,
                          "average_price": 203.3,
                          "api": true,
                          "amount": 40
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 5275,
                    "method": "private/buy",
                    "params": {
                      "instrument_name": "ETH-PERPETUAL",
                      "amount": 40,
                      "type": "market",
                      "label": "market0000234"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/buy",
            "og:title": "private/buy"
          }
        }
      }
    },
    "/private/sell": {
      "get": {
        "description": "Places a sell order for an instrument. **📖 Related Support Article:** [Order Management Best Practices](https://support.deribit.com/hc/en-us/articles/29514039279773-Order-Management-Best-Practices)",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "amount",
            "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin. The `amount` is a mandatory parameter if `contracts` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "contracts",
            "description": "It represents the requested order size in contract units and can be passed instead of `amount`. The `contracts` is a mandatory parameter if `amount` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "type",
            "description": "The order type, default: `\"limit\"`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "limit",
                "stop_limit",
                "take_limit",
                "market",
                "stop_market",
                "take_market",
                "market_limit",
                "trailing_stop"
              ]
            },
            "required": false
          },
          {
            "name": "label",
            "description": "user defined label for the order (maximum 64 characters)",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "price",
            "description": "The order price in base currency (Only for limit and stop_limit orders) When adding an order with advanced=usd, the field price should be the option price value in USD. When adding an order with advanced=implv, the field price should be a value of implied volatility in percentages. For example, price=100, means implied volatility of 100%",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "time_in_force",
            "description": "Specifies how long the order remains in effect. Default `\"good_til_cancelled\"` `\"good_til_cancelled\"` - unfilled order remains in order book until cancelled `\"good_til_day\"` - unfilled order remains in order book till the end of the trading session `\"fill_or_kill\"` - execute a transaction immediately and completely or not at all `\"immediate_or_cancel\"` - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "good_til_cancelled",
              "enum": [
                "good_til_cancelled",
                "good_til_day",
                "fill_or_kill",
                "immediate_or_cancel"
              ]
            },
            "required": false
          },
          {
            "name": "display_amount",
            "description": "Initial display amount for iceberg order. Has to be at least 100 times minimum amount for instrument and ratio of hidden part vs visible part has to be less than 100 as well.",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            },
            "required": false
          },
          {
            "name": "post_only",
            "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just above the spread. Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "required": false
          },
          {
            "name": "reject_post_only",
            "description": "If an order is considered post-only and this field is set to true then the order is put to the order book unmodified or the request is rejected. Only valid in combination with `\"post_only\"` set to true",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "reduce_only",
            "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "trigger_price",
            "description": "Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "trigger_offset",
            "description": "The maximum deviation from the price peak beyond which the order will be triggered",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "trigger",
            "description": "Defines the trigger type. Required for `\"Stop-Loss\"`, `\"Take-Profit\"` and `\"Trailing\"` trigger orders",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/trigger"
            },
            "required": false
          },
          {
            "name": "advanced",
            "description": "Advanced option order type. (Only for options. Advanced USD orders are not supported for linear options.)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/advanced"
            },
            "required": false
          },
          {
            "name": "mmp",
            "description": "Order MMP flag, only for order_type 'limit'",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "valid_until",
            "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use /public/time method to obtain current server time.",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "linked_order_type",
            "description": "The type of the linked order. `\"one_triggers_other\"` - Execution of primary order triggers the placement of one or more secondary orders. `\"one_cancels_other\"` - The execution of one order in a pair automatically cancels the other, typically used to set a stop-loss and take-profit simultaneously. `\"one_triggers_one_cancels_other\"` - The execution of a primary order triggers two secondary orders (a stop-loss and take-profit pair), where the execution of one secondary order cancels the other.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "one_triggers_other",
                "one_cancels_other",
                "one_triggers_one_cancels_other"
              ]
            },
            "required": false
          },
          {
            "name": "trigger_fill_condition",
            "description": "The fill condition of the linked order (Only for linked order types), default: `first_hit`. `\"first_hit\"` - any execution of the primary order will fully cancel/place all secondary orders. `\"complete_fill\"` - a complete execution (meaning the primary order no longer exists) will cancel/place the secondary orders. `\"incremental\"` - any fill of the primary order will cause proportional partial cancellation/placement of the secondary order. The amount that will be subtracted/added to the secondary order will be rounded down to the contract size.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "first_hit",
                "complete_fill",
                "incremental"
              ],
              "default": "first_hit"
            },
            "required": false
          },
          {
            "name": "otoco_config",
            "description": "List of trades to create or cancel when this order is filled.",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 12 properties"
              }
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Getsell200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2148,
                      "result": {
                        "trades": [],
                        "order": {
                          "triggered": false,
                          "trigger": "last_price",
                          "time_in_force": "good_til_cancelled",
                          "trigger_price": 145,
                          "reduce_only": false,
                          "price": 145.61,
                          "post_only": false,
                          "order_type": "stop_limit",
                          "order_state": "untriggered",
                          "order_id": "ETH-SLTS-28",
                          "max_show": 123,
                          "last_update_timestamp": 1550659803407,
                          "label": "",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "ETH-PERPETUAL",
                          "direction": "sell",
                          "creation_timestamp": 1550659803407,
                          "api": true,
                          "amount": 123
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2148,
                    "method": "private/sell",
                    "params": {
                      "instrument_name": "ETH-PERPETUAL",
                      "amount": 123,
                      "type": "stop_limit",
                      "price": 145.61,
                      "trigger_price": 145,
                      "trigger": "last_price"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/sell",
            "og:title": "private/sell"
          }
        }
      }
    },
    "/private/edit": {
      "get": {
        "parameters": [
          {
            "description": "The order id",
            "in": "query",
            "name": "order_id",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/order_id"
            }
          },
          {
            "name": "amount",
            "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin. The `amount` is a mandatory parameter if `contracts` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "contracts",
            "description": "It represents the requested order size in contract units and can be passed instead of `amount`. The `contracts` is a mandatory parameter if `amount` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "price",
            "description": "The order price in base currency. When editing an option order with advanced=usd, the field price should be the option price value in USD. When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example, price=100, means implied volatility of 100%",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "post_only",
            "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below or above the spread (accordingly to the original order type). Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "required": false
          },
          {
            "name": "reduce_only",
            "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "reject_post_only",
            "description": "If an order is considered post-only and this field is set to true then the order is put to the order book unmodified or the request is rejected. Only valid in combination with `\"post_only\"` set to true",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "advanced",
            "description": "Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/advanced"
            },
            "required": false
          },
          {
            "name": "trigger_price",
            "description": "Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "trigger_offset",
            "description": "The maximum deviation from the price peak beyond which the order will be triggered",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "mmp",
            "description": "Order MMP flag, only for order_type 'limit'",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "valid_until",
            "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use /public/time method to obtain current server time.",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "display_amount",
            "description": "Initial display amount for iceberg order. Has to be at least 100 times minimum amount for instrument and ratio of hidden part vs visible part has to be less than 100 as well.",
            "in": "query",
            "schema": {
              "type": "number",
              "default": 1
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateEditResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3725,
                      "result": {
                        "trades": [],
                        "order": {
                          "time_in_force": "good_til_cancelled",
                          "reduce_only": false,
                          "price": 0.1448,
                          "post_only": false,
                          "order_type": "limit",
                          "order_state": "open",
                          "order_id": "438994",
                          "max_show": 4,
                          "last_update_timestamp": 1550585797677,
                          "label": "",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "BTC-22FEB19-3500-C",
                          "implv": 222,
                          "filled_amount": 0,
                          "direction": "buy",
                          "creation_timestamp": 1550585741277,
                          "average_price": 0,
                          "api": false,
                          "amount": 4,
                          "advanced": "implv"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Change price, amount and/or other properties of an order. **📖 Related Support Article:** [Order Management Best Practices](https://support.deribit.com/hc/en-us/articles/29514039279773-Order-Management-Best-Practices)",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3725,
                    "method": "private/edit",
                    "params": {
                      "order_id": "438994",
                      "amount": 4,
                      "price": 222,
                      "advanced": "implv"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/edit",
            "og:title": "private/edit"
          }
        }
      }
    },
    "/private/edit_by_label": {
      "get": {
        "parameters": [
          {
            "name": "label",
            "description": "user defined label for the order (maximum 64 characters)",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "amount",
            "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin. The `amount` is a mandatory parameter if `contracts` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "contracts",
            "description": "It represents the requested order size in contract units and can be passed instead of `amount`. The `contracts` is a mandatory parameter if `amount` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "price",
            "description": "The order price in base currency. When editing an option order with advanced=usd, the field price should be the option price value in USD. When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example, price=100, means implied volatility of 100%",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "post_only",
            "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below or above the spread (accordingly to the original order type). Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "required": false
          },
          {
            "name": "reduce_only",
            "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "reject_post_only",
            "description": "If an order is considered post-only and this field is set to true then the order is put to the order book unmodified or the request is rejected. Only valid in combination with `\"post_only\"` set to true",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "advanced",
            "description": "Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/advanced"
            },
            "required": false
          },
          {
            "name": "trigger_price",
            "description": "Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "mmp",
            "description": "Order MMP flag, only for order_type 'limit'",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "required": false
          },
          {
            "name": "valid_until",
            "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use /public/time method to obtain current server time.",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GeteditByLabel200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9,
                      "result": {
                        "trades": [],
                        "order": {
                          "web": false,
                          "time_in_force": "good_til_cancelled",
                          "replaced": true,
                          "reduce_only": false,
                          "price": 50111.0,
                          "post_only": false,
                          "order_type": "limit",
                          "order_state": "open",
                          "order_id": "94166",
                          "max_show": 150,
                          "last_update_timestamp": 1616155550773,
                          "label": "i_love_deribit",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "BTC-PERPETUAL",
                          "filled_amount": 0,
                          "direction": "buy",
                          "creation_timestamp": 1616155547764,
                          "average_price": 0.0,
                          "api": true,
                          "amount": 150
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Change price, amount and/or other properties of an order with a given label. It works only when there is one open order with this label",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9,
                    "method": "private/edit_by_label",
                    "params": {
                      "instrument_name": "BTC-PERPETUAL",
                      "label": "i_love_deribit",
                      "amount": 150,
                      "price": 50111
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/edit_by_label",
            "og:title": "private/edit_by_label"
          }
        }
      }
    },
    "/private/close_position": {
      "get": {
        "description": "Makes closing position reduce only order .",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "type",
            "description": "The order type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "limit",
                "market"
              ]
            },
            "required": true
          },
          {
            "name": "price",
            "description": "Optional price for limit order.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetclosePosition200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 6130,
                      "result": {
                        "trades": [
                          {
                            "trade_seq": 1966068,
                            "trade_id": "ETH-2696097",
                            "timestamp": 1590486335742,
                            "tick_direction": 0,
                            "state": "filled",
                            "reduce_only": true,
                            "price": 202.8,
                            "post_only": false,
                            "order_type": "limit",
                            "order_id": "ETH-584864807",
                            "matching_id": null,
                            "mark_price": 202.79,
                            "liquidity": "T",
                            "instrument_name": "ETH-PERPETUAL",
                            "index_price": 202.86,
                            "fee_currency": "ETH",
                            "fee": 7.766e-05,
                            "direction": "sell",
                            "amount": 21
                          }
                        ],
                        "order": {
                          "web": false,
                          "time_in_force": "good_til_cancelled",
                          "replaced": false,
                          "reduce_only": true,
                          "price": 198.75,
                          "post_only": false,
                          "order_type": "limit",
                          "order_state": "filled",
                          "order_id": "ETH-584864807",
                          "max_show": 21,
                          "last_update_timestamp": 1590486335742,
                          "label": "",
                          "is_rebalance": false,
                          "is_liquidation": false,
                          "instrument_name": "ETH-PERPETUAL",
                          "filled_amount": 21,
                          "direction": "sell",
                          "creation_timestamp": 1590486335742,
                          "average_price": 202.8,
                          "api": true,
                          "amount": 21
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 6130,
                    "method": "private/close_position",
                    "params": {
                      "instrument_name": "ETH-PERPETUAL",
                      "type": "limit",
                      "price": 145.17
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/close_position",
            "og:title": "private/close_position"
          }
        }
      }
    },
    "/private/get_margins": {
      "get": {
        "parameters": [
          {
            "name": "instrument_name",
            "description": "Instrument name",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/instrument_name"
            }
          },
          {
            "name": "amount",
            "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "description": "Price",
            "in": "query",
            "name": "price",
            "required": true,
            "schema": {
              "type": "number",
              "example": 3725
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetMarginsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7,
                      "result": {
                        "sell": 0,
                        "min_price": 3684.8,
                        "max_price": 3759.24,
                        "buy": 0.0219949
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get margins for a given instrument, amount and price.",
        "tags": [
          "Trading",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7,
                    "method": "private/get_margins",
                    "params": {
                      "instrument_name": "BTC-PERPETUAL",
                      "amount": 10000,
                      "price": 3725
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_margins",
            "og:title": "private/get_margins"
          }
        }
      }
    },
    "/private/get_mmp_config": {
      "get": {
        "description": "Get MMP configuration for an index, if the parameter is not provided, a list of all MMP configurations is returned. Empty list means no MMP configuration.",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "parameters": [
          {
            "name": "index_name",
            "required": false,
            "in": "query",
            "description": "Index identifier of derivative instrument on the platform; skipping this parameter will return all configurations",
            "schema": {
              "$ref": "#/components/schemas/index_name_derivative"
            }
          },
          {
            "name": "mmp_group",
            "description": "Specifies the MMP group for which the configuration is being retrieved. MMP groups are used for Mass Quotes. If MMP group is not provided, the method returns the configuration for the MMP settings for regular orders. The `index_name` must be specified before using this parameter. **📖 Related Support Article:** Mass Quotes Specifications",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "MassQuoteBot7"
            }
          },
          {
            "name": "block_rfq",
            "description": "If true, retrieves MMP configuration for Block RFQ. When set, requires `block_rfq` scope instead of `trade` scope. Block RFQ MMP settings are completely separate from normal order/quote MMP settings.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetMmpConfigResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7859,
                      "result": [
                        {
                          "index_name": "btc_usd",
                          "mmp_group": "MassQuoteBot7",
                          "interval": 60,
                          "frozen_time": 0,
                          "quantity_limit": 0.5,
                          "delta_limit": 0.3,
                          "vega_limit": 0.1
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7859,
                    "method": "private/get_mmp_config",
                    "params": {
                      "index_name": "btc_usd",
                      "mmp_group": "MassQuoteBot7"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_mmp_config",
            "og:title": "private/get_mmp_config"
          }
        }
      }
    },
    "/private/get_mmp_status": {
      "get": {
        "description": "Get MMP status for triggered index (or group). If the parameter is not provided, a list of all triggered MMP statuses is returned.",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "parameters": [
          {
            "name": "index_name",
            "required": false,
            "in": "query",
            "description": "Index identifier of derivative instrument on the platform; skipping this parameter will return all configurations",
            "schema": {
              "$ref": "#/components/schemas/index_name_derivative"
            }
          },
          {
            "name": "mmp_group",
            "description": "Specifies the MMP group for which the status is being retrieved. The `index_name` must be specified before using this parameter. **📖 Related Support Article:** Mass Quotes Specifications",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "MassQuoteBot7"
            }
          },
          {
            "name": "block_rfq",
            "description": "If true, retrieves MMP status for Block RFQ. When set, requires `block_rfq` scope instead of `trade` scope. Block RFQ MMP status is completely separate from normal order/quote MMP status.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetMmpStatusResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7851,
                      "result": [
                        {
                          "index_name": "btc_usd",
                          "frozen_until": 1744275841861,
                          "mmp_group": "MassQuoteBot7"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7851,
                    "method": "private/get_mmp_status",
                    "params": {
                      "index_name": "btc_usd",
                      "mmp_group": "MassQuoteBot7"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_mmp_status",
            "og:title": "private/get_mmp_status"
          }
        }
      }
    },
    "/private/set_mmp_config": {
      "get": {
        "description": "Set config for MMP - triggers MMP reset **📖 Related Support Article:** Market Maker Protection API Configuration",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "parameters": [
          {
            "name": "index_name",
            "required": true,
            "in": "query",
            "description": "Index identifier of derivative instrument on the platform",
            "schema": {
              "$ref": "#/components/schemas/index_name_derivative"
            }
          },
          {
            "name": "interval",
            "description": "MMP Interval in seconds, if set to 0 MMP is removed",
            "required": true,
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 60
            }
          },
          {
            "name": "frozen_time",
            "description": "MMP frozen time in seconds, if set to 0 manual reset is required",
            "required": true,
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 0
            }
          },
          {
            "name": "mmp_group",
            "description": "Designates the MMP group for which the configuration is being set. If the specified group is already associated with a different `index_name`, an error is returned. This parameter enables distinct configurations for each MMP group, linked to particular `index_name`. Maximum 64 characters. Case sensitive. Cannot be empty string. **📖 Related Support Article:** Mass Quotes Specifications",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "MassQuoteBot7"
            }
          },
          {
            "name": "quantity_limit",
            "description": "Quantity limit, positive value",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number",
              "example": 3.0
            }
          },
          {
            "name": "delta_limit",
            "description": "Delta limit, positive value",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "vega_limit",
            "description": "Vega limit, positive value",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "block_rfq",
            "description": "If true, configures MMP for Block RFQ. When set, requires block_rfq scope instead of trade scope. Block RFQ MMP settings are completely separate from normal order/quote MMP settings.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "trade_count_limit",
            "description": "For Block RFQ only (`block_rfq` = `true`). Sets the maximum number of Block RFQ trades allowed in the lookback window. Each RFQ trade counts as `+1` towards the limit (not individual legs). Works across all currency pairs. When using this parameter, `index_name` must be set to `\"all\"`. Maximum - `1000`.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateSetMmpConfigResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7859,
                      "method": "private/set_mmp_config",
                      "result": {
                        "index_name": "btc_usd",
                        "mmp_group": "MassQuoteBot7",
                        "interval": 60,
                        "frozen_time": 0,
                        "quantity_limit": 3.0
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7859,
                    "method": "private/set_mmp_config",
                    "params": {
                      "index_name": "btc_usd",
                      "mmp_group": "MassQuoteBot7",
                      "interval": 60,
                      "frozen_time": 0,
                      "quantity_limit": 3.0
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/set_mmp_config",
            "og:title": "private/set_mmp_config"
          }
        }
      }
    },
    "/private/reset_mmp": {
      "get": {
        "description": "Reset Market Maker Protection (MMP) limits for the specified currency pair or group. **📖 Related Support Article:** Market Maker Protection API Configuration",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "parameters": [
          {
            "name": "index_name",
            "description": "Currency pair for which to reset MMP limits. **For regular MMP (`block_rfq = false`):** Must be a specific currency pair (e.g., \"btc_usd\", \"eth_usd\"). The value `\"all\"` is not allowed. **For Block RFQ MMP (`block_rfq = true`):** Can be either a specific currency pair or `\"all\"` to reset MMP limits across all currency pairs.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "btc_usd"
            }
          },
          {
            "name": "mmp_group",
            "description": "Specifies the MMP group for which limits are being reset. If this parameter is omitted, the method resets the traditional (no group) MMP limits. **📖 Related Support Article:** Mass Quotes Specifications",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "example": "MassQuoteBot7"
            }
          },
          {
            "name": "block_rfq",
            "description": "If true, resets MMP for Block RFQ. When set, requires `block_rfq` scope instead of `trade` scope. Block RFQ MMP settings are completely separate from normal order/quote MMP settings. When `block_rfq = true`, the `index_name` parameter can be set to `\"all\"` to reset limits across all currency pairs.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetresetMmp200response"
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7859,
                    "method": "private/reset_mmp",
                    "params": {
                      "index_name": "btc_usd",
                      "mmp_group": "MassQuoteBot7"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/reset_mmp",
            "og:title": "private/reset_mmp"
          }
        }
      }
    },
    "/private/mass_quote": {
      "get": {
        "parameters": [
          {
            "name": "wait_for_response",
            "description": "If false, the response is sent immediately after the risk check. If true, the response is sent after the orders all go through the matching engine. Default - `true`.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "detailed",
            "description": "Flag to receive a list of all order changes and a list of errors, or to only receive a list of errors. Default - `false`.",
            "in": "query",
            "schema": {
              "type": "boolean",
              "example": true
            },
            "required": false
          },
          {
            "name": "quote_id",
            "description": "Identifier of a mass quote message. Can be used to match trades to requests. We recommend using an incrementing counter.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "1"
            },
            "required": true
          },
          {
            "name": "mmp_group",
            "description": "Name of the MMP group. An MMP group has to be used and only one quote can exist per instrument per side per MMP group.",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "default"
            },
            "required": true
          },
          {
            "name": "valid_until",
            "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use /public/time method to obtain current server time.",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "quotes",
            "in": "query",
            "description": "List of quotes.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "instrument_name": {
                    "description": "The name of the instrument."
                  },
                  "quote_set_id": {
                    "description": "User-defined label that can be used for targeted cancels using private/cancel_quotes."
                  },
                  "ask": {
                    "description": "Order details for the ask. If not provided, `bid` must be present."
                  },
                  "bid": {
                    "description": "Order details for the bid. If not provided, `ask` must be present."
                  }
                }
              },
              "example": [
                {
                  "instrument_name": "BTC-PERPETUAL",
                  "quote_set_id": "futures",
                  "ask": {
                    "price": 43800,
                    "amount": 10
                  },
                  "bid": {
                    "price": 43700,
                    "amount": 10
                  }
                },
                {
                  "instrument_name": "BTC-22DEC23-41600-C",
                  "quote_set_id": "options",
                  "ask": {
                    "price": 0.05,
                    "amount": 1
                  },
                  "bid": {
                    "price": 0.04,
                    "amount": 1
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateMassQuoteResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7859,
                      "result": {
                        "errors": [
                          {
                            "instrument_name": "BTC-PERPETUAL",
                            "side": "bid",
                            "error": {
                              "message": "price_too_high 43666.4288",
                              "code": 10007
                            }
                          }
                        ],
                        "orders": [
                          {
                            "is_liquidation": false,
                            "reduce_only": false,
                            "risk_reducing": false,
                            "last_update_timestamp": 1703162550180,
                            "creation_timestamp": 1703162478689,
                            "filled_amount": 0,
                            "average_price": 0,
                            "order_type": "limit",
                            "order_state": "open",
                            "quote": true,
                            "quote_set_id": "options",
                            "quote_id": "1",
                            "post_only": false,
                            "replaced": false,
                            "mmp_group": "default",
                            "web": false,
                            "mmp": true,
                            "api": false,
                            "instrument_name": "BTC-22DEC23-41600-C",
                            "order_id": "6653852",
                            "max_show": 1,
                            "time_in_force": "good_til_cancelled",
                            "price": 0.04,
                            "direction": "buy",
                            "amount": 1,
                            "label": ""
                          },
                          {
                            "is_liquidation": false,
                            "reduce_only": false,
                            "risk_reducing": false,
                            "last_update_timestamp": 1703162550180,
                            "creation_timestamp": 1703162478689,
                            "filled_amount": 0,
                            "average_price": 0,
                            "order_type": "limit",
                            "order_state": "open",
                            "quote": true,
                            "quote_set_id": "options",
                            "quote_id": "1",
                            "post_only": false,
                            "replaced": false,
                            "mmp_group": "default",
                            "web": false,
                            "mmp": true,
                            "api": false,
                            "instrument_name": "BTC-22DEC23-41600-C",
                            "order_id": "6653853",
                            "max_show": 1,
                            "time_in_force": "good_til_cancelled",
                            "price": 0.05,
                            "direction": "sell",
                            "amount": 1,
                            "label": ""
                          },
                          {
                            "is_liquidation": false,
                            "reduce_only": false,
                            "risk_reducing": false,
                            "last_update_timestamp": 1703162550180,
                            "creation_timestamp": 1703162478689,
                            "filled_amount": 0,
                            "average_price": 0,
                            "order_type": "limit",
                            "order_state": "open",
                            "quote": true,
                            "quote_set_id": "futures",
                            "quote_id": "1",
                            "post_only": false,
                            "replaced": false,
                            "mmp_group": "default",
                            "web": false,
                            "mmp": true,
                            "api": false,
                            "instrument_name": "BTC-PERPETUAL",
                            "order_id": "6653855",
                            "max_show": 10,
                            "time_in_force": "good_til_cancelled",
                            "price": 43800,
                            "direction": "sell",
                            "amount": 10,
                            "label": ""
                          }
                        ],
                        "trades": []
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Place buy and/or sell orders on one or more instruments. Cancel-on-Disconnect must be enabled (see private/enable_cancel_on_disconnect), otherwise the request will return an error. This endpoint can only be used after approval from the administrators. **📖 Related Support Article:** Mass Quotes Specifications",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7859,
                    "method": "private/mass_quote",
                    "params": {
                      "detailed": true,
                      "quote_id": "1",
                      "mmp_group": "default",
                      "quotes": [
                        {
                          "instrument_name": "BTC-PERPETUAL",
                          "quote_set_id": "futures",
                          "ask": {
                            "price": 43800,
                            "amount": 10
                          },
                          "bid": {
                            "price": 43700,
                            "amount": 10
                          }
                        },
                        {
                          "instrument_name": "BTC-22DEC23-41600-C",
                          "quote_set_id": "options",
                          "ask": {
                            "price": 0.05,
                            "amount": 1
                          },
                          "bid": {
                            "price": 0.04,
                            "amount": 1
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/mass_quote",
            "og:title": "private/mass_quote"
          }
        }
      }
    },
    "/private/move_positions": {
      "get": {
        "parameters": [
          {
            "description": "The currency symbol",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "source_uid",
            "description": "Id of source subaccount. Can be found in `My Account >> Subaccounts` tab",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": true
          },
          {
            "name": "target_uid",
            "description": "Id of target subaccount. Can be found in `My Account >> Subaccounts` tab",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": true
          },
          {
            "description": "List of trades for position move",
            "in": "query",
            "name": "trades",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Array item with 3 properties"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetmovePositions200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3,
                      "result": [
                        {
                          "target_uid": 23,
                          "source_uid": 3,
                          "price": 0.1223,
                          "instrument_name": "BTC-28JAN22-32500-C",
                          "direction": "sell",
                          "amount": 0.1
                        },
                        {
                          "target_uid": 23,
                          "source_uid": 3,
                          "price": 35800,
                          "instrument_name": "BTC-PERPETUAL",
                          "direction": "buy",
                          "amount": 110
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Moves positions from source subaccount to target subaccount <p><b>Note:</b><br>In rare cases, the request may return an `internal_server_error`. This does not necessarily mean the operation failed entirely. Part or all of the position transfer might have still been processed successfully.</p>",
        "tags": [
          "Trading",
          "Matching Engine",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3,
                    "method": "private/move_positions",
                    "params": {
                      "currency": "BTC",
                      "source_uid": 3,
                      "target_uid": 23,
                      "trades": [
                        {
                          "instrument_name": "BTC-PERPETUAL",
                          "price": "35800",
                          "amount": "110"
                        },
                        {
                          "instrument_name": "BTC-28JAN22-32500-C",
                          "amount": "0.1"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/move_positions",
            "og:title": "private/move_positions"
          }
        }
      }
    },
    "/private/get_deposits": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "description": "The offset for pagination, default - `0`",
            "in": "query",
            "required": false,
            "schema": {
              "example": 10,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetDepositsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 5611,
                      "result": {
                        "count": 1,
                        "data": [
                          {
                            "address": "2N35qDKDY22zmJq9eSyiAerMD4enJ1xx6ax",
                            "amount": 5,
                            "currency": "BTC",
                            "received_timestamp": 1549295017670,
                            "state": "completed",
                            "transaction_id": "230669110fdaf0a0dbcdc079b6b8b43d5af29cc73683835b9bc6b3406c065fda",
                            "updated_timestamp": 1549295130159
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest users deposits **📖 Related Support Article:** Deposits",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 5611,
                    "method": "private/get_deposits",
                    "params": {
                      "currency": "BTC",
                      "count": 10,
                      "offset": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_deposits",
            "og:title": "private/get_deposits"
          }
        }
      }
    },
    "/private/create_deposit_address": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetcreateDepositAddress200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7538,
                      "result": {
                        "address": "2N8udZGBc1hLRCFsU9kGwMPpmYUwMFTuCwB",
                        "creation_timestamp": 1550575165170,
                        "currency": "BTC",
                        "type": "deposit"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates deposit address in currency",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7538,
                    "method": "private/create_deposit_address",
                    "params": {
                      "currency": "BTC"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/create_deposit_address",
            "og:title": "private/create_deposit_address"
          }
        }
      }
    },
    "/private/get_current_deposit_address": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetCurrentDepositAddress200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 3461,
                      "result": {
                        "address": "2N8udZGBc1hLRCFsU9kGwMPpmYUwMFTuCwB",
                        "creation_timestamp": 1550575165170,
                        "currency": "BTC",
                        "type": "deposit"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve deposit address for currency",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 3461,
                    "method": "private/get_current_deposit_address",
                    "params": {
                      "currency": "BTC"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_current_deposit_address",
            "og:title": "private/get_current_deposit_address"
          }
        }
      }
    },
    "/private/withdraw": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "address",
            "description": "Address in currency format, it must be in address book",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "amount",
            "description": "Amount of funds to be withdrawn",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "priority",
            "description": "Withdrawal priority, optional for BTC, default: `high`",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "insane",
                "extreme_high",
                "very_high",
                "high",
                "mid",
                "low",
                "very_low"
              ]
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateWithdrawResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 6931,
                      "result": {
                        "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
                        "amount": 0.4,
                        "confirmed_timestamp": null,
                        "created_timestamp": 1550574558607,
                        "currency": "BTC",
                        "fee": 0.0001,
                        "id": 4,
                        "priority": 1,
                        "state": "unconfirmed",
                        "transaction_id": null,
                        "updated_timestamp": 1550574558607
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new withdrawal request **📖 Related Support Article:** Withdrawals",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 6931,
                    "method": "private/withdraw",
                    "params": {
                      "currency": "BTC",
                      "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
                      "amount": 0.4,
                      "priority": "mid"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/withdraw",
            "og:title": "private/withdraw"
          }
        }
      }
    },
    "/private/cancel_withdrawal": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "description": "The withdrawal id",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetcancelWithdrawal200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7420,
                      "result": {
                        "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
                        "amount": 0.5,
                        "confirmed_timestamp": null,
                        "created_timestamp": 1550571443070,
                        "currency": "BTC",
                        "fee": 0.0001,
                        "id": 1,
                        "priority": 0.15,
                        "state": "cancelled",
                        "transaction_id": null,
                        "updated_timestamp": 1550571443070
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Cancels withdrawal request",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7420,
                    "method": "private/cancel_withdrawal",
                    "params": {
                      "currency": "BTC",
                      "id": 1
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_withdrawal",
            "og:title": "private/cancel_withdrawal"
          }
        }
      }
    },
    "/private/get_withdrawals": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "description": "The offset for pagination, default - `0`",
            "in": "query",
            "required": false,
            "schema": {
              "example": 10,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetWithdrawalsResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 2745,
                      "result": {
                        "count": 1,
                        "data": [
                          {
                            "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
                            "amount": 0.5,
                            "confirmed_timestamp": null,
                            "created_timestamp": 1550571443070,
                            "currency": "BTC",
                            "fee": 0.0001,
                            "id": 1,
                            "priority": 0.15,
                            "state": "unconfirmed",
                            "transaction_id": null,
                            "updated_timestamp": 1550571443070
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the latest users withdrawals",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 2745,
                    "method": "private/get_withdrawals",
                    "params": {
                      "currency": "BTC",
                      "count": 10,
                      "offset": 0
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_withdrawals",
            "og:title": "private/get_withdrawals"
          }
        }
      }
    },
    "/private/get_address_book": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/wallet_currency"
            }
          },
          {
            "name": "type",
            "description": "Address book type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/address_book_type"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetgetAddressBook200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 31,
                      "result": [
                        {
                          "waiting_timestamp": 1720252232860,
                          "creation_timestamp": 1719993033041,
                          "requires_confirmation_change": false,
                          "personal": true,
                          "info_required": false,
                          "beneficiary_first_name": "John",
                          "beneficiary_last_name": "Doe",
                          "beneficiary_address": "NL, Amsterdam, Street, 1",
                          "requires_confirmation": true,
                          "currency": "BTC",
                          "agreed": true,
                          "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
                          "type": "withdrawal",
                          "status": "waiting",
                          "label": "Main Address"
                        },
                        {
                          "waiting_timestamp": 1720252232760,
                          "creation_timestamp": 1719993032041,
                          "requires_confirmation_change": false,
                          "personal": true,
                          "info_required": false,
                          "beneficiary_company_name": "MyCompany",
                          "beneficiary_address": "NL, Haarlem, Street, 5",
                          "requires_confirmation": false,
                          "currency": "BTC",
                          "agreed": true,
                          "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj",
                          "type": "withdrawal",
                          "status": "waiting",
                          "label": "One More Address"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves address book of given type",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 31,
                    "method": "private/get_address_book",
                    "params": {
                      "currency": "BTC",
                      "type": "withdrawal"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_address_book",
            "og:title": "private/get_address_book"
          }
        }
      }
    },
    "/private/add_to_address_book": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/wallet_currency"
            }
          },
          {
            "name": "type",
            "description": "Address book type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/address_book_type"
            },
            "required": true
          },
          {
            "name": "address",
            "description": "Address in currency format",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "label",
            "description": "Label of the address book entry",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/address_label"
            },
            "required": true
          },
          {
            "name": "beneficiary_vasp_name",
            "description": "Name of beneficiary VASP",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_name"
            },
            "required": true
          },
          {
            "name": "beneficiary_vasp_did",
            "description": "DID of beneficiary VASP",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_did"
            },
            "required": true
          },
          {
            "name": "beneficiary_vasp_website",
            "description": "Website of the beneficiary VASP. Required if the address book entry is associated with a VASP that is not included in the list of known VASPs",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_website"
            },
            "required": false
          },
          {
            "name": "beneficiary_first_name",
            "description": "First name of beneficiary (if beneficiary is a person)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_first_name"
            },
            "required": false
          },
          {
            "name": "beneficiary_last_name",
            "description": "First name of beneficiary (if beneficiary is a person)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_last_name"
            },
            "required": false
          },
          {
            "name": "beneficiary_company_name",
            "description": "Beneficiary company name (if beneficiary is a company)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_company_name"
            },
            "required": false
          },
          {
            "name": "beneficiary_address",
            "description": "Geographical address of the beneficiary",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_address"
            },
            "required": true
          },
          {
            "name": "agreed",
            "description": "Indicates that the user agreed to shared provided information with 3rd parties",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/agree_to_share_with_3rd_party"
            },
            "required": true
          },
          {
            "name": "personal",
            "description": "The user confirms that he provided address belongs to him and he has access to it via an un-hosted wallet software",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/personal_wallet"
            },
            "required": true
          },
          {
            "name": "extra_currencies",
            "description": "The user can pass a list of currencies to add the address for. It is currently available ONLY for ERC20 currencies. Without passing this paramater for an ERC20 currency, the address will be added to ALL of the ERC20 currencies.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/extra_currencies"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateAddToAddressBookResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 42,
                      "result": {
                        "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj",
                        "creation_timestamp": 1536569522277,
                        "currency": "BTC",
                        "type": "withdrawal",
                        "label": "Main address",
                        "beneficiary_vasp_name": "Money`s Gone",
                        "beneficiary_vasp_did": "did:example:123456789abcdefghi",
                        "beneficiary_first_name": "John",
                        "beneficiary_last_name": "Doe",
                        "beneficiary_address": "NL, Amsterdam, Street, 1",
                        "agreed": true,
                        "personal": false,
                        "info_required": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Adds new entry to address book of given type",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 42,
                    "method": "private/add_to_address_book",
                    "params": {
                      "currency": "BTC",
                      "type": "withdrawal",
                      "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj",
                      "label": "Main address",
                      "beneficiary_vasp_name": "Money`s Gone",
                      "beneficiary_vasp_did": "did:example:123456789abcdefghi",
                      "beneficiary_first_name": "John",
                      "beneficiary_last_name": "Doe",
                      "beneficiary_address": "NL, Amsterdam, Street, 1",
                      "agreed": true,
                      "personal": false
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/add_to_address_book",
            "og:title": "private/add_to_address_book"
          }
        }
      }
    },
    "/private/remove_from_address_book": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/wallet_currency"
            }
          },
          {
            "name": "type",
            "description": "Address book type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/address_book_type"
            },
            "required": true
          },
          {
            "name": "address",
            "description": "Address in currency format, it must be in address book",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateRemoveFromAddressBookResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 42,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Removes address book entry",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 42,
                    "method": "private/remove_from_address_book",
                    "params": {
                      "currency": "BTC",
                      "type": "transfer",
                      "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/remove_from_address_book",
            "og:title": "private/remove_from_address_book"
          }
        }
      }
    },
    "/private/update_in_address_book": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/wallet_currency"
            }
          },
          {
            "name": "type",
            "description": "Address book type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/address_book_type"
            },
            "required": true
          },
          {
            "name": "address",
            "description": "Address in currency format, it must be in address book",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "beneficiary_vasp_name",
            "description": "Name of beneficiary VASP",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_name"
            },
            "required": true
          },
          {
            "name": "beneficiary_vasp_did",
            "description": "DID of beneficiary VASP",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_did"
            },
            "required": true
          },
          {
            "name": "beneficiary_vasp_website",
            "description": "Website of the beneficiary VASP. Required if the address book entry is associated with a VASP that is not included in the list of known VASPs",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_website"
            },
            "required": false
          },
          {
            "name": "beneficiary_first_name",
            "description": "First name of beneficiary (if beneficiary is a person)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_first_name"
            },
            "required": false
          },
          {
            "name": "beneficiary_last_name",
            "description": "First name of beneficiary (if beneficiary is a person)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_last_name"
            },
            "required": false
          },
          {
            "name": "beneficiary_company_name",
            "description": "Beneficiary company name (if beneficiary is a company)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_company_name"
            },
            "required": false
          },
          {
            "name": "beneficiary_address",
            "description": "Geographical address of the beneficiary",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_address"
            },
            "required": true
          },
          {
            "name": "agreed",
            "description": "Indicates that the user agreed to shared provided information with 3rd parties",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/agree_to_share_with_3rd_party"
            },
            "required": true
          },
          {
            "name": "personal",
            "description": "The user confirms that he provided address belongs to him and he has access to it via an un-hosted wallet software",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/personal_wallet"
            },
            "required": true
          },
          {
            "name": "label",
            "description": "Label of the address book entry",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/address_label"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateUpdateInAddressBookResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 42,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Allows to provide beneficiary information for the address",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 42,
                    "method": "private/update_in_address_book",
                    "params": {
                      "currency": "BTC",
                      "type": "withdrawal",
                      "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj",
                      "label": "Main address",
                      "beneficiary_vasp_name": "Money`s Gone",
                      "beneficiary_vasp_did": "did:example:123456789abcdefghi",
                      "beneficiary_first_name": "John",
                      "beneficiary_last_name": "Doe",
                      "beneficiary_address": "NL, Amsterdam, Street, 1",
                      "agreed": true,
                      "personal": false
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/update_in_address_book",
            "og:title": "private/update_in_address_book"
          }
        }
      }
    },
    "/private/save_address_beneficiary": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/wallet_currency"
            }
          },
          {
            "name": "address",
            "description": "Address in currency format",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag",
            "description": "Tag for XRP addresses",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "agreed",
            "description": "Indicates that the user agreed to shared provided information with 3rd parties",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/agree_to_share_with_3rd_party"
            },
            "required": true
          },
          {
            "name": "personal",
            "description": "The user confirms that he provided address belongs to him and he has access to it via an un-hosted wallet software",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/personal_wallet"
            },
            "required": true
          },
          {
            "name": "unhosted",
            "description": "Indicates if the address belongs to an unhosted wallet",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": true
          },
          {
            "name": "beneficiary_vasp_name",
            "description": "Name of beneficiary VASP",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_name"
            },
            "required": true
          },
          {
            "name": "beneficiary_vasp_did",
            "description": "DID of beneficiary VASP",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_did"
            },
            "required": true
          },
          {
            "name": "beneficiary_vasp_website",
            "description": "Website of the beneficiary VASP. Required if the address book entry is associated with a VASP that is not included in the list of known VASPs",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_website"
            },
            "required": false
          },
          {
            "name": "beneficiary_first_name",
            "description": "First name of beneficiary (if beneficiary is a person)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_first_name"
            },
            "required": false
          },
          {
            "name": "beneficiary_last_name",
            "description": "First name of beneficiary (if beneficiary is a person)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_last_name"
            },
            "required": false
          },
          {
            "name": "beneficiary_company_name",
            "description": "Beneficiary company name (if beneficiary is a company)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_company_name"
            },
            "required": false
          },
          {
            "name": "beneficiary_address",
            "description": "Geographical address of the beneficiary",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_address"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateSaveAddressBeneficiaryResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 42,
                      "result": {
                        "currency": "BTC",
                        "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj",
                        "user_id": 1016,
                        "agreed": true,
                        "personal": false,
                        "unhosted": false,
                        "beneficiary_vasp_name": "Money's Gone",
                        "beneficiary_vasp_did": "did:example:123456789abcdefghi",
                        "beneficiary_vasp_website": "https://example.com",
                        "beneficiary_first_name": "John",
                        "beneficiary_last_name": "Doe",
                        "beneficiary_company_name": "Example Corp",
                        "beneficiary_address": "NL, Amsterdam, Street, 1",
                        "created": 1536569522277,
                        "updated": 1536569522277
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Saves address beneficiary information",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 42,
                    "method": "private/save_address_beneficiary",
                    "params": {
                      "currency": "BTC",
                      "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj",
                      "agreed": true,
                      "personal": false,
                      "unhosted": false,
                      "beneficiary_vasp_name": "Money's Gone",
                      "beneficiary_vasp_did": "did:example:123456789abcdefghi",
                      "beneficiary_vasp_website": "https://example.com",
                      "beneficiary_first_name": "John",
                      "beneficiary_last_name": "Doe",
                      "beneficiary_company_name": "Example Corp",
                      "beneficiary_address": "NL, Amsterdam, Street, 1"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/save_address_beneficiary",
            "og:title": "private/save_address_beneficiary"
          }
        }
      }
    },
    "/private/get_address_beneficiary": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/wallet_currency"
            }
          },
          {
            "name": "address",
            "description": "Address in currency format",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag",
            "description": "Tag for XRP addresses",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetAddressBeneficiaryResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 42,
                      "result": {
                        "currency": "BTC",
                        "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj",
                        "user_id": 1016,
                        "agreed": true,
                        "personal": false,
                        "unhosted": false,
                        "beneficiary_vasp_name": "Money's Gone",
                        "beneficiary_vasp_did": "did:example:123456789abcdefghi",
                        "beneficiary_vasp_website": "https://example.com",
                        "beneficiary_first_name": "John",
                        "beneficiary_last_name": "Doe",
                        "beneficiary_company_name": "Example Corp",
                        "beneficiary_address": "NL, Amsterdam, Street, 1",
                        "created": 1536569522277,
                        "updated": 1536569522277
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves address beneficiary information",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 42,
                    "method": "private/get_address_beneficiary",
                    "params": {
                      "currency": "BTC",
                      "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_address_beneficiary",
            "og:title": "private/get_address_beneficiary"
          }
        }
      }
    },
    "/private/delete_address_beneficiary": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/wallet_currency"
            }
          },
          {
            "name": "address",
            "description": "Address in currency format",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag",
            "description": "Tag for XRP addresses",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateDeleteAddressBeneficiaryResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 42,
                      "result": "ok"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Deletes address beneficiary information",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 42,
                    "method": "private/delete_address_beneficiary",
                    "params": {
                      "currency": "BTC",
                      "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/delete_address_beneficiary",
            "og:title": "private/delete_address_beneficiary"
          }
        }
      }
    },
    "/private/list_address_beneficiaries": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": false,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/wallet_currency"
            }
          },
          {
            "name": "address",
            "description": "Address in currency format",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "tag",
            "description": "Tag for XRP addresses",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "created_before",
            "description": "Filter by creation timestamp (before)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            },
            "required": false
          },
          {
            "name": "created_after",
            "description": "Filter by creation timestamp (after)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            },
            "required": false
          },
          {
            "name": "updated_before",
            "description": "Filter by update timestamp (before)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            },
            "required": false
          },
          {
            "name": "updated_after",
            "description": "Filter by update timestamp (after)",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/timestamp"
            },
            "required": false
          },
          {
            "name": "personal",
            "description": "Filter by personal wallet flag",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "unhosted",
            "description": "Filter by unhosted wallet flag",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "beneficiary_vasp_name",
            "description": "Filter by beneficiary VASP name",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_name"
            },
            "required": false
          },
          {
            "name": "beneficiary_vasp_did",
            "description": "Filter by beneficiary VASP DID",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_did"
            },
            "required": false
          },
          {
            "name": "beneficiary_vasp_website",
            "description": "Website of the beneficiary VASP. Required if the address book entry is associated with a VASP that is not included in the list of known VASPs",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/beneficiary_vasp_website"
            },
            "required": false
          },
          {
            "name": "limit",
            "description": "Maximum number of results to return",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "required": false
          },
          {
            "name": "continuation",
            "description": "Continuation token for pagination",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateListAddressBeneficiariesResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 42,
                      "result": {
                        "data": [
                          {
                            "currency": "BTC",
                            "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj",
                            "user_id": 1026,
                            "agreed": true,
                            "personal": false,
                            "unhosted": false,
                            "beneficiary_vasp_name": "Money's Gone",
                            "beneficiary_vasp_did": "did:example:123456789abcdefghi",
                            "beneficiary_vasp_website": "https://example.com",
                            "beneficiary_first_name": "John",
                            "beneficiary_last_name": "Doe",
                            "beneficiary_company_name": "Example Corp",
                            "beneficiary_address": "NL, Amsterdam, Street, 1",
                            "created": 1536569522277,
                            "updated": 1536569522277
                          }
                        ],
                        "continuation": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT",
                        "count": 1
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Lists address beneficiaries with optional filtering and pagination",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 42,
                    "method": "private/list_address_beneficiaries",
                    "params": {
                      "currency": "BTC",
                      "limit": 10
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/list_address_beneficiaries",
            "og:title": "private/list_address_beneficiaries"
          }
        }
      }
    },
    "/private/submit_transfer_to_subaccount": {
      "get": {
        "description": "Transfer funds to subaccount.",
        "tags": [
          "Wallet",
          "Private"
        ],
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "amount",
            "description": "Amount of funds to be transferred",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "destination",
            "description": "Id of destination subaccount. Can be found in `My Account >> Subaccounts` tab",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetsubmitTransferToSubaccount200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 210,
                      "result": {
                        "updated_timestamp": 1550226218504,
                        "type": "subaccount",
                        "state": "confirmed",
                        "other_side": "MySubAccount",
                        "id": 1,
                        "direction": "payment",
                        "currency": "ETH",
                        "created_timestamp": 1550226218504,
                        "amount": 12.1234
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 210,
                    "method": "private/submit_transfer_to_subaccount",
                    "params": {
                      "currency": "ETH",
                      "amount": 12.1234,
                      "destination": 20
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/submit_transfer_to_subaccount",
            "og:title": "private/submit_transfer_to_subaccount"
          }
        }
      }
    },
    "/private/submit_transfer_between_subaccounts": {
      "get": {
        "description": "Transfer funds between two (sub)accounts.",
        "tags": [
          "Wallet",
          "Private"
        ],
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "amount",
            "description": "Amount of funds to be transferred",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "destination",
            "description": "Id of destination subaccount. Can be found in `My Account >> Subaccounts` tab",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": true
          },
          {
            "name": "source",
            "description": "Id of the source (sub)account. Can be found in `My Account >> Subaccounts` tab. By default, it is the Id of the account which made the request. However, if a different \"source\" is specified, the user must possess the mainaccount scope, and only other subaccounts can be designated as the source.",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetsubmitTransferBetweenSubaccounts200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 210,
                      "result": {
                        "updated_timestamp": 1550226218504,
                        "type": "subaccount",
                        "state": "confirmed",
                        "other_side": "MySubAccount",
                        "id": 1,
                        "direction": "payment",
                        "currency": "ETH",
                        "created_timestamp": 1550226218504,
                        "amount": 12.1234
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 210,
                    "method": "private/submit_transfer_between_subaccounts",
                    "params": {
                      "currency": "ETH",
                      "amount": 12.1234,
                      "destination": 20,
                      "source": 10
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/submit_transfer_between_subaccounts",
            "og:title": "private/submit_transfer_between_subaccounts"
          }
        }
      }
    },
    "/private/submit_transfer_to_user": {
      "get": {
        "description": "Transfer funds to another user.",
        "tags": [
          "Wallet",
          "Private"
        ],
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "amount",
            "description": "Amount of funds to be transferred",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": true
          },
          {
            "name": "destination",
            "description": "Destination wallet's address taken from address book",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetsubmitTransferToUser200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9421,
                      "result": {
                        "updated_timestamp": 1550232862350,
                        "type": "user",
                        "state": "prepared",
                        "other_side": "0x4aa0753d798d668056920094d65321a8e8913e26",
                        "id": 3,
                        "direction": "payment",
                        "currency": "ETH",
                        "created_timestamp": 1550232862350,
                        "amount": 13.456
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9421,
                    "method": "private/submit_transfer_to_user",
                    "params": {
                      "currency": "ETH",
                      "amount": 13.456,
                      "destination": "0x4aa0753d798d668056920094d65321a8e8913e26"
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/submit_transfer_to_user",
            "og:title": "private/submit_transfer_to_user"
          }
        }
      }
    },
    "/private/get_transfers": {
      "get": {
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "count",
            "description": "Number of requested items, default - `10`, maximum - `1000`",
            "required": false,
            "in": "query",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "description": "The offset for pagination, default - `0`",
            "in": "query",
            "required": false,
            "schema": {
              "example": 10,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetTransfersResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 7606,
                      "result": {
                        "count": 2,
                        "data": [
                          {
                            "amount": 0.2,
                            "created_timestamp": 1550579457727,
                            "currency": "BTC",
                            "direction": "payment",
                            "id": 2,
                            "other_side": "2MzyQc5Tkik61kJbEpJV5D5H9VfWHZK9Sgy",
                            "state": "prepared",
                            "type": "user",
                            "updated_timestamp": 1550579457727
                          },
                          {
                            "amount": 0.3,
                            "created_timestamp": 1550579255800,
                            "currency": "BTC",
                            "direction": "payment",
                            "id": 1,
                            "other_side": "new_user_1_1",
                            "state": "confirmed",
                            "type": "subaccount",
                            "updated_timestamp": 1550579255800
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve the user's transfers list",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 7606,
                    "method": "private/get_transfers",
                    "params": {
                      "currency": "BTC",
                      "count": 10
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_transfers",
            "og:title": "private/get_transfers"
          }
        }
      }
    },
    "/private/cancel_transfer_by_id": {
      "get": {
        "description": "Cancel transfer",
        "tags": [
          "Wallet",
          "Private"
        ],
        "parameters": [
          {
            "name": "currency",
            "description": "The currency symbol",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/currency"
            }
          },
          {
            "name": "id",
            "description": "Id of transfer",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/transfer_id"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetcancelTransferById200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 9187,
                      "result": {
                        "amount": 0.2,
                        "created_timestamp": 1550579457727,
                        "currency": "BTC",
                        "direction": "payment",
                        "id": 2,
                        "other_side": "2MzyQc5Tkik61kJbEpJV5D5H9VfWHZK9Sgy",
                        "state": "cancelled",
                        "type": "user",
                        "updated_timestamp": 1550579457727
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 9187,
                    "method": "private/cancel_transfer_by_id",
                    "params": {
                      "currency": "BTC",
                      "id": 2
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/cancel_transfer_by_id",
            "og:title": "private/cancel_transfer_by_id"
          }
        }
      }
    },
    "/private/get_reward_eligibility": {
      "get": {
        "description": "Returns reward eligibility status and APR data for all supported currencies. **📖 Related Support Article:** [Yield reward-bearing coins](https://support.deribit.com/hc/en-us/articles/26525792475677-Yield-reward-bearing-coins)",
        "tags": [
          "Wallet",
          "Private"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PrivateGetRewardEligibilityResponse",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "usdc": {
                          "eligibility_status": "non_eligible",
                          "apr_sma7": 4
                        },
                        "usde": {
                          "eligibility_status": "eligible",
                          "apr_sma7": 7
                        },
                        "buidl": {
                          "eligibility_status": "eligible",
                          "apr_sma7": 3.943606
                        },
                        "steth": {
                          "eligibility_status": "eligible",
                          "apr_sma7": 2.692285714285714
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/get_reward_eligibility",
                    "params": {}
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/get_reward_eligibility",
            "og:title": "private/get_reward_eligibility"
          }
        }
      }
    },
    "/private/set_clearance_originator": {
      "get": {
        "parameters": [
          {
            "description": "Id of the deposit",
            "in": "query",
            "name": "deposit_id",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currency": {
                  "$ref": "#/components/schemas/currency"
                },
                "user_id": {
                  "type": "integer",
                  "example": 1
                },
                "address": {
                  "type": "string"
                },
                "tx_hash": {
                  "type": "string"
                }
              }
            }
          },
          {
            "description": "Information about the originator of the deposit",
            "in": "query",
            "name": "originator",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "is_personal": {
                  "type": "boolean"
                },
                "company_name": {
                  "type": "string"
                },
                "first_name": {
                  "type": "string"
                },
                "last_name": {
                  "type": "string"
                },
                "address": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/GetsetClearanceOriginator200response",
            "content": {
              "application/json": {
                "examples": {
                  "response": {
                    "description": "Response example",
                    "value": {
                      "jsonrpc": "2.0",
                      "id": 1,
                      "result": {
                        "currency": "BTC",
                        "user_id": 123,
                        "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
                        "amount": 0.4,
                        "state": "completed",
                        "transaction_id": "230669110fdaf0a0dbcdc079b6b8b43d5af29cc73683835b9bc6b3406c065fda",
                        "source_address": "A3BqqD5GRJ8wHy1PYyCXTe9ke5226Fha123",
                        "received_timestamp": 1550574558607,
                        "updated_timestamp": 1550574558807,
                        "note": "Note",
                        "clearance_state": "in_progress"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Sets originator of the deposit",
        "tags": [
          "Wallet",
          "Private"
        ],
        "requestBody": {
          "description": "JSON-RPC request body",
          "content": {
            "application/json": {
              "examples": {
                "request": {
                  "description": "Complete JSON-RPC request for this method",
                  "value": {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "private/set_clearance_originator",
                    "params": {
                      "deposit_id": {
                        "currency": "BTC",
                        "user_id": 123,
                        "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
                        "tx_hash": "230669110fdaf0a0dbcdc079b6b8b43d5af29cc73683835b9bc6b3406c065fda"
                      },
                      "originator": {
                        "is_personal": false,
                        "first_name": "First",
                        "last_name": "Last",
                        "company_name": "Company Name",
                        "address": "NL, Amsterdam, Street, 1"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-mint": {
          "metadata": {
            "title": "private/set_clearance_originator",
            "og:title": "private/set_clearance_originator"
          }
        }
      }
    }
  },
  "components": {
    "x-sections": {
      "subscriptions": {
        "introduction": "#Subscriptions The [subscribe](#private-subscribe) method can be used to subscribe to one or more *channels*. This section provides an overview of the channels and the notifications that the subscriber will receive for each of those channels. In most cases the channel name is constructed from a couple of elements. This makes it possible to specify exactly which information is required, and/or the frequency or aggregation level. These elements are considered parameters for the subscription. For example, when subscribing to the channel <code>book.BTC-27JUL18.10.20.100ms</code>, the element <code>BTC-27JUL18</code> specifies that the name of the instrument (see [naming](#naming)), <code>10</code> means that the results should be grouped to that precision, etc. As described in [notifications](#notifications), response data includes fields required by JSON-RPC and part dedicated for subscription data. <p> <table> <thead> <tr> <th>Name</th> <th>Type</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>jsonrpc</td> <td>string</td> <td>The JSON-RPC version (2.0)</td> </tr> <tr> <td>method</td> <td>string</td> <td>Here it's always <code>subscription</code></td> </tr> <tr> <td>params</td> <td><em>object</em></td> <td></td> </tr> <tr> <td>&nbsp;&nbsp;›&nbsp;&nbsp;channel</td> <td>string</td> <td>The same channel as given when subscribing to notifications</td> </tr> <tr> <td>&nbsp;&nbsp;›&nbsp;&nbsp;label</td> <td>string</td> <td>The same label as given when subscribing to notifications (present only when provided in <code>private/subscribe</code>; only for private channels)</td> </tr> <tr> <td>&nbsp;&nbsp;›&nbsp;&nbsp;data</td> <td><em>object</em></td> <td>Data specific for the channel</td> </tr> </tbody> </table> </p> For all the following channel types only specific <code>data</code> part will be described."
      }
    },
    "parameters": {
      "continuation": {
        "name": "continuation",
        "description": "Continuation token for pagination",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT"
        }
      },
      "continuation_as_integer": {
        "name": "continuation",
        "description": "Continuation token for pagination",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "example": 429946
        }
      },
      "instrument_name": {
        "name": "instrument_name",
        "description": "Instrument name",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/instrument_name"
        }
      },
      "combo_id": {
        "name": "combo_id",
        "description": "Combo ID",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/combo_id"
        }
      },
      "combo_trades": {
        "description": "List of trades used to create a combo",
        "in": "query",
        "name": "trades",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Array item with 3 properties"
          }
        }
      },
      "index_name": {
        "name": "index_name",
        "required": true,
        "in": "query",
        "description": "Index identifier, matches (base) cryptocurrency with quote currency",
        "schema": {
          "$ref": "#/components/schemas/index_name"
        }
      },
      "index_name_for_dvol": {
        "name": "index_name",
        "description": "Index identifier supported for DVOL",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/index_name_for_dvol"
        }
      },
      "index_name_derivative": {
        "name": "index_name",
        "required": true,
        "in": "query",
        "description": "Index identifier of derivative instrument on the platform",
        "schema": {
          "$ref": "#/components/schemas/index_name_derivative"
        }
      },
      "index_name_derivative_optional": {
        "name": "index_name",
        "required": false,
        "in": "query",
        "description": "Index identifier of derivative instrument on the platform; skipping this parameter will return all configurations",
        "schema": {
          "$ref": "#/components/schemas/index_name_derivative"
        }
      },
      "type_of_supported_index": {
        "name": "type",
        "required": false,
        "in": "query",
        "description": "Type of a cryptocurrency price index",
        "schema": {
          "type": "string",
          "enum": [
            "all",
            "spot",
            "derivative"
          ]
        }
      },
      "subscription_interval": {
        "name": "interval",
        "description": "Frequency of notifications. Events will be aggregated over this interval. The value `raw` means no aggregation will be applied **(Please note that `raw` interval is only available to authorized users)**",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "agg2",
            "100ms",
            "raw"
          ]
        },
        "required": true
      },
      "subscription_interval_non_raw": {
        "name": "interval",
        "description": "Frequency of notifications. Events will be aggregated over this interval.",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "100ms",
            "agg2"
          ]
        },
        "required": true
      },
      "optional_instrument_name": {
        "name": "instrument_name",
        "description": "Instrument name",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/instrument_name"
        }
      },
      "instrument_name_options_only": {
        "name": "instrument_name",
        "description": "Instrument name - options only",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/instrument_name"
        }
      },
      "currency": {
        "name": "currency",
        "description": "The currency symbol",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/currency"
        }
      },
      "wallet_currency": {
        "name": "currency",
        "description": "The currency symbol",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/wallet_currency"
        }
      },
      "currency_pair": {
        "name": "currency_pair",
        "description": "The currency pair symbol",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/index_name"
        }
      },
      "currency_pair_optional": {
        "name": "currency_pair",
        "description": "The currency pair symbol",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/index_name"
        }
      },
      "expiration": {
        "name": "expiration",
        "description": "The timestamp of expiration (milliseconds since the Unix epoch)",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "currency_with_any": {
        "name": "currency",
        "description": "The currency symbol or `\"any\"` for all",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/currency_with_any"
        }
      },
      "currency_with_any_and_list": {
        "name": "currency",
        "description": "The currency symbol, list of currency symbols or `\"any\"` for all",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/currency_with_any_and_list"
        }
      },
      "currency_with_any_and_grouped": {
        "name": "currency",
        "description": "The currency symbol or `\"any\"` for all or '\"grouped\"' for all grouped by currency",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/currency_with_any_and_grouped"
        }
      },
      "settlement_currency_with_any_and_grouped": {
        "name": "currency",
        "description": "The currency symbol or `\"any\"` for all or '\"grouped\"' for all grouped by currency",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/settlement_currency_with_any_and_grouped"
        }
      },
      "kind_with_any": {
        "name": "kind",
        "description": "Instrument kind or `\"any\"` for all",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/kind_with_any"
        }
      },
      "kind_strict": {
        "name": "kind",
        "description": "Instrument kind, `\"future\"` or `\"option\"`",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/kind"
        }
      },
      "kind_future_or_option_with_any": {
        "name": "kind",
        "description": "Instrument kind, `\"future\"` or `\"option\"` or `\"any\"`",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/kind_future_or_option_with_any"
        }
      },
      "optional_currency": {
        "description": "The currency symbol",
        "in": "query",
        "name": "currency",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/currency"
        }
      },
      "optional_currency_block_rfq": {
        "description": "The currency symbol",
        "in": "query",
        "name": "currency",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/block_rfq_currency"
        }
      },
      "optional_kind": {
        "name": "kind",
        "description": "Instrument kind, if not provided instruments of all kinds are considered",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/kind"
        }
      },
      "kind_with_combo_all": {
        "name": "kind",
        "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/kind_with_combo_all"
        }
      },
      "only_combo_kind": {
        "name": "kind",
        "description": "Combo instrument kind, `\"combo\"` for any combo",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/only_combo_kind"
        }
      },
      "optional_kind_with_combo_all": {
        "name": "kind",
        "description": "Instrument kind, `\"combo\"` for any combo or `\"any\"` for all. If not provided instruments of all kinds are considered",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/kind_with_combo_all"
        }
      },
      "optional_combo_state": {
        "name": "state",
        "description": "Combo state, if not provided combos of all states are considered",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/combo_state"
        }
      },
      "optional_order_type": {
        "name": "type",
        "description": "Order type, default - `all`",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/order_type2"
        }
      },
      "optional_simple_order_type": {
        "name": "type",
        "description": "Order type - `limit`, `stop`, `take`, `trigger_all` or `all`, default - `all`",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/simple_order_type"
        }
      },
      "detailed_bool_for_cancel_all": {
        "name": "detailed",
        "description": "When detailed is set to `true` output format is changed. See description. Default: `false`",
        "required": false,
        "in": "query",
        "schema": {
          "type": "boolean"
        }
      },
      "include_combos_for_cancel_all": {
        "name": "include_combos",
        "description": "When set to `true` orders in combo instruments affecting a given position will also be cancelled. Default: `false`",
        "required": false,
        "in": "query",
        "schema": {
          "type": "boolean"
        }
      },
      "freeze_quotes": {
        "name": "freeze_quotes",
        "description": "Whether or not to reject incoming quotes for 1 second after cancelling (`false` by default). Related to `private/mass_quote` request.",
        "required": false,
        "in": "query",
        "schema": {
          "type": "boolean"
        }
      },
      "start_timestamp": {
        "name": "start_timestamp",
        "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch)",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "trade_start_timestamp": {
        "name": "start_timestamp",
        "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "optional_trade_start_timestamp": {
        "name": "start_timestamp",
        "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch). When param is provided trades are returned from the earliest",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "optional_start_timestamp": {
        "name": "start_timestamp",
        "description": "The earliest timestamp to return result from (milliseconds since the UNIX epoch)",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "end_timestamp": {
        "name": "end_timestamp",
        "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch)",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "trade_end_timestamp": {
        "name": "end_timestamp",
        "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "optional_trade_end_timestamp": {
        "name": "end_timestamp",
        "description": "The most recent timestamp to return result from (milliseconds since the UNIX epoch). Only one of params: start_timestamp, end_timestamp is truly required",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "optional_start_trade_id": {
        "name": "start_id",
        "description": "The ID of the first trade to be returned. Number for BTC trades, or hyphen name in ex. `\"ETH-15\"` # `\"ETH_USDC-16\"`",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/trade_id"
        }
      },
      "optional_end_trade_id": {
        "name": "end_id",
        "description": "The ID of the last trade to be returned. Number for BTC trades, or hyphen name in ex. `\"ETH-15\"` # `\"ETH_USDC-16\"`",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/trade_id"
        }
      },
      "optional_start_seq": {
        "name": "start_seq",
        "description": "The sequence number of the first trade to be returned",
        "required": false,
        "in": "query",
        "schema": {
          "type": "integer"
        }
      },
      "optional_end_seq": {
        "name": "end_seq",
        "description": "The sequence number of the last trade to be returned",
        "required": false,
        "in": "query",
        "schema": {
          "type": "integer"
        }
      },
      "optional_count10": {
        "name": "count",
        "description": "Number of requested items, default - `10`, maximum - `1000`",
        "required": false,
        "in": "query",
        "schema": {
          "type": "integer",
          "maximum": 1000,
          "minimum": 1
        }
      },
      "optional_count20": {
        "name": "count",
        "description": "Number of requested items, default - `20`, maximum - `1000`",
        "required": false,
        "in": "query",
        "schema": {
          "type": "integer",
          "maximum": 1000,
          "minimum": 1
        }
      },
      "optional_count100": {
        "name": "count",
        "description": "Number of requested items, default - `100`, maximum - `1000`",
        "required": false,
        "in": "query",
        "schema": {
          "type": "integer",
          "maximum": 1000,
          "minimum": 1
        }
      },
      "optional_sorting": {
        "name": "sorting",
        "description": "Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/sorting"
        }
      },
      "optional_offset": {
        "name": "offset",
        "description": "The offset for pagination, default - `0`",
        "in": "query",
        "required": false,
        "schema": {
          "example": 10,
          "type": "integer"
        }
      },
      "optional_include_old_orders": {
        "name": "include_old",
        "description": "Include in result orders older than 2 days, default - `false`",
        "in": "query",
        "required": false,
        "schema": {
          "example": false,
          "type": "boolean"
        }
      },
      "optional_include_unfilled_orders": {
        "name": "include_unfilled",
        "description": "Include in result fully unfilled closed orders, default - `false`",
        "in": "query",
        "required": false,
        "schema": {
          "example": false,
          "type": "boolean"
        }
      },
      "order_id": {
        "description": "The order id",
        "in": "query",
        "name": "order_id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/order_id"
        }
      },
      "block_trade_id": {
        "description": "Block trade id",
        "in": "query",
        "name": "id",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/block_trade_id"
        }
      },
      "optional_block_trade_start_id": {
        "name": "start_id",
        "description": "Response will contain block trades older than the one provided in this field",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/block_trade_id"
        }
      },
      "optional_block_trade_end_id": {
        "name": "end_id",
        "description": "The id of the oldest block trade to be returned, `start_id` is required with `end_id`",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/block_trade_id"
        }
      },
      "block_trade_timestamp": {
        "description": "Timestamp, shared with other party (milliseconds since the UNIX epoch)",
        "in": "query",
        "name": "timestamp",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "block_trade_nonce": {
        "description": "Nonce, shared with other party",
        "in": "query",
        "name": "nonce",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/nonce"
        }
      },
      "block_trade_role": {
        "description": "Describes if user wants to be maker or taker of trades",
        "in": "query",
        "name": "role",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/role"
        }
      },
      "block_trade_role_optional": {
        "description": "Describes if user wants to be maker or taker of trades",
        "in": "query",
        "name": "role",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/role"
        }
      },
      "trade_price": {
        "description": "Price for trade",
        "in": "query",
        "name": "price",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "block_rfq_trade_price": {
        "description": "Maximum acceptable price for execution",
        "in": "query",
        "name": "price",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "block_rfq_aggregated_price": {
        "description": "Aggregated price used for quoting future spreads.",
        "in": "query",
        "name": "price",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "position_move_price": {
        "description": "Price for trade - if not provided average price of the position is used",
        "in": "query",
        "name": "price",
        "required": false,
        "schema": {
          "type": "number"
        }
      },
      "trade_amount": {
        "description": "It represents the requested trade size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
        "in": "query",
        "name": "amount",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/amount"
        }
      },
      "trade_amount_required": {
        "description": "It represents the requested trade size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/amount"
        }
      },
      "position_move_amount": {
        "description": "It represents the requested trade size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin. Amount can't exceed position size.",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "trade_direction": {
        "description": "Direction of trade from the maker perspective",
        "in": "query",
        "name": "direction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/direction"
        }
      },
      "leg_direction": {
        "description": "Direction of selected leg",
        "in": "query",
        "name": "direction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/direction"
        }
      },
      "block_trade_trades": {
        "description": "List of trades for block trade",
        "in": "query",
        "name": "trades",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Array item with 4 properties"
          }
        }
      },
      "position_move_trades": {
        "description": "List of trades for position move",
        "in": "query",
        "name": "trades",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Array item with 3 properties"
          }
        }
      },
      "block_trade_counterparty_signature": {
        "description": "Signature of block trade generated by `private/verify_block_trade_method`",
        "in": "query",
        "name": "counterparty_signature",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/block_trade_signature"
        }
      },
      "block_trade_signature_to_invalidate": {
        "description": "Signature of block trade that will be invalidated",
        "in": "query",
        "name": "signature",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/block_trade_signature"
        }
      },
      "order_quantity": {
        "name": "amount",
        "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin. The `amount` is a mandatory parameter if `contracts` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": false
      },
      "margins_quantity": {
        "name": "amount",
        "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "order_contracts": {
        "name": "contracts",
        "description": "It represents the requested order size in contract units and can be passed instead of `amount`. The `contracts` is a mandatory parameter if `amount` parameter is missing. If both `contracts` and `amount` parameter are passed they must match each other otherwise error is returned.",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": false
      },
      "order_type": {
        "name": "type",
        "description": "The order type, default: `\"limit\"`",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "limit",
            "stop_limit",
            "take_limit",
            "market",
            "stop_market",
            "take_market",
            "market_limit",
            "trailing_stop"
          ]
        },
        "required": false
      },
      "optional_settlement_type": {
        "description": "Settlement type",
        "in": "query",
        "name": "type",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/settlement_type"
        }
      },
      "optional_settlement_start_timestamp": {
        "description": "The latest timestamp to return result from (milliseconds since the UNIX epoch)",
        "in": "query",
        "name": "search_start_timestamp",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        }
      },
      "simple_order_type_market_limit": {
        "name": "type",
        "description": "The order type",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "limit",
            "market"
          ]
        },
        "required": true
      },
      "order_label": {
        "name": "label",
        "description": "user defined label for the order (maximum 64 characters)",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "required_order_label": {
        "name": "label",
        "description": "user defined label for the order (maximum 64 characters)",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "edit_order_price": {
        "name": "price",
        "description": "The order price in base currency. When editing an option order with advanced=usd, the field price should be the option price value in USD. When editing an option order with advanced=implv, the field price should be a value of implied volatility in percentages. For example, price=100, means implied volatility of 100%",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": false
      },
      "order_price": {
        "name": "price",
        "description": "The order price in base currency (Only for limit and stop_limit orders) When adding an order with advanced=usd, the field price should be the option price value in USD. When adding an order with advanced=implv, the field price should be a value of implied volatility in percentages. For example, price=100, means implied volatility of 100%",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": false
      },
      "linked_order_type": {
        "name": "linked_order_type",
        "description": "The type of the linked order. `\"one_triggers_other\"` - Execution of primary order triggers the placement of one or more secondary orders. `\"one_cancels_other\"` - The execution of one order in a pair automatically cancels the other, typically used to set a stop-loss and take-profit simultaneously. `\"one_triggers_one_cancels_other\"` - The execution of a primary order triggers two secondary orders (a stop-loss and take-profit pair), where the execution of one secondary order cancels the other.",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "one_triggers_other",
            "one_cancels_other",
            "one_triggers_one_cancels_other"
          ]
        },
        "required": false
      },
      "otoco_config": {
        "name": "otoco_config",
        "description": "List of trades to create or cancel when this order is filled.",
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Array item with 12 properties"
          }
        },
        "required": false
      },
      "trigger_fill_condition": {
        "name": "trigger_fill_condition",
        "description": "The fill condition of the linked order (Only for linked order types), default: `first_hit`. `\"first_hit\"` - any execution of the primary order will fully cancel/place all secondary orders. `\"complete_fill\"` - a complete execution (meaning the primary order no longer exists) will cancel/place the secondary orders. `\"incremental\"` - any fill of the primary order will cause proportional partial cancellation/placement of the secondary order. The amount that will be subtracted/added to the secondary order will be rounded down to the contract size.",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "first_hit",
            "complete_fill",
            "incremental"
          ],
          "default": "first_hit"
        },
        "required": false
      },
      "order_side": {
        "name": "side",
        "description": "Side - `buy` or `sell`",
        "in": "query",
        "schema": {
          "type": "string",
          "$ref": "#/components/schemas/side"
        },
        "required": false
      },
      "time_in_force": {
        "name": "time_in_force",
        "description": "Specifies how long the order remains in effect. Default `\"good_til_cancelled\"` `\"good_til_cancelled\"` - unfilled order remains in order book until cancelled `\"good_til_day\"` - unfilled order remains in order book till the end of the trading session `\"fill_or_kill\"` - execute a transaction immediately and completely or not at all `\"immediate_or_cancel\"` - execute a transaction immediately, and any portion of the order that cannot be immediately filled is cancelled",
        "in": "query",
        "schema": {
          "type": "string",
          "default": "good_til_cancelled",
          "enum": [
            "good_til_cancelled",
            "good_til_day",
            "fill_or_kill",
            "immediate_or_cancel"
          ]
        },
        "required": false
      },
      "length_for_perpetual_chart": {
        "name": "length",
        "description": "Specifies time period. `8h` - 8 hours, `24h` - 24 hours, `1m` - 1 month",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "8h",
            "24h",
            "1m"
          ]
        },
        "required": true
      },
      "max_show": {
        "name": "max_show",
        "description": "Deprecated. Maximum amount within an order to be shown to other customers, `0` for invisible order",
        "in": "query",
        "schema": {
          "type": "number",
          "default": 1
        },
        "required": false
      },
      "display_amount": {
        "name": "display_amount",
        "description": "Initial display amount for iceberg order. Has to be at least 100 times minimum amount for instrument and ratio of hidden part vs visible part has to be less than 100 as well.",
        "in": "query",
        "schema": {
          "type": "number",
          "default": 1
        },
        "required": false
      },
      "post_only_buy": {
        "name": "post_only",
        "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below the spread. Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      },
      "post_only_sell": {
        "name": "post_only",
        "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just above the spread. Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      },
      "post_only_edit": {
        "name": "post_only",
        "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below or above the spread (accordingly to the original order type). Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": true
        },
        "required": false
      },
      "post_only_secondary": {
        "name": "post_only",
        "description": "If true, the order is considered post-only. If the new price would cause the order to be filled immediately (as taker), the price will be changed to be just below or above the spread (according to the direction of the order). Only valid in combination with time_in_force=`\"good_til_cancelled\"`",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "required": false
      },
      "reject_post_only": {
        "name": "reject_post_only",
        "description": "If an order is considered post-only and this field is set to true then the order is put to the order book unmodified or the request is rejected. Only valid in combination with `\"post_only\"` set to true",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "required": false
      },
      "optional_default": {
        "name": "default",
        "description": "If `true`, new key is marked as default",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "required": false
      },
      "reduce_only": {
        "name": "reduce_only",
        "description": "If `true`, the order is considered reduce-only which is intended to only reduce a current position",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "required": false
      },
      "trigger_price": {
        "name": "trigger_price",
        "description": "Trigger price, required for trigger orders only (Stop-loss or Take-profit orders)",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": false
      },
      "trigger_offset": {
        "name": "trigger_offset",
        "description": "The maximum deviation from the price peak beyond which the order will be triggered",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": false
      },
      "mmp": {
        "name": "mmp",
        "description": "Order MMP flag, only for order_type 'limit'",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "required": false
      },
      "valid_until": {
        "name": "valid_until",
        "description": "Timestamp, when provided server will start processing request in Matching Engine only before given timestamp, in other cases `timed_out` error will be responded. Remember that the given timestamp should be consistent with the server's time, use /public/time method to obtain current server time.",
        "in": "query",
        "schema": {
          "type": "integer"
        },
        "required": false
      },
      "trigger": {
        "name": "trigger",
        "description": "Defines the trigger type. Required for `\"Stop-Loss\"`, `\"Take-Profit\"` and `\"Trailing\"` trigger orders",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/trigger"
        },
        "required": false
      },
      "advanced_order_type": {
        "name": "advanced",
        "description": "Advanced option order type. (Only for options. Advanced USD orders are not supported for linear options.)",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/advanced"
        },
        "required": false
      },
      "edit_advanced_order_type": {
        "name": "advanced",
        "description": "Advanced option order type. If you have posted an advanced option order, it is necessary to re-supply this parameter when editing it (Only for options)",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/advanced"
        },
        "required": false
      },
      "optional_price": {
        "name": "price",
        "description": "Optional price for limit order.",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": false
      },
      "currency_custody_address": {
        "name": "address",
        "description": "Custody address in currency format",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "currency_address_from_address_book": {
        "name": "address",
        "description": "Address in currency format, it must be in address book",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "currency_address": {
        "name": "address",
        "description": "Address in currency format",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "transfer_currency_amount": {
        "name": "amount",
        "description": "Amount of funds to be transferred",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "withdrawal_currency_amount": {
        "name": "amount",
        "description": "Amount of funds to be withdrawn",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "deposit_currency_amount": {
        "name": "amount",
        "description": "Amount of deposited funds",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "currency_amount": {
        "name": "amount",
        "description": "Amount",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "optional_amount": {
        "name": "amount",
        "description": "Amount",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": false
      },
      "withdrawal_priority": {
        "name": "priority",
        "description": "Withdrawal priority, optional for BTC, default: `high`",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "insane",
            "extreme_high",
            "very_high",
            "high",
            "mid",
            "low",
            "very_low"
          ]
        },
        "required": false
      },
      "withdrawal_id": {
        "description": "The withdrawal id",
        "in": "query",
        "name": "id",
        "required": true,
        "schema": {
          "type": "number",
          "example": 1
        }
      },
      "boolean_state": {
        "name": "state",
        "required": true,
        "in": "query",
        "schema": {
          "type": "boolean"
        }
      },
      "boolean_value": {
        "name": "value",
        "required": true,
        "in": "query",
        "schema": {
          "type": "boolean"
        }
      },
      "boolean_enabled": {
        "name": "enabled",
        "required": true,
        "in": "query",
        "schema": {
          "type": "boolean"
        }
      },
      "address_book_type": {
        "name": "type",
        "description": "Address book type",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/address_book_type"
        },
        "required": true
      },
      "address_book_type_without_deposit_source": {
        "name": "type",
        "description": "Address book type",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/address_book_type_without_deposit_source"
        },
        "required": true
      },
      "address_label": {
        "name": "label",
        "description": "Label of the address book entry",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/address_label"
        },
        "required": true
      },
      "beneficiary_vasp_name": {
        "name": "beneficiary_vasp_name",
        "description": "Name of beneficiary VASP",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/beneficiary_vasp_name"
        },
        "required": true
      },
      "beneficiary_vasp_did": {
        "name": "beneficiary_vasp_did",
        "description": "DID of beneficiary VASP",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/beneficiary_vasp_did"
        },
        "required": true
      },
      "beneficiary_first_name": {
        "name": "beneficiary_first_name",
        "description": "First name of beneficiary (if beneficiary is a person)",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/beneficiary_first_name"
        },
        "required": false
      },
      "beneficiary_last_name": {
        "name": "beneficiary_last_name",
        "description": "First name of beneficiary (if beneficiary is a person)",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/beneficiary_last_name"
        },
        "required": false
      },
      "beneficiary_company_name": {
        "name": "beneficiary_company_name",
        "description": "Beneficiary company name (if beneficiary is a company)",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/beneficiary_company_name"
        },
        "required": false
      },
      "beneficiary_address": {
        "name": "beneficiary_address",
        "description": "Geographical address of the beneficiary",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/beneficiary_address"
        },
        "required": true
      },
      "beneficiary_vasp_website": {
        "name": "beneficiary_vasp_website",
        "description": "Website of the beneficiary VASP. Required if the address book entry is associated with a VASP that is not included in the list of known VASPs",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/beneficiary_vasp_website"
        },
        "required": false
      },
      "agree_to_share_with_3rd_party": {
        "name": "agreed",
        "description": "Indicates that the user agreed to shared provided information with 3rd parties",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/agree_to_share_with_3rd_party"
        },
        "required": true
      },
      "personal_wallet": {
        "name": "personal",
        "description": "The user confirms that he provided address belongs to him and he has access to it via an un-hosted wallet software",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/personal_wallet"
        },
        "required": true
      },
      "extra_currencies": {
        "name": "extra_currencies",
        "description": "The user can pass a list of currencies to add the address for. It is currently available ONLY for ERC20 currencies. Without passing this paramater for an ERC20 currency, the address will be added to ALL of the ERC20 currencies.",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/extra_currencies"
        },
        "required": false
      },
      "transfer_direction": {
        "name": "direction",
        "description": "Direction of transfer",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/transfer_direction"
        },
        "required": true
      },
      "transfer_destination_for_user": {
        "name": "destination",
        "description": "Destination wallet's address taken from address book",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "transfer_destination_for_subaccount": {
        "name": "destination",
        "description": "Id of destination subaccount. Can be found in `My Account >> Subaccounts` tab",
        "in": "query",
        "schema": {
          "type": "integer",
          "example": 1
        },
        "required": true
      },
      "transfer_source_for_subaccount": {
        "name": "source",
        "description": "Id of the source (sub)account. Can be found in `My Account >> Subaccounts` tab. By default, it is the Id of the account which made the request. However, if a different \"source\" is specified, the user must possess the mainaccount scope, and only other subaccounts can be designated as the source.",
        "in": "query",
        "schema": {
          "type": "integer",
          "example": 1
        },
        "required": false
      },
      "user_id": {
        "name": "user_id",
        "description": "Id of a (sub)account",
        "in": "query",
        "schema": {
          "type": "integer",
          "example": 1
        },
        "required": true
      },
      "optional_user_id": {
        "name": "user_id",
        "description": "Id of a (sub)account - by default current user id is used",
        "in": "query",
        "schema": {
          "type": "integer",
          "example": 1
        },
        "required": false
      },
      "trade_allocation_user_id": {
        "name": "user_id",
        "description": "User ID (subaccount or main account) to allocate part of the RFQ amount.",
        "in": "query",
        "schema": {
          "type": "integer"
        },
        "required": false
      },
      "trade_allocation_client_id": {
        "name": "client_id",
        "description": "ID of a client; available to broker. Represents a group of users under a common name.",
        "in": "query",
        "schema": {
          "type": "integer"
        },
        "required": false
      },
      "trade_allocation_client_link_id": {
        "name": "client_link_id",
        "description": "ID assigned to a single user in a client; available to broker.",
        "in": "query",
        "schema": {
          "type": "integer"
        },
        "required": false
      },
      "trade_allocation_client_info": {
        "name": "client_info",
        "description": "Client allocation info for brokers.",
        "in": "query",
        "schema": {
          "type": "string",
          "description": "JSON string containing: client_id, client_link_id"
        },
        "required": false
      },
      "trade_allocation_amount": {
        "name": "amount",
        "description": "Amount allocated to this user or client.",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": false
      },
      "pme_enabled": {
        "name": "enabled",
        "description": "Whether PM or SM should be enabled - PM while `true`, SM otherwise",
        "in": "query",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": true
      },
      "dry_run": {
        "name": "dry_run",
        "description": "If `true` request returns the result without switching the margining model. Default: `false`",
        "in": "query",
        "schema": {
          "type": "boolean",
          "example": true
        },
        "required": false
      },
      "margin_model": {
        "name": "margin_model",
        "description": "Margin model",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "cross_pm",
            "cross_sm",
            "segregated_pm",
            "segregated_sm"
          ]
        },
        "required": true
      },
      "position_move_source_uid": {
        "name": "source_uid",
        "description": "Id of source subaccount. Can be found in `My Account >> Subaccounts` tab",
        "in": "query",
        "schema": {
          "type": "integer",
          "example": 1
        },
        "required": true
      },
      "position_move_target_uid": {
        "name": "target_uid",
        "description": "Id of target subaccount. Can be found in `My Account >> Subaccounts` tab",
        "in": "query",
        "schema": {
          "type": "integer",
          "example": 1
        },
        "required": true
      },
      "transfer_id": {
        "name": "id",
        "description": "Id of transfer",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/transfer_id"
        },
        "required": true
      },
      "tfa": {
        "name": "tfa",
        "description": "TFA code, required when TFA is enabled for current account",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "client_software_name": {
        "name": "client_name",
        "description": "Client software name",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "My Trading Software"
        },
        "required": true
      },
      "client_software_version": {
        "name": "client_version",
        "description": "Client software version",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "1.0.2"
        },
        "required": true
      },
      "chart_resolution": {
        "name": "resolution",
        "description": "Chart bars resolution given in full minutes or keyword `1D` (only some specific resolutions are supported)",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            1,
            3,
            5,
            10,
            15,
            30,
            60,
            120,
            180,
            360,
            720,
            "1D"
          ]
        },
        "required": true
      },
      "vix_resolution": {
        "name": "resolution",
        "description": "Time resolution given in full seconds or keyword `1D` (only some specific resolutions are supported)",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            1,
            60,
            3600,
            43200,
            "1D"
          ]
        },
        "required": true
      },
      "key_id": {
        "name": "id",
        "description": "Id of key",
        "in": "query",
        "required": true,
        "schema": {
          "type": "integer",
          "example": 1
        }
      },
      "key_name": {
        "name": "name",
        "description": "Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "TestName"
        },
        "required": false
      },
      "key_name_required": {
        "name": "name",
        "description": "Name of key (only letters, numbers and underscores allowed; maximum length - 16 characters)",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "TestName"
        },
        "required": true
      },
      "key_scope": {
        "name": "max_scope",
        "in": "query",
        "required": true,
        "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`. If scope is not provided, its value is set as none. Please check details described in Access scope",
        "schema": {
          "$ref": "#/components/schemas/max_scope"
        }
      },
      "key_features": {
        "name": "enabled_features",
        "in": "query",
        "required": false,
        "description": "List of enabled advanced on-key features. Available options: - `restricted_block_trades`: Limit the block_trade read the scope of the API key to block trades that have been made using this specific API key - `block_trade_approval`: Block trades created using this API key require additional user approval. Methods that use `block_rfq` scope are not affected by Block Trade approval feature",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "restricted_block_trades",
              "block_trade_approval"
            ]
          }
        }
      },
      "enable_key": {
        "name": "enabled",
        "in": "query",
        "required": false,
        "description": "Enables/disables the API key. `true` to enable, `false` to disable",
        "schema": {
          "type": "boolean"
        }
      },
      "whitelist_ip": {
        "name": "ip_whitelist",
        "in": "query",
        "required": false,
        "description": "Whitelist provided IP address on a selected key",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "public_key": {
        "name": "public_key",
        "in": "query",
        "required": false,
        "description": "ED25519 or RSA PEM Encoded public key that should be used to create asymmetric API Key for signing requests/authentication requests with user's private key. **📖 Related Support Article:** Asymmetric API keys",
        "schema": {
          "type": "string",
          "example": "-----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEAM7FWhKquNqLmTOV4hfYT5r3AjrYiORTT6Tn5HIfFNV8= -----END PUBLIC KEY-----"
        }
      },
      "optional_query": {
        "name": "query",
        "description": "The following keywords can be used to filter the results: `trade`, `maker`, `taker`, `open`, `close`, `liquidation`, `buy`, `sell`, `withdrawal`, `delivery`, `settlement`, `deposit`, `transfer`, `option`, `future`, `correction`, `block_trade`, `swap`. Plus withdrawal or transfer addresses",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "settlement"
        },
        "required": false
      },
      "email": {
        "name": "email",
        "description": "Email address of account",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "john.doe@example.com"
        },
        "required": true
      },
      "recovery_code": {
        "name": "code",
        "description": "One time recovery code",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "password": {
        "name": "password",
        "description": "The password for the account",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": true
      },
      "cod_scope": {
        "name": "scope",
        "description": "Specifies if Cancel On Disconnect change should be applied/checked for the current connection or the account (default - `connection`) **NOTICE:** Scope `connection` can be used only when working via Websocket.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "connection",
            "account"
          ]
        }
      },
      "range": {
        "name": "range",
        "description": "Range of the data to return",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "1h",
            "1d",
            "2d",
            "1m",
            "1y",
            "all"
          ]
        }
      },
      "extended_volume_statistics": {
        "name": "extended",
        "description": "Request for extended statistics. Including also 7 and 30 days volumes (default false)",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "custody_name": {
        "name": "custody",
        "description": "Custody name",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/custody_name"
        }
      },
      "client_id": {
        "name": "client_id",
        "description": "API key client_id",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/client_id"
        }
      },
      "security_key_name": {
        "name": "name",
        "description": "Name of security key, only alpha numeric chars allowed with - and _",
        "required": true,
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "security_key_id": {
        "name": "key_id",
        "description": "Security Key Id",
        "required": true,
        "in": "query",
        "schema": {
          "type": "integer"
        }
      },
      "security_key_reset_code": {
        "name": "code",
        "description": "Security Key reset code",
        "required": true,
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "invalidate_token": {
        "name": "invalidate_token",
        "description": "If value is `true` all tokens created in current session are invalidated, default: `true`",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "self_trading_mode": {
        "name": "mode",
        "description": "Self trading prevention behavior: `reject_taker` (reject the incoming order), `cancel_maker` (cancel the matched order in the book)",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "reject_taker",
            "cancel_maker"
          ]
        }
      },
      "extended_to_subaccounts": {
        "name": "extended_to_subaccounts",
        "description": "If value is `true` trading is prevented between subaccounts of given account, otherwise they are treated separately",
        "in": "query",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "block_rfq_self_match_prevention": {
        "name": "block_rfq_self_match_prevention",
        "description": "When Block RFQ Self Match Prevention is enabled, it ensures that RFQs cannot be executed between accounts that belong to the same legal entity. This setting is independent of the general self-match prevention settings and must be configured separately.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "request_id": {
        "name": "requestId",
        "description": "Request ID",
        "required": true,
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "balance": {
        "name": "balance",
        "description": "Current custody balance of the user",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "difference": {
        "name": "difference",
        "description": "Difference between current \"in exchange\" balance and current custody balance that happened due to the settlement.",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "jwt_recipient": {
        "name": "recipient",
        "description": "Recipient of the token",
        "schema": {
          "type": "string",
          "enum": [
            "zendesk"
          ]
        },
        "required": false,
        "in": "query"
      },
      "external_id": {
        "name": "external_id",
        "description": "User ID in the external system. (i.e. in custodian system)",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/external_id"
        }
      },
      "business_registration_number": {
        "name": "business_registration_number",
        "description": "The registration number of the company",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/business_registration_number"
        }
      },
      "trading_products": {
        "name": "trading_products",
        "in": "query",
        "required": true,
        "description": "List of available trading products. Available products: perpetual, futures, options, future_combos, option_combos, spots",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "perpetual",
              "futures",
              "options",
              "future_combos",
              "option_combos",
              "spots"
            ]
          }
        }
      },
      "withdrawal_policy_mode": {
        "name": "mode",
        "description": "Withdrawal Policy mode",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/withdrawal_policy_mode"
        }
      },
      "withdrawal_policy_limit_bucket": {
        "name": "limit_bucket",
        "description": "Withdrawal Policy limit bucket",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/withdrawal_policy_limit_bucket"
        }
      },
      "withdrawal_policy_category": {
        "name": "category",
        "description": "Withdrawal Policy category",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/withdrawal_policy_category"
        }
      },
      "withdrawal_policy_amount": {
        "name": "amount",
        "description": "Amount or flag to use default value",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/withdrawal_policy_amount"
        }
      },
      "simulated_positions_map": {
        "name": "simulated_positions",
        "required": false,
        "in": "query",
        "description": "Object with positions in following form: `{InstrumentName1: Position1, InstrumentName2: Position2...}`, for example `{\"BTC-PERPETUAL\": -1000.0}` (or corresponding URI-encoding for GET). For futures in USD, for options in base currency.",
        "schema": {
          "type": "string",
          "description": "JSON string containing: $key, $value"
        }
      },
      "simulated_positions_map_base": {
        "name": "simulated_positions",
        "required": false,
        "in": "query",
        "description": "Object with positions in following form: `{InstrumentName1: Position1, InstrumentName2: Position2...}`, for example `{\"BTC-PERPETUAL\": -1.0}` (or corresponding URI-encoding for GET). Size in base currency.",
        "schema": {
          "type": "string",
          "description": "JSON string containing: $key, $value"
        }
      },
      "add_positions": {
        "name": "add_positions",
        "required": false,
        "in": "query",
        "description": "If `true`, adds simulated positions to current positions, otherwise uses only simulated positions. By default `true`",
        "schema": {
          "type": "boolean"
        }
      },
      "leg_ratio": {
        "name": "ratio",
        "required": true,
        "in": "query",
        "description": "Ratio of amount between legs",
        "schema": {
          "type": "integer"
        }
      },
      "block_rfq_id": {
        "name": "block_rfq_id",
        "required": true,
        "in": "query",
        "description": "ID of the Block RFQ",
        "schema": {
          "type": "integer"
        }
      },
      "optional_block_rfq_id": {
        "name": "block_rfq_id",
        "required": false,
        "in": "query",
        "description": "ID of the Block RFQ",
        "schema": {
          "type": "integer"
        }
      },
      "block_rfq_label": {
        "name": "label",
        "description": "User defined label for the Block RFQ (maximum 64 characters)",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "block_rfq_amount": {
        "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
        "in": "query",
        "name": "amount",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/amount"
        }
      },
      "block_rfq_legs": {
        "description": "List of legs used to create Block RFQ",
        "in": "query",
        "name": "legs",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Array item with 3 properties"
          }
        }
      },
      "block_rfq_hedge_leg": {
        "description": "Hedge leg of the Block RFQ. There is only one hedge leg allowed per Block RFQ",
        "in": "query",
        "name": "hedge",
        "required": false,
        "schema": {
          "type": "string",
          "description": "JSON string containing: instrument_name, direction, price, amount"
        }
      },
      "block_rfq_trade_legs": {
        "description": "List of legs used to trade Block RFQ",
        "in": "query",
        "name": "legs",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Array item with 3 properties"
          }
        }
      },
      "block_rfq_legs_quote": {
        "description": "List of legs used for Block RFQ quote",
        "in": "query",
        "name": "legs",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Array item with 4 properties"
          }
        }
      },
      "block_rfq_hedge_leg_quote": {
        "description": "Hedge leg of the Block RFQ. There is only one hedge leg allowed per Block RFQ",
        "in": "query",
        "name": "hedge",
        "required": false,
        "schema": {
          "type": "string",
          "description": "JSON string containing: instrument_name, direction, price, amount"
        }
      },
      "block_rfq_hedge_leg_trade": {
        "description": "Hedge leg of the Block RFQ. There is only one hedge leg allowed per Block RFQ",
        "in": "query",
        "name": "hedge",
        "required": false,
        "schema": {
          "type": "string",
          "description": "JSON string containing: instrument_name, direction, price, amount"
        }
      },
      "block_rfq_quote_id": {
        "name": "block_rfq_quote_id",
        "required": false,
        "in": "query",
        "description": "ID of the Block RFQ quote",
        "schema": {
          "type": "integer"
        }
      },
      "block_rfq_quote_label": {
        "name": "label",
        "description": "User defined label for the Block RFQ quote (maximum 64 characters). Used to identify quotes of a selected Block RFQ",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "hedge_leg_price": {
        "name": "price",
        "description": "Hedge leg price",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "block_rfq_makers": {
        "name": "makers",
        "description": "List of targeted Block RFQ makers. Only those makers will be notified about created Block RFQ. If the list is empty, all available makers will be targeted.",
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "required": false
      },
      "execution_instruction": {
        "name": "execution_instruction",
        "required": false,
        "in": "query",
        "description": "Execution instruction of the quote. Default - `any_part_of` `\"all_or_none (AON)\"` - The quote can only be filled entirely or not at all, ensuring that its amount matches the amount specified in the Block RFQ. Additionally, 'all_or_none' quotes have priority over 'any_part_of' quotes at the same price level. `\"any_part_of (APO)\"` - The quote can be filled either partially or fully, with the filled amount potentially being less than the Block RFQ amount.",
        "schema": {
          "type": "string",
          "enum": [
            "all_or_none",
            "any_part_of"
          ]
        }
      },
      "block_rfq_count": {
        "name": "count",
        "description": "Count of Block RFQs returned, maximum - `1000`",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "maximum": 1000,
          "minimum": 1
        }
      },
      "block_trade_count": {
        "name": "count",
        "description": "Count of Block Trades returned, maximum - `101`",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "maximum": 101,
          "minimum": 1
        }
      },
      "transaction_log_count": {
        "name": "count",
        "description": "Count of transaction log entries returned, default - `100`, maximum - `250`",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "maximum": 250,
          "minimum": 1
        }
      },
      "block_rfq_continuation": {
        "name": "continuation",
        "description": "The continuation parameter specifies the starting point for fetching historical Block RFQs. When provided, the endpoint returns Block RFQs, starting from the specified ID and continuing backward (e.g., if `continuation` is 50, results will include Block RFQs of ID 49, 48, etc.)",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "block_rfq_string_continuation": {
        "name": "continuation",
        "description": "Continuation token for pagination. Consists of `timestamp` and `block_rfq_id`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "1738050297271:103"
        }
      },
      "block_rfq_state": {
        "name": "state",
        "description": "State of Block RFQ",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "open",
            "filled",
            "traded",
            "cancelled",
            "expired",
            "closed"
          ]
        }
      },
      "block_rfq_role": {
        "name": "role",
        "description": "Role of the user in Block RFQ. When the `any` role is selected, the method returns all Block RFQs in which the user has participated, either as the `taker` or as a `maker`",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "any",
            "taker",
            "maker"
          ]
        }
      },
      "block_rfq_taker_direction": {
        "description": "Direction of the trade from the taker perspective",
        "in": "query",
        "name": "direction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/direction"
        }
      },
      "block_rfq_leg_direction": {
        "description": "Direction of selected leg. Must match the direction of the corresponding leg in the Block RFQ",
        "in": "query",
        "name": "direction",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/direction"
        }
      },
      "legs_for_prices": {
        "description": "List of legs for which the prices will be calculated",
        "in": "query",
        "name": "legs",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Array item with 3 properties"
          }
        }
      },
      "legs_price": {
        "name": "price",
        "description": "Price for the whole leg structure",
        "in": "query",
        "schema": {
          "type": "number"
        },
        "required": true
      },
      "deposit_id": {
        "description": "Id of the deposit",
        "in": "query",
        "name": "deposit_id",
        "required": true,
        "schema": {
          "type": "string",
          "description": "JSON string containing: currency, user_id, address, tx_hash"
        }
      },
      "originator": {
        "description": "Information about the originator of the deposit",
        "in": "query",
        "name": "originator",
        "required": true,
        "schema": {
          "type": "string",
          "description": "JSON string containing: is_personal, company_name, first_name, last_name, address"
        }
      },
      "tx_hash": {
        "name": "tx_hash",
        "description": "Transaction id in a proper format for the currency",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "1b1fb5568515e2b79503501e3d3680b2d0838d5dfc2d15a04eb8cd9fbbe0b572"
      },
      "is_personal": {
        "name": "is_personal",
        "description": "If the user is the originator of the deposit",
        "in": "query",
        "required": true,
        "schema": {
          "type": "boolean"
        }
      },
      "company_name": {
        "name": "company_name",
        "description": "Company name of the originator if the originator is a legal entity",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "first_name": {
        "name": "first_name",
        "description": "If the user is the originator of the deposit",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "last_name": {
        "name": "last_name",
        "description": "Last name of the originator if the originator is a person",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "address": {
        "name": "address",
        "description": "Geographical address of the originator",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "optional_subbacount_id": {
        "name": "subaccount_id",
        "description": "Id of a subaccount",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "example": 9
        }
      },
      "historical": {
        "name": "historical",
        "description": "Determines whether historical trade and order records should be retrieved. `false` (default): Returns recent records: orders for 30 min, trades for 24h. `true`: Fetches historical records, available after a short delay due to indexing. Recent data is not included. **📖 Related Support Article:** Accessing historical trades and orders using API",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "with_continuation": {
        "name": "with_continuation",
        "description": "When set to true, the API response format changes from a simple list of orders to an object containing the orders and a continuation token.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "disclosed": {
        "name": "disclosed",
        "description": "Determines whether the RFQ is non-anonymous, revealing both taker and maker aliases. It can be set to `false` (anonymous mode) only when at least 5 makers are targeted. Default value is `true`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "custody_settlement_id": {
        "name": "id",
        "description": "Unique identifier of the settlement.",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "example": "dec42708-2ec6-4cdd-8f9d-d49bbe94d0aa"
        }
      },
      "custody_settlement_review_reason": {
        "name": "reason",
        "description": "Optional reason provided for ignoring or rejecting the instruction",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "Balance discrepancy"
        }
      },
      "custody_settlement_review_action": {
        "name": "action",
        "description": "Action taken by the custodian",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "confirm",
            "ignore",
            "reject"
          ]
        }
      },
      "custody_settlement_review": {
        "description": "List of review instructions for each currency",
        "in": "query",
        "name": "currencies",
        "required": true,
        "schema": {
          "type": "string",
          "description": "JSON string containing: currency, action, reason"
        }
      },
      "expected_custody_balance": {
        "description": "Expected custody balance of the user",
        "name": "expected_custody_balance",
        "in": "query",
        "required": true,
        "schema": {
          "type": "number",
          "example": 2.341
        }
      },
      "custody_settlement_amount": {
        "name": "amount",
        "description": "Amount to be settled",
        "in": "query",
        "required": true,
        "schema": {
          "type": "number",
          "example": 2.341
        }
      },
      "custody_balance": {
        "description": "Balance of the user in the custodian system.",
        "in": "query",
        "name": "custody_balance",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "custody_settlement_initiate": {
        "description": "Request settlement for the given currencies",
        "in": "query",
        "name": "currencies",
        "required": true,
        "schema": {
          "type": "string",
          "description": "JSON string containing: currency, custody_balance"
        }
      },
      "custody_currency": {
        "name": "currency",
        "description": "The currency supported by custodian and exchange",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "expires_at": {
        "name": "expires_at",
        "description": "The timestamp when the quote expires (milliseconds since the Unix epoch)",
        "required": false,
        "in": "query",
        "schema": {
          "type": "integer",
          "example": 1745312540321
        }
      },
      "address_tag": {
        "name": "tag",
        "description": "Tag for XRP addresses",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "unhosted_wallet": {
        "name": "unhosted",
        "description": "Indicates if the address belongs to an unhosted wallet",
        "in": "query",
        "schema": {
          "type": "boolean"
        },
        "required": true
      },
      "wallet_currency_optional": {
        "name": "currency",
        "description": "The currency symbol",
        "required": false,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/wallet_currency"
        }
      },
      "currency_address_optional": {
        "name": "address",
        "description": "Address in currency format",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "required": false
      },
      "created_before": {
        "name": "created_before",
        "description": "Filter by creation timestamp (before)",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        },
        "required": false
      },
      "created_after": {
        "name": "created_after",
        "description": "Filter by creation timestamp (after)",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        },
        "required": false
      },
      "updated_before": {
        "name": "updated_before",
        "description": "Filter by update timestamp (before)",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        },
        "required": false
      },
      "updated_after": {
        "name": "updated_after",
        "description": "Filter by update timestamp (after)",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/timestamp"
        },
        "required": false
      },
      "personal_wallet_optional": {
        "name": "personal",
        "description": "Filter by personal wallet flag",
        "in": "query",
        "schema": {
          "type": "boolean"
        },
        "required": false
      },
      "unhosted_wallet_optional": {
        "name": "unhosted",
        "description": "Filter by unhosted wallet flag",
        "in": "query",
        "schema": {
          "type": "boolean"
        },
        "required": false
      },
      "beneficiary_vasp_name_optional": {
        "name": "beneficiary_vasp_name",
        "description": "Filter by beneficiary VASP name",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/beneficiary_vasp_name"
        },
        "required": false
      },
      "beneficiary_vasp_did_optional": {
        "name": "beneficiary_vasp_did",
        "description": "Filter by beneficiary VASP DID",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/beneficiary_vasp_did"
        },
        "required": false
      },
      "limit_optional": {
        "name": "limit",
        "description": "Maximum number of results to return",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "default": 100
        },
        "required": false
      },
      "trade_allocations": {
        "name": "trade_allocations",
        "description": "List of allocations for Block RFQ pre-allocation. Allows to split amount between different (sub)accounts or broker clients. Each allocation must specify either `user_id` (for direct allocation) or `client_info` object (for broker allocation), and amount.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Array item with 3 properties"
          }
        }
      }
    },
    "schemas": {
      "custody_account": {
        "description": "Custody account",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "name": {
            "$ref": "#/components/schemas/custody_name"
          },
          "balance": {
            "$ref": "#/components/schemas/currency_amount",
            "description": "Balance available on custody account"
          },
          "pending_withdrawal_balance": {
            "$ref": "#/components/schemas/currency_amount",
            "description": "Pending balance transferred from trading account to custody account"
          },
          "auto_deposit": {
            "description": "When set to 'true' all new funds added to custody balance will be automatically transferred to trading balance",
            "type": "boolean"
          },
          "client_id": {
            "description": "API key 'client id' used to reserve/release funds in custody platform, requires scope 'custody:read_write'",
            "type": "string"
          },
          "external_id": {
            "$ref": "#/components/schemas/external_id"
          },
          "withdrawal_address": {
            "description": "Address that is used for withdrawals",
            "type": "string"
          },
          "withdrawal_address_change": {
            "description": "UNIX timestamp after when new withdrawal address will be used for withdrawals",
            "type": "number"
          },
          "pending_withdrawal_addres": {
            "description": "New withdrawal address that will be used after 'withdrawal_address_change'",
            "type": "string"
          },
          "deposit_address": {
            "description": "Address that can be used for deposits",
            "type": "string"
          }
        },
        "required": [
          "currency",
          "name",
          "pending_withdrawal_balance"
        ],
        "type": "object"
      },
      "custody_log": {
        "description": "Custody log",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "request_id": {
            "description": "Request ID",
            "type": "string"
          },
          "request": {
            "description": "Request type",
            "enum": [
              "add_funds",
              "remove_funds",
              "deposit_funds",
              "withdraw_funds"
            ],
            "type": "string"
          },
          "success": {
            "description": "When request was successful set to `true`",
            "type": "boolean"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "amount": {
            "$ref": "#/components/schemas/currency_amount"
          }
        },
        "required": [
          "currency",
          "request_id",
          "request",
          "success",
          "timestamp"
        ],
        "type": "object"
      },
      "book_summary": {
        "properties": {
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "high": {
            "description": "Price of the 24h highest trade",
            "example": 7022.89,
            "type": "number"
          },
          "low": {
            "description": "Price of the 24h lowest trade, `null` if there weren't any trades",
            "example": 7022.89,
            "type": "number"
          },
          "base_currency": {
            "description": "Base currency",
            "example": "ETH",
            "type": "string"
          },
          "quote_currency": {
            "description": "Quote currency",
            "example": "USD",
            "type": "string"
          },
          "volume": {
            "description": "The total 24h traded volume (in base currency)",
            "example": 223,
            "type": "number"
          },
          "bid_price": {
            "description": "The current best bid price, `null` if there aren't any bids",
            "example": 7022.89,
            "type": "number"
          },
          "ask_price": {
            "description": "The current best ask price, `null` if there aren't any asks",
            "example": 7022.89,
            "type": "number"
          },
          "mid_price": {
            "description": "The average of the best bid and ask, `null` if there aren't any asks or bids",
            "example": 7022.89,
            "type": "number"
          },
          "mark_price": {
            "description": "The current instrument market price",
            "example": 7022.89,
            "type": "number"
          },
          "last": {
            "description": "The price of the latest trade, `null` if there weren't any trades",
            "example": 7022.89,
            "type": "number"
          },
          "open_interest": {
            "description": "Optional (only for derivatives). The total amount of outstanding contracts in the corresponding amount units. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "example": 0.5,
            "type": "number"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "estimated_delivery_price": {
            "description": "Optional (only for derivatives). Estimated delivery price for the market. For more details, see Contract Specification > General Documentation > Expiration Price.",
            "example": 11628.81,
            "type": "number"
          },
          "volume_usd": {
            "description": "Volume in USD",
            "type": "number"
          },
          "volume_notional": {
            "description": "Volume in quote currency (futures and spots only)",
            "type": "number"
          },
          "current_funding": {
            "description": "Current funding (perpetual only)",
            "type": "number",
            "example": 0.12344
          },
          "funding_8h": {
            "description": "Funding 8h (perpetual only)",
            "type": "number"
          },
          "mark_iv": {
            "$ref": "#/components/schemas/mark_iv"
          },
          "interest_rate": {
            "description": "Interest rate used in implied volatility calculations (options only)",
            "example": 0,
            "type": "number"
          },
          "underlying_index": {
            "description": "Name of the underlying future, or `'index_price'` (options only)",
            "example": "index_price",
            "type": "string"
          },
          "underlying_price": {
            "description": "underlying price for implied volatility calculations (options only)",
            "example": 6745.34,
            "type": "number"
          },
          "price_change": {
            "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
            "example": 10.23,
            "type": "number"
          }
        },
        "required": [
          "instrument_name",
          "high",
          "low",
          "base_currency",
          "quote_currency",
          "volume",
          "bid_price",
          "ask_price",
          "mid_price",
          "mark_price",
          "last",
          "open_interest",
          "creation_timestamp"
        ],
        "type": "object"
      },
      "position": {
        "properties": {
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "kind": {
            "$ref": "#/components/schemas/kind"
          },
          "average_price": {
            "description": "Average price of trades that built this position",
            "type": "number"
          },
          "direction": {
            "$ref": "#/components/schemas/position_direction"
          },
          "mark_price": {
            "description": "Current mark price for position's instrument",
            "type": "number"
          },
          "delta": {
            "description": "Delta parameter",
            "type": "number"
          },
          "gamma": {
            "description": "Only for options, Gamma parameter",
            "type": "number"
          },
          "vega": {
            "description": "Only for options, Vega parameter",
            "type": "number"
          },
          "theta": {
            "description": "Only for options, Theta parameter",
            "type": "number"
          },
          "index_price": {
            "description": "Current index price",
            "type": "number"
          },
          "initial_margin": {
            "description": "Initial margin",
            "type": "number"
          },
          "maintenance_margin": {
            "description": "Maintenance margin",
            "type": "number"
          },
          "settlement_price": {
            "description": "Optional (not added for spot). Last settlement price for position's instrument 0 if instrument wasn't settled yet",
            "type": "number"
          },
          "total_profit_loss": {
            "description": "Profit or loss from position",
            "type": "number"
          },
          "floating_profit_loss": {
            "description": "Floating profit or loss",
            "type": "number"
          },
          "realized_profit_loss": {
            "description": "Realized profit or loss",
            "type": "number"
          },
          "size": {
            "description": "Position size for futures size in quote currency (e.g. USD), for options size is in base currency (e.g. BTC)",
            "type": "number"
          },
          "size_currency": {
            "description": "Only for futures, position size in base currency",
            "type": "number"
          },
          "average_price_usd": {
            "description": "Only for options, average price in USD",
            "type": "number"
          },
          "floating_profit_loss_usd": {
            "description": "Only for options, floating profit or loss in USD",
            "type": "number"
          },
          "leverage": {
            "description": "Current available leverage for future position",
            "type": "integer"
          },
          "realized_funding": {
            "description": "Realized Funding in current session included in session realized profit or loss, only for positions of perpetual instruments",
            "type": "number"
          },
          "interest_value": {
            "description": "Value used to calculate `realized_funding` (perpetual only)",
            "type": "number"
          }
        },
        "required": [
          "instrument_name",
          "kind",
          "average_price",
          "direction",
          "mark_price",
          "delta",
          "index_price",
          "initial_margin",
          "maintenance_margin",
          "settlement_price",
          "total_profit_loss",
          "floating_profit_loss",
          "size"
        ],
        "type": "object"
      },
      "position_with_elp": {
        "allOf": [
          {
            "$ref": "#/components/schemas/position"
          },
          {
            "properties": {
              "estimated_liquidation_price": {
                "description": "Estimated liquidation price, added only for futures, for users with `segregated_sm` margin model",
                "type": "number"
              },
              "open_orders_margin": {
                "description": "Open orders margin",
                "type": "number"
              }
            },
            "required": [
              "estimated_liquidation_price",
              "open_orders_margin"
            ]
          }
        ]
      },
      "transfer_item": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/transfer_id"
          },
          "created_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "amount": {
            "$ref": "#/components/schemas/currency_amount"
          },
          "other_side": {
            "$ref": "#/components/schemas/transfer_other_side"
          },
          "state": {
            "$ref": "#/components/schemas/transfer_state"
          },
          "direction": {
            "$ref": "#/components/schemas/transfer_direction"
          },
          "updated_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "required": [
          "currency",
          "id",
          "amount",
          "state",
          "other_side",
          "updated_timestamp",
          "created_timestamp"
        ],
        "type": "object"
      },
      "address_book_item": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/wallet_currency"
          },
          "address": {
            "$ref": "#/components/schemas/currency_address"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "label": {
            "$ref": "#/components/schemas/address_label"
          },
          "beneficiary_vasp_name": {
            "$ref": "#/components/schemas/beneficiary_vasp_name"
          },
          "beneficiary_vasp_did": {
            "$ref": "#/components/schemas/beneficiary_vasp_did"
          },
          "beneficiary_vasp_website": {
            "$ref": "#/components/schemas/beneficiary_vasp_website"
          },
          "beneficiary_first_name": {
            "$ref": "#/components/schemas/beneficiary_first_name"
          },
          "beneficiary_last_name": {
            "$ref": "#/components/schemas/beneficiary_last_name"
          },
          "beneficiary_company_name": {
            "$ref": "#/components/schemas/beneficiary_company_name"
          },
          "beneficiary_address": {
            "$ref": "#/components/schemas/beneficiary_address"
          },
          "agreed": {
            "$ref": "#/components/schemas/agree_to_share_with_3rd_party"
          },
          "personal": {
            "$ref": "#/components/schemas/personal_wallet"
          },
          "info_required": {
            "$ref": "#/components/schemas/address_info_required"
          },
          "status": {
            "$ref": "#/components/schemas/status"
          },
          "waiting_timestamp": {
            "$ref": "#/components/schemas/waiting_timestamp"
          },
          "requires_confirmation": {
            "$ref": "#/components/schemas/requires_confirmation"
          },
          "requires_confirmation_change": {
            "$ref": "#/components/schemas/requires_confirmation_change"
          }
        },
        "required": [
          "currency",
          "address",
          "creation_timestamp"
        ],
        "type": "object"
      },
      "address_beneficiary_item": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "address": {
            "$ref": "#/components/schemas/currency_address"
          },
          "tag": {
            "description": "Tag for XRP addresses (optional)",
            "nullable": true,
            "type": "string"
          },
          "user_id": {
            "$ref": "#/components/schemas/user_id"
          },
          "agreed": {
            "$ref": "#/components/schemas/agree_to_share_with_3rd_party"
          },
          "personal": {
            "$ref": "#/components/schemas/personal_wallet"
          },
          "unhosted": {
            "$ref": "#/components/schemas/unhosted_wallet"
          },
          "beneficiary_vasp_name": {
            "$ref": "#/components/schemas/beneficiary_vasp_name"
          },
          "beneficiary_vasp_did": {
            "$ref": "#/components/schemas/beneficiary_vasp_did"
          },
          "beneficiary_vasp_website": {
            "$ref": "#/components/schemas/beneficiary_vasp_website"
          },
          "beneficiary_first_name": {
            "$ref": "#/components/schemas/beneficiary_first_name"
          },
          "beneficiary_last_name": {
            "$ref": "#/components/schemas/beneficiary_last_name"
          },
          "beneficiary_company_name": {
            "$ref": "#/components/schemas/beneficiary_company_name"
          },
          "beneficiary_address": {
            "$ref": "#/components/schemas/beneficiary_address"
          },
          "created": {
            "$ref": "#/components/schemas/timestamp"
          },
          "updated": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "required": [
          "currency",
          "address",
          "user_id",
          "agreed",
          "personal",
          "unhosted",
          "beneficiary_vasp_name",
          "beneficiary_vasp_did",
          "beneficiary_address",
          "created",
          "updated"
        ],
        "type": "object"
      },
      "address_ownership_item": {
        "properties": {
          "owner_vasp_did": {
            "$ref": "#/components/schemas/did"
          },
          "address": {
            "$ref": "#/components/schemas/currency_address"
          },
          "address_type": {
            "$ref": "#/components/schemas/currency_address_type"
          },
          "asset": {
            "$ref": "#/components/schemas/currency"
          },
          "source": {
            "$ref": "#/components/schemas/source"
          }
        },
        "required": [
          "owner_vasp_did",
          "address",
          "address_type",
          "asset",
          "source"
        ],
        "type": "object"
      },
      "vasp_item": {
        "properties": {
          "did": {
            "$ref": "#/components/schemas/did"
          },
          "jurisdictions": {
            "$ref": "#/components/schemas/jurisdictions"
          },
          "name": {
            "$ref": "#/components/schemas/vasp_name"
          }
        },
        "required": [
          "did",
          "name"
        ],
        "type": "object"
      },
      "withdrawal": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/currency_address"
          },
          "amount": {
            "$ref": "#/components/schemas/currency_amount"
          },
          "confirmed_timestamp": {
            "example": 1536569522277,
            "nullable": true,
            "description": "The timestamp (milliseconds since the Unix epoch) of withdrawal confirmation, `null` when not confirmed",
            "type": "integer"
          },
          "created_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "fee": {
            "$ref": "#/components/schemas/fee"
          },
          "id": {
            "example": 1,
            "description": "Withdrawal id in Deribit system",
            "type": "integer"
          },
          "priority": {
            "example": 1.0,
            "description": "Id of priority level",
            "type": "number"
          },
          "state": {
            "$ref": "#/components/schemas/withdrawal_state"
          },
          "transaction_id": {
            "$ref": "#/components/schemas/currency_transaction_id"
          },
          "updated_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "required": [
          "currency",
          "address",
          "amount",
          "state",
          "transaction_id",
          "updated_timestamp"
        ],
        "type": "object"
      },
      "deposit": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "address": {
            "$ref": "#/components/schemas/currency_address"
          },
          "amount": {
            "$ref": "#/components/schemas/currency_amount"
          },
          "state": {
            "$ref": "#/components/schemas/deposit_state"
          },
          "transaction_id": {
            "$ref": "#/components/schemas/currency_transaction_id"
          },
          "source_address": {
            "$ref": "#/components/schemas/currency_address"
          },
          "received_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "updated_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "note": {
            "type": "string"
          },
          "clearance_state": {
            "$ref": "#/components/schemas/clearance_state"
          },
          "refund_transaction_id": {
            "$ref": "#/components/schemas/currency_transaction_id"
          }
        },
        "required": [
          "currency",
          "address",
          "amount",
          "state",
          "transaction_id",
          "received_timestamp",
          "updated_timestamp"
        ],
        "type": "object"
      },
      "portfolio": {
        "properties": {
          "btc": {
            "$ref": "#/components/schemas/currency_portfolio"
          },
          "eth": {
            "$ref": "#/components/schemas/currency_portfolio"
          }
        },
        "required": [
          "btc",
          "eth"
        ],
        "type": "object"
      },
      "trades_volumes": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "calls_volume": {
            "description": "Total 24h trade volume for call options.",
            "example": 20.1,
            "type": "number"
          },
          "puts_volume": {
            "description": "Total 24h trade volume for put options.",
            "example": 60.2,
            "type": "number"
          },
          "futures_volume": {
            "description": "Total 24h trade volume for futures.",
            "example": 30.5178,
            "type": "number"
          },
          "spot_volume": {
            "description": "Total 24h trade for spot.",
            "example": 11.6,
            "type": "number"
          },
          "calls_volume_7d": {
            "description": "Total 7d trade volume for call options.",
            "example": 75.6,
            "type": "number"
          },
          "puts_volume_7d": {
            "description": "Total 7d trade volume for put options.",
            "example": 356.9,
            "type": "number"
          },
          "futures_volume_7d": {
            "description": "Total 7d trade volume for futures.",
            "example": 213.8841,
            "type": "number"
          },
          "spot_volume_7d": {
            "description": "Total 7d trade for spot.",
            "example": 64.8,
            "type": "number"
          },
          "calls_volume_30d": {
            "description": "Total 30d trade volume for call options.",
            "example": 547.3,
            "type": "number"
          },
          "puts_volume_30d": {
            "description": "Total 30d trade volume for put options.",
            "example": 785.5,
            "type": "number"
          },
          "futures_volume_30d": {
            "description": "Total 30d trade volume for futures.",
            "example": 998.2128,
            "type": "number"
          },
          "spot_volume_30d": {
            "description": "Total 30d trade for spot.",
            "example": 310.5,
            "type": "number"
          }
        },
        "required": [
          "currency",
          "futures_volume",
          "puts_volume",
          "calls_volume"
        ],
        "type": "object"
      },
      "currency_portfolio": {
        "properties": {
          "margin_balance": {
            "type": "number"
          },
          "currency": {
            "enum": [
              "btc",
              "eth"
            ],
            "type": "string"
          },
          "maintenance_margin": {
            "type": "number"
          },
          "initial_margin": {
            "type": "number"
          },
          "equity": {
            "type": "number"
          },
          "balance": {
            "type": "number"
          },
          "available_withdrawal_funds": {
            "type": "number"
          },
          "available_funds": {
            "type": "number"
          },
          "additional_reserve": {
            "$ref": "#/components/schemas/additional_reserve"
          },
          "spot_reserve": {
            "type": "number"
          }
        },
        "required": [
          "margin_balance",
          "currency",
          "maintenance_margin",
          "initial_margin",
          "equity",
          "balance",
          "available_withdrawal_funds",
          "available_funds",
          "additional_reserve",
          "spot_reserve"
        ],
        "type": "object"
      },
      "api_key": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/key_id"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "client_id": {
            "$ref": "#/components/schemas/client_id"
          },
          "client_secret": {
            "$ref": "#/components/schemas/client_secret"
          },
          "public_key": {
            "$ref": "#/components/schemas/public_key"
          },
          "max_scope": {
            "$ref": "#/components/schemas/max_scope"
          },
          "enabled": {
            "$ref": "#/components/schemas/api_key_enabled"
          },
          "default": {
            "$ref": "#/components/schemas/api_key_default"
          },
          "name": {
            "$ref": "#/components/schemas/api_key_name"
          },
          "enabled_features": {
            "$ref": "#/components/schemas/api_key_features"
          },
          "ip_whitelist": {
            "description": "List of IP addresses whitelisted for a selected key",
            "type": "array"
          }
        },
        "required": [
          "id",
          "timestamp",
          "client_id",
          "client_secret",
          "max_scope",
          "default"
        ],
        "type": "object"
      },
      "security_key": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/security_key_id"
          },
          "name": {
            "$ref": "#/components/schemas/security_key_name"
          },
          "assignments": {
            "$ref": "#/components/schemas/security_key_assignments"
          },
          "timestamp": {
            "$ref": "#/components/schemas/security_key_timestamp"
          },
          "last_used": {
            "$ref": "#/components/schemas/security_key_last_used"
          }
        },
        "required": [
          "id",
          "name",
          "assignments",
          "timestamp",
          "last_used"
        ],
        "type": "object"
      },
      "access_log": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "ip": {
            "description": "IP address of source that generated action",
            "type": "string"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "country": {
            "description": "Country where the IP address is registered (estimated)",
            "type": "string"
          },
          "city": {
            "description": "City where the IP address is registered (estimated)",
            "type": "string"
          },
          "log": {
            "description": "Action description, values: `changed_email` - email was changed; `changed_password` - password was changed; `disabled_tfa` - TFA was disabled; `enabled_tfa` - TFA was enabled, `success` - successful login; `failure` - login failure; `enabled_subaccount_login` - login was enabled for subaccount (in `data` - subaccount uid); `disabled_subaccount_login` - login was disabled for subbaccount (in `data` - subbacount uid);`new_api_key` - API key was created (in `data` key client id); `removed_api_key` - API key was removed (in `data` key client id); `changed_scope` - scope of API key was changed (in `data` key client id); `changed_whitelist` - whitelist of API key was edited (in `data` key client id); `disabled_api_key` - API key was disabled (in `data` key client id); `enabled_api_key` - API key was enabled (in `data` key client id); `reset_api_key` - API key was reset (in `data` key client id)",
            "type": "string"
          },
          "data": {
            "description": "Optional, additional information about action, type depends on `log` value",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          }
        },
        "required": [
          "id",
          "ip",
          "timestamp",
          "country",
          "city",
          "log"
        ],
        "type": "object"
      },
      "order": {
        "properties": {
          "order_id": {
            "$ref": "#/components/schemas/order_id"
          },
          "order_state": {
            "$ref": "#/components/schemas/order_state"
          },
          "order_type": {
            "$ref": "#/components/schemas/order_type"
          },
          "original_order_type": {
            "$ref": "#/components/schemas/original_order_type"
          },
          "time_in_force": {
            "$ref": "#/components/schemas/time_in_force"
          },
          "is_rebalance": {
            "description": "Optional (only for spot). `true` if order was automatically created during cross-collateral balance restoration",
            "type": "boolean"
          },
          "is_liquidation": {
            "description": "Optional (not added for spot). `true` if order was automatically created during liquidation",
            "type": "boolean"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "last_update_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "direction": {
            "$ref": "#/components/schemas/direction"
          },
          "price": {
            "$ref": "#/components/schemas/open_order_price"
          },
          "label": {
            "$ref": "#/components/schemas/label"
          },
          "post_only": {
            "$ref": "#/components/schemas/post_only"
          },
          "reject_post_only": {
            "$ref": "#/components/schemas/reject_post_only"
          },
          "reduce_only": {
            "$ref": "#/components/schemas/reduce_only"
          },
          "api": {
            "$ref": "#/components/schemas/api"
          },
          "web": {
            "$ref": "#/components/schemas/web"
          },
          "mobile": {
            "$ref": "#/components/schemas/mobile"
          },
          "refresh_amount": {
            "$ref": "#/components/schemas/refresh_amount"
          },
          "display_amount": {
            "$ref": "#/components/schemas/display_amount"
          },
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "contracts": {
            "$ref": "#/components/schemas/contracts"
          },
          "filled_amount": {
            "$ref": "#/components/schemas/filled_amount"
          },
          "average_price": {
            "$ref": "#/components/schemas/average_price"
          },
          "advanced": {
            "$ref": "#/components/schemas/advanced"
          },
          "implv": {
            "$ref": "#/components/schemas/implv"
          },
          "usd": {
            "$ref": "#/components/schemas/usd"
          },
          "triggered": {
            "$ref": "#/components/schemas/triggered"
          },
          "trigger": {
            "$ref": "#/components/schemas/trigger"
          },
          "trigger_price": {
            "$ref": "#/components/schemas/trigger_price"
          },
          "trigger_offset": {
            "$ref": "#/components/schemas/trigger_offset"
          },
          "trigger_reference_price": {
            "$ref": "#/components/schemas/trigger_reference_price"
          },
          "block_trade": {
            "$ref": "#/components/schemas/block_trade_order"
          },
          "mmp": {
            "description": "`true` if the order is a MMP order, otherwise `false`.",
            "type": "boolean"
          },
          "risk_reducing": {
            "description": "`true` if the order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users), otherwise `false`.",
            "type": "boolean"
          },
          "replaced": {
            "description": "`true` if the order was edited (by user or - in case of advanced options orders - by pricing engine), otherwise `false`.",
            "type": "boolean"
          },
          "auto_replaced": {
            "description": "Options, advanced orders only - `true` if last modification of the order was performed by the pricing engine, otherwise `false`.",
            "type": "boolean"
          },
          "quote": {
            "description": "If order is a quote. Present only if true.",
            "type": "boolean"
          },
          "mmp_group": {
            "description": "Name of the MMP group supplied in the `private/mass_quote` request. Only present for quote orders.",
            "type": "string"
          },
          "quote_set_id": {
            "description": "Identifier of the QuoteSet supplied in the `private/mass_quote` request. Only present for quote orders.",
            "type": "string"
          },
          "quote_id": {
            "description": "The same QuoteID as supplied in the `private/mass_quote` request. Only present for quote orders.",
            "type": "string"
          },
          "trigger_order_id": {
            "description": "Id of the trigger order that created the order (Only for orders that were created by triggered orders).",
            "example": "SLIB-370",
            "type": "string"
          },
          "app_name": {
            "description": "The name of the application that placed the order on behalf of the user (optional).",
            "example": "Example Application",
            "type": "string"
          },
          "mmp_cancelled": {
            "description": "`true` if order was cancelled by mmp trigger (optional)",
            "example": true,
            "type": "boolean"
          },
          "cancel_reason": {
            "$ref": "#/components/schemas/cancel_reason"
          },
          "oto_order_ids": {
            "description": "The Ids of the orders that will be triggered if the order is filled",
            "items": {
              "description": "Order Id",
              "$ref": "#/components/schemas/order_id"
            },
            "type": "array"
          },
          "trigger_fill_condition": {
            "$ref": "#/components/schemas/trigger_fill_condition"
          },
          "oco_ref": {
            "$ref": "#/components/schemas/oco_ref"
          },
          "primary_order_id": {
            "description": "ID of the order that triggered this order.",
            "$ref": "#/components/schemas/order_id"
          },
          "is_secondary_oto": {
            "$ref": "#/components/schemas/is_secondary_oto"
          },
          "is_primary_otoco": {
            "description": "`true` if the order is an order that can trigger an OCO pair, otherwise not present.",
            "type": "boolean"
          }
        },
        "required": [
          "order_id",
          "order_state",
          "order_type",
          "time_in_force",
          "creation_timestamp",
          "last_update_timestamp",
          "direction",
          "price",
          "label",
          "post_only",
          "api"
        ],
        "type": "object"
      },
      "orders": {
        "items": {
          "$ref": "#/components/schemas/order"
        },
        "type": "array"
      },
      "price_index": {
        "example": "btc_usdc",
        "description": "Name of price index that is used for this instrument",
        "type": "string"
      },
      "trigger_order_history_record": {
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "trigger": {
            "$ref": "#/components/schemas/trigger"
          },
          "trigger_price": {
            "$ref": "#/components/schemas/trigger_price"
          },
          "trigger_offset": {
            "$ref": "#/components/schemas/trigger_offset"
          },
          "trigger_order_id": {
            "example": "SLTB-187015",
            "description": "Id of the user order used for the trigger-order reference before triggering",
            "type": "string"
          },
          "order_id": {
            "$ref": "#/components/schemas/order_id"
          },
          "order_state": {
            "$ref": "#/components/schemas/order_state_stop"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "request": {
            "example": "trigger:order",
            "description": "Type of last request performed on the trigger order by user or system. `\"cancel\"` - when order was cancelled, `\"trigger:order\"` - when trigger order spawned market or limit order after being triggered",
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/direction"
          },
          "price": {
            "$ref": "#/components/schemas/price"
          },
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "last_update_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "reduce_only": {
            "$ref": "#/components/schemas/reduce_only"
          },
          "post_only": {
            "$ref": "#/components/schemas/post_only"
          },
          "order_type": {
            "description": "Requested order type: `\"limit` or `\"market\"`",
            "enum": [
              "limit",
              "market"
            ],
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/label_presentation"
          },
          "is_secondary_oto": {
            "$ref": "#/components/schemas/is_secondary_oto"
          },
          "oco_ref": {
            "$ref": "#/components/schemas/oco_ref"
          },
          "source": {
            "example": "api",
            "description": "Source of the order that is linked to the trigger order.",
            "type": "string"
          }
        },
        "required": [
          "trigger",
          "timestamp",
          "trigger_price",
          "trigger_order_id",
          "order_state",
          "request",
          "post_only",
          "order_type",
          "price",
          "order_id",
          "instrument_name",
          "amount",
          "direction",
          "reduce_only"
        ],
        "type": "object"
      },
      "settlement": {
        "properties": {
          "funding": {
            "description": "funding (in base currency ; settlement for perpetual product only)",
            "example": -2.511e-06,
            "type": "number"
          },
          "funded": {
            "description": "funded amount (bankruptcy only)",
            "example": 0,
            "type": "number"
          },
          "index_price": {
            "description": "underlying index price at time of event (in quote currency; settlement and delivery only)",
            "example": 11008.37,
            "type": "number"
          },
          "instrument_name": {
            "description": "instrument name (settlement and delivery only)",
            "example": "BTC-30MAR18",
            "type": "string"
          },
          "mark_price": {
            "description": "mark price for at the settlement time (in quote currency; settlement and delivery only)",
            "example": 11000,
            "type": "number"
          },
          "position": {
            "description": "position size (in quote currency; settlement and delivery only)",
            "example": 1000,
            "type": "number"
          },
          "profit_loss": {
            "description": "profit and loss (in base currency; settlement and delivery only)",
            "example": 0,
            "type": "number"
          },
          "session_bankruptcy": {
            "description": "value of session bankruptcy (in base currency; bankruptcy only)",
            "example": 0.001160788,
            "type": "number"
          },
          "session_profit_loss": {
            "description": "total value of session profit and losses (in base currency)",
            "example": 0.001160788,
            "type": "number"
          },
          "session_tax": {
            "description": "total amount of paid taxes/fees (in base currency; bankruptcy only)",
            "example": -0.001160788,
            "type": "number"
          },
          "session_tax_rate": {
            "description": "rate of paid taxes/fees (in base currency; bankruptcy only)",
            "example": 0.000103333,
            "type": "number"
          },
          "socialized": {
            "description": "the amount of the socialized losses (in base currency; bankruptcy only)",
            "example": -0.001160788,
            "type": "number"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "required": [
          "timestamp",
          "session_profit_loss",
          "position",
          "instrument_name",
          "index_price",
          "funding"
        ],
        "type": "object"
      },
      "public_trade": {
        "properties": {
          "trade_id": {
            "$ref": "#/components/schemas/trade_id"
          },
          "trade_seq": {
            "$ref": "#/components/schemas/trade_seq"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "timestamp": {
            "$ref": "#/components/schemas/trade_timestamp"
          },
          "direction": {
            "description": "Trade direction of the taker",
            "$ref": "#/components/schemas/direction"
          },
          "tick_direction": {
            "$ref": "#/components/schemas/tick_direction"
          },
          "index_price": {
            "description": "Index Price at the moment of trade",
            "type": "number"
          },
          "price": {
            "description": "The price of the trade",
            "$ref": "#/components/schemas/price"
          },
          "amount": {
            "description": "Trade amount. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "type": "number"
          },
          "contracts": {
            "description": "Trade size in contract units (optional, may be absent in historical trades)",
            "type": "number"
          },
          "iv": {
            "description": "Option implied volatility for the price (Option only)",
            "type": "number"
          },
          "liquidation": {
            "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
            "enum": [
              "M",
              "T",
              "MT"
            ],
            "type": "string"
          },
          "mark_price": {
            "description": "Mark Price at the moment of trade",
            "type": "number"
          },
          "block_trade_id": {
            "$ref": "#/components/schemas/block_trade_id_in_result"
          },
          "block_trade_leg_count": {
            "$ref": "#/components/schemas/block_trade_leg_count"
          },
          "combo_id": {
            "description": "Optional field containing combo instrument name if the trade is a combo trade",
            "type": "string"
          },
          "combo_trade_id": {
            "description": "Optional field containing combo trade identifier if the trade is a combo trade",
            "type": "number"
          },
          "block_rfq_id": {
            "description": "ID of the Block RFQ - when trade was part of the Block RFQ",
            "type": "integer"
          }
        },
        "required": [
          "trade_id",
          "instrument_name",
          "timestamp",
          "trade_seq",
          "direction",
          "tick_direction",
          "index_price",
          "price",
          "amount",
          "mark_price"
        ],
        "type": "object"
      },
      "user_trade": {
        "properties": {
          "trade_id": {
            "$ref": "#/components/schemas/trade_id"
          },
          "trade_seq": {
            "$ref": "#/components/schemas/trade_seq"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "timestamp": {
            "$ref": "#/components/schemas/trade_timestamp"
          },
          "order_type": {
            "description": "Order type: `\"limit`, `\"market\"`, or `\"liquidation\"`",
            "enum": [
              "limit",
              "market",
              "liquidation"
            ],
            "type": "string"
          },
          "advanced": {
            "description": "Advanced type of user order: `\"usd\"` or `\"implv\"` (only for options; omitted if not applicable)",
            "enum": [
              "usd",
              "implv"
            ],
            "type": "string"
          },
          "order_id": {
            "description": "Id of the user order (maker or taker), i.e. subscriber's order id that took part in the trade",
            "type": "string"
          },
          "matching_id": {
            "description": "Always `null`",
            "type": "string"
          },
          "direction": {
            "description": "Trade direction of the taker",
            "$ref": "#/components/schemas/direction"
          },
          "tick_direction": {
            "$ref": "#/components/schemas/tick_direction"
          },
          "index_price": {
            "description": "Index Price at the moment of trade",
            "type": "number"
          },
          "price": {
            "description": "The price of the trade",
            "$ref": "#/components/schemas/price"
          },
          "amount": {
            "description": "Trade amount. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "type": "number"
          },
          "contracts": {
            "description": "Trade size in contract units (optional, may be absent in historical trades)",
            "type": "number"
          },
          "iv": {
            "description": "Option implied volatility for the price (Option only)",
            "type": "number"
          },
          "underlying_price": {
            "description": "Underlying price for implied volatility calculations (Options only)",
            "type": "number"
          },
          "liquidation": {
            "description": "Optional field (only for trades caused by liquidation): `\"M\"` when maker side of trade was under liquidation, `\"T\"` when taker side was under liquidation, `\"MT\"` when both sides of trade were under liquidation",
            "enum": [
              "M",
              "T",
              "MT"
            ],
            "type": "string"
          },
          "liquidity": {
            "description": "Describes what was role of users order: `\"M\"` when it was maker order, `\"T\"` when it was taker order",
            "enum": [
              "M",
              "T"
            ],
            "type": "string"
          },
          "fee": {
            "description": "User's fee in units of the specified `fee_currency`",
            "type": "number"
          },
          "fee_currency": {
            "$ref": "#/components/schemas/currency"
          },
          "label": {
            "$ref": "#/components/schemas/label_presentation"
          },
          "state": {
            "$ref": "#/components/schemas/order_state_in_user_trade"
          },
          "block_trade_id": {
            "$ref": "#/components/schemas/block_trade_id_in_result"
          },
          "block_rfq_id": {
            "description": "ID of the Block RFQ - when trade was part of the Block RFQ",
            "type": "integer"
          },
          "block_rfq_quote_id": {
            "description": "ID of the Block RFQ quote - when trade was part of the Block RFQ",
            "type": "integer"
          },
          "reduce_only": {
            "description": "`true` if user order is reduce-only",
            "type": "string"
          },
          "post_only": {
            "description": "`true` if user order is post-only",
            "type": "string"
          },
          "mmp": {
            "description": "`true` if user order is MMP",
            "type": "boolean"
          },
          "risk_reducing": {
            "description": "`true` if user order is marked by the platform as a risk reducing order (can apply only to orders placed by PM users)",
            "type": "boolean"
          },
          "api": {
            "description": "`true` if user order was created with API",
            "type": "boolean"
          },
          "profit_loss": {
            "$ref": "#/components/schemas/profit_loss"
          },
          "mark_price": {
            "description": "Mark Price at the moment of trade",
            "type": "number"
          },
          "legs": {
            "description": "Optional field containing leg trades if trade is a combo trade (present when querying for **only** combo trades and in `combo_trades` events)",
            "type": "array"
          },
          "combo_id": {
            "description": "Optional field containing combo instrument name if the trade is a combo trade",
            "type": "string"
          },
          "combo_trade_id": {
            "description": "Optional field containing combo trade identifier if the trade is a combo trade",
            "type": "number"
          },
          "quote_set_id": {
            "description": "QuoteSet of the user order (optional, present only for orders placed with `private/mass_quote`)",
            "type": "string"
          },
          "quote_id": {
            "description": "QuoteID of the user order (optional, present only for orders placed with `private/mass_quote`)",
            "type": "string"
          },
          "trade_allocations": {
            "description": "List of allocations for Block RFQ pre-allocation. Each allocation specifies `user_id`, `amount`, and `fee` for the allocated part of the trade. For broker client allocations, a `client_info` object will be included.",
            "items": {
              "properties": {
                "user_id": {
                  "description": "User ID to which part of the trade is allocated. For brokers the User ID is obstructed.",
                  "type": "integer"
                },
                "amount": {
                  "description": "Amount allocated to this user.",
                  "type": "number"
                },
                "fee": {
                  "description": "Fee for the allocated part of the trade.",
                  "type": "number"
                },
                "client_info": {
                  "description": "Optional client allocation info for brokers.",
                  "properties": {
                    "client_id": {
                      "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                      "type": "integer"
                    },
                    "client_link_id": {
                      "description": "ID assigned to a single user in a client; available to broker.",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of the linked user within the client; available to broker.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [
                "amount",
                "fee"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "trade_id",
          "trade_seq",
          "instrument_name",
          "timestamp",
          "order_id",
          "matching_id",
          "direction",
          "tick_direction",
          "index_price",
          "price",
          "amount",
          "fee",
          "fee_currency",
          "state",
          "mark_price"
        ],
        "type": "object"
      },
      "pending_block_trade": {
        "properties": {
          "nonce": {
            "description": "Nonce that can be used to approve or reject pending block trade.",
            "example": "bF1_gfgcsd",
            "type": "string"
          },
          "timestamp": {
            "description": "Timestamp that can be used to approve or reject pending block trade.",
            "type": "integer"
          },
          "trades": {
            "items": {
              "$ref": "#/components/schemas/pending_block_trade"
            },
            "type": "array"
          },
          "app_name": {
            "description": "The name of the application that executed the block trade on behalf of the user (optional).",
            "example": "Example Application",
            "type": "string"
          },
          "username": {
            "description": "Username of the user who initiated the block trade.",
            "example": "Trader",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/role"
          },
          "user_id": {
            "$ref": "#/components/schemas/user_id"
          },
          "broker_code": {
            "description": "Broker code associated with the broker block trade.",
            "example": "jpqYKgg1",
            "type": "string"
          },
          "broker_name": {
            "description": "Name of the broker associated with the block trade.",
            "example": "Test Broker",
            "type": "string"
          },
          "state": {
            "description": "State of the pending block trade for current user.",
            "properties": {
              "value": {
                "description": "State value.",
                "enum": [
                  "initial",
                  "accepted",
                  "rejected",
                  "executed"
                ],
                "type": "string"
              },
              "timestamp": {
                "description": "State timestamp.",
                "type": "integer"
              }
            },
            "required": [
              "value",
              "timestamp"
            ],
            "type": "object"
          },
          "counterparty_state": {
            "description": "State of the pending block trade for the other party (optional).",
            "properties": {
              "value": {
                "description": "State value.",
                "enum": [
                  "initial",
                  "accepted",
                  "rejected",
                  "executed"
                ],
                "type": "string"
              },
              "timestamp": {
                "description": "State timestamp.",
                "type": "integer"
              }
            },
            "required": [
              "value",
              "timestamp"
            ],
            "type": "object"
          },
          "combo_id": {
            "description": "Combo instrument identifier",
            "example": "BTC-CS-27JUN25-80000_85000",
            "type": "string"
          }
        },
        "required": [
          "nonce",
          "timestamp",
          "trades",
          "app_name",
          "role",
          "user_id",
          "state"
        ],
        "type": "object"
      },
      "combo": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/combo_id"
          },
          "instrument_id": {
            "$ref": "#/components/schemas/instrument_id"
          },
          "state": {
            "$ref": "#/components/schemas/combo_state"
          },
          "state_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "creation_timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "legs": {
            "items": {
              "$ref": "#/components/schemas/combo_leg"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "combo_leg": {
        "properties": {
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "amount": {
            "$ref": "#/components/schemas/combo_leg_amount"
          }
        },
        "type": "object"
      },
      "position_move_trade": {
        "properties": {
          "source_uid": {
            "description": "Trade source uid",
            "type": "integer"
          },
          "target_uid": {
            "description": "Trade target uid",
            "type": "integer"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "direction": {
            "description": "Trade direction from source perspective",
            "$ref": "#/components/schemas/direction"
          },
          "price": {
            "description": "The price of the trade",
            "$ref": "#/components/schemas/price"
          },
          "amount": {
            "description": "Trade amount. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "type": "number"
          }
        },
        "required": [
          "instrument_name",
          "direction",
          "price",
          "amount"
        ],
        "type": "object"
      },
      "instrument": {
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/kind"
          },
          "settlement_currency": {
            "description": "Optional (not added for spot). Settlement currency for the instrument.",
            "enum": [
              "BTC",
              "ETH"
            ],
            "type": "string"
          },
          "counter_currency": {
            "description": "Counter currency for the instrument.",
            "enum": [
              "USD",
              "USDC"
            ],
            "type": "string"
          },
          "base_currency": {
            "description": "The underlying currency being traded.",
            "enum": [
              "BTC",
              "ETH"
            ],
            "type": "string"
          },
          "quote_currency": {
            "description": "The currency in which the instrument prices are quoted.",
            "enum": [
              "USD"
            ],
            "type": "string"
          },
          "min_trade_amount": {
            "description": "Minimum amount for trading. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "example": 0.1,
            "type": "number"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "instrument_id": {
            "$ref": "#/components/schemas/instrument_id"
          },
          "is_active": {
            "description": "Indicates if the instrument can currently be traded.",
            "type": "boolean"
          },
          "settlement_period": {
            "description": "Optional (not added for spot). The settlement period.",
            "enum": [
              "month",
              "week",
              "perpetual"
            ],
            "type": "string"
          },
          "creation_timestamp": {
            "description": "The time when the instrument was first created (milliseconds since the UNIX epoch).",
            "example": 1536569522277,
            "type": "integer"
          },
          "tick_size": {
            "example": 0.0001,
            "description": "Specifies minimal price change and, as follows, the number of decimal places for instrument prices.",
            "type": "number"
          },
          "tick_size_steps": {
            "$ref": "#/components/schemas/tick_size_step"
          },
          "expiration_timestamp": {
            "description": "The time when the instrument will expire (milliseconds since the UNIX epoch).",
            "type": "integer"
          },
          "strike": {
            "description": "The strike value (only for options).",
            "type": "number"
          },
          "option_type": {
            "description": "The option type (only for options).",
            "enum": [
              "call",
              "put"
            ],
            "type": "string"
          },
          "future_type": {
            "description": "Future type (only for futures)(field is deprecated and will be removed in the future, `instrument_type` should be used instead).",
            "enum": [
              "linear",
              "reversed"
            ],
            "type": "string"
          },
          "instrument_type": {
            "description": "Type of the instrument. `linear` or `reversed`",
            "type": "string"
          },
          "contract_size": {
            "description": "Contract size for instrument.",
            "example": 1,
            "type": "integer"
          },
          "maker_commission": {
            "description": "Maker commission for instrument.",
            "example": 0.0001,
            "type": "number"
          },
          "taker_commission": {
            "description": "Taker commission for instrument.",
            "example": 0.0005,
            "type": "number"
          },
          "max_liquidation_commission": {
            "description": "Maximal liquidation trade commission for instrument (only for futures).",
            "example": 0.001,
            "type": "number"
          },
          "block_trade_commission": {
            "description": "Block Trade commission for instrument.",
            "example": 0.0005,
            "type": "number"
          },
          "block_trade_tick_size": {
            "description": "Specifies minimal price change for block trading.",
            "example": 0.01,
            "type": "number"
          },
          "block_trade_min_trade_amount": {
            "description": "Minimum amount for block trading.",
            "example": 25,
            "type": "number"
          },
          "max_leverage": {
            "description": "Maximal leverage for instrument (only for futures).",
            "example": 100,
            "type": "integer"
          },
          "price_index": {
            "$ref": "#/components/schemas/price_index"
          }
        },
        "required": [
          "kind",
          "base_currency",
          "quote_currency",
          "min_trade_amount",
          "instrument_name",
          "is_active",
          "settlement_period",
          "creation_timestamp",
          "tick_size",
          "expiration_timestamp",
          "contract_size",
          "price_index"
        ],
        "type": "object"
      },
      "currency": {
        "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
        "enum": [
          "BTC",
          "ETH",
          "USDC",
          "USDT",
          "EURR"
        ],
        "type": "string"
      },
      "currency_with_apr": {
        "properties": {
          "withdrawal_fee": {
            "description": "The total transaction fee paid for withdrawals",
            "example": 0.0001,
            "type": "number"
          },
          "withdrawal_priorities": {
            "items": {
              "$ref": "#/components/schemas/key_number_pair"
            },
            "type": "array"
          },
          "min_withdrawal_fee": {
            "description": "The minimum transaction fee paid for withdrawals",
            "example": 0.0001,
            "type": "number"
          },
          "currency": {
            "description": "The abbreviation of the currency. This abbreviation is used elsewhere in the API to identify the currency.",
            "example": "BTC",
            "type": "string"
          },
          "currency_long": {
            "description": "The full name for the currency.",
            "example": "Bitcoin",
            "type": "string"
          },
          "min_confirmations": {
            "description": "Minimum number of block chain confirmations before deposit is accepted.",
            "example": 2,
            "type": "integer"
          },
          "coin_type": {
            "description": "The type of the currency.",
            "enum": [
              "BITCOIN",
              "ETHER"
            ],
            "type": "string"
          },
          "in_cross_collateral_pool": {
            "description": "`true` if the currency is part of the cross collateral pool",
            "type": "boolean"
          },
          "apr": {
            "description": "Simple Moving Average (SMA) of the last 7 days of rewards. If fewer than 7 days of reward data are available, the APR is calculated as the average of the available rewards. Only applicable to yield-generating tokens (`USDE`, `STETH`, `USDC`, `BUILD`).",
            "type": "number"
          },
          "network_fee": {
            "description": "The network fee",
            "example": 0.0001,
            "type": "number"
          },
          "network_currency": {
            "description": "The currency of the network",
            "example": "BTC",
            "type": "string"
          },
          "decimals": {
            "description": "The number of decimal places for the currency",
            "example": 6,
            "type": "integer"
          }
        },
        "required": [
          "currency",
          "currency_long",
          "withdrawal_fee",
          "coin_type",
          "in_cross_collateral_pool"
        ],
        "type": "object"
      },
      "key_number_pair": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "order_id_initial_margin_pair": {
        "properties": {
          "order_id": {
            "$ref": "#/components/schemas/order_id"
          },
          "initial_margin": {
            "description": "Initial margin of order",
            "type": "number"
          },
          "initial_margin_currency": {
            "description": "Currency of initial margin",
            "type": "string"
          }
        },
        "required": [
          "order_id",
          "initial_margin"
        ],
        "type": "object"
      },
      "user_change": {
        "properties": {
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "trades": {
            "items": {
              "$ref": "#/components/schemas/user_trade"
            },
            "type": "array"
          },
          "orders": {
            "items": {
              "$ref": "#/components/schemas/order"
            },
            "type": "array"
          },
          "position": {
            "items": {
              "$ref": "#/components/schemas/position"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "block_trade": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/block_trade_id"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "trades": {
            "items": {
              "$ref": "#/components/schemas/user_trade"
            },
            "type": "array"
          },
          "app_name": {
            "description": "The name of the application that executed the block trade on behalf of the user (optional).",
            "example": "Example Application",
            "type": "string"
          },
          "broker_code": {
            "description": "Broker code associated with the broker block trade.",
            "example": "2krM7sJsx",
            "type": "string"
          },
          "broker_name": {
            "description": "Name of the broker associated with the block trade.",
            "example": "Test Broker",
            "type": "string"
          }
        },
        "required": [
          "id",
          "timestamp",
          "trades"
        ],
        "type": "object"
      },
      "position_move": {
        "properties": {
          "trades": {
            "items": {
              "$ref": "#/components/schemas/position_move_trade"
            },
            "type": "array"
          }
        },
        "required": [
          "trades"
        ],
        "type": "object"
      },
      "transaction_log": {
        "properties": {
          "id": {
            "$ref": "#/components/schemas/id"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "timestamp": {
            "$ref": "#/components/schemas/timestamp"
          },
          "user_id": {
            "$ref": "#/components/schemas/user_id"
          },
          "username": {
            "$ref": "#/components/schemas/username"
          },
          "commission": {
            "$ref": "#/components/schemas/commission"
          },
          "cashflow": {
            "description": "For futures and perpetual contracts: Realized session PNL (since last settlement). For options: the amount paid or received for the options traded.",
            "type": "number"
          },
          "balance": {
            "description": "Cash balance after the transaction",
            "type": "number"
          },
          "change": {
            "description": "Change in cash balance. For trades: fees and options premium paid/received. For settlement: Futures session PNL and perpetual session funding.",
            "type": "number"
          },
          "user_seq": {
            "description": "Sequential identifier of user transaction",
            "type": "integer"
          },
          "info": {
            "description": "Additional information regarding transaction. Strongly dependent on the log entry type",
            "type": "object"
          },
          "equity": {
            "description": "Updated equity value after the transaction",
            "type": "number"
          },
          "mark_price": {
            "description": "Market price during the trade",
            "type": "number"
          },
          "settlement_price": {
            "description": "The settlement price for the instrument during the delivery",
            "type": "number"
          },
          "index_price": {
            "description": "The index price for the instrument during the delivery",
            "type": "number"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "position": {
            "description": "Updated position size after the transaction",
            "type": "number"
          },
          "side": {
            "description": "One of: `short` or `long` in case of settlements, `close sell` or `close buy` in case of deliveries, `open sell`, `open buy`, `close sell`, `close buy` in case of trades",
            "type": "string"
          },
          "amount": {
            "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "type": "number"
          },
          "price": {
            "description": "Settlement/delivery price or the price level of the traded contracts",
            "type": "number"
          },
          "price_currency": {
            "description": "Currency symbol associated with the `price` field value",
            "type": "string"
          },
          "trade_id": {
            "$ref": "#/components/schemas/trade_id"
          },
          "order_id": {
            "$ref": "#/components/schemas/order_id"
          },
          "user_role": {
            "$ref": "#/components/schemas/role"
          },
          "fee_role": {
            "$ref": "#/components/schemas/fee_role"
          },
          "profit_as_cashflow": {
            "description": "Indicator informing whether the cashflow is waiting for settlement or not",
            "type": "boolean"
          },
          "interest_pl": {
            "description": "Actual funding rate of trades and settlements on perpetual instruments",
            "type": "number"
          },
          "block_rfq_id": {
            "description": "ID of the Block RFQ - when trade was part of the Block RFQ",
            "type": "integer"
          },
          "ip": {
            "description": "The IP address from which the trade was initiated",
            "type": "string"
          },
          "session_rpl": {
            "$ref": "#/components/schemas/rpl"
          },
          "session_upl": {
            "$ref": "#/components/schemas/upl"
          },
          "total_interest_pl": {
            "description": "Total session funding rate",
            "type": "number"
          },
          "contracts": {
            "$ref": "#/components/schemas/contracts"
          }
        },
        "required": [
          "id",
          "currency",
          "timestamp",
          "user_id",
          "commission",
          "cashflow",
          "balance",
          "change",
          "user_seq"
        ],
        "type": "object"
      },
      "get_balance": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "equity": {
            "description": "Equity of the main account",
            "type": "number"
          },
          "available_withdrawal_funds": {
            "description": "Funds available for withdrawal",
            "type": "number"
          },
          "total_equity": {
            "description": "Equity of the main account + subaccounts",
            "type": "number"
          },
          "custody": {
            "description": "Custody balance",
            "type": "number"
          },
          "pnl": {
            "description": "Profit net loss of the user (total_equity - custody)",
            "type": "number"
          },
          "encrypted": {
            "description": "The encrypted result json in base64 format. It can be used to verify that values are generated by Deribit.",
            "type": "number"
          }
        },
        "required": [
          "currency",
          "equity",
          "available_withdrawal_funds",
          "total_equity",
          "custody",
          "pnl"
        ],
        "type": "object"
      },
      "get_custody_balance": {
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "equity": {
            "description": "Equity of the main account",
            "type": "number"
          },
          "available_withdrawal_funds": {
            "description": "Funds available for withdrawal",
            "type": "number"
          },
          "total_equity": {
            "description": "Equity of the main account + subaccounts. Takes into account external equity.",
            "type": "number"
          },
          "custody": {
            "description": "Custody balance",
            "type": "number"
          },
          "pnl": {
            "description": "Profit net loss of the user (total_equity - custody)",
            "type": "number"
          },
          "encrypted": {
            "description": "The encrypted result json in base64 format. It can be used to verify that values are generated by Deribit.",
            "type": "number"
          }
        },
        "required": [
          "currency",
          "equity",
          "available_withdrawal_funds",
          "total_equity",
          "custody",
          "pnl"
        ],
        "type": "object"
      },
      "withdrawal_policy_mode": {
        "description": "Withdrawal Policy mode, i.e. `\"manual\"`, `\"automated\"`, `\"suspended\"`",
        "enum": [
          "manual",
          "automated",
          "suspended"
        ],
        "type": "string"
      },
      "withdrawal_policy_limits": {
        "properties": {
          "h24": {
            "$ref": "#/components/schemas/withdrawal_policy_limit_buckets"
          }
        },
        "required": [
          "h24"
        ],
        "type": "object"
      },
      "expirations": {
        "description": "A map where each key is valid currency (e.g. btc, eth, usdc), and the value is a list of expirations or a map where each key is a valid kind (future or options) and value is a list of expirations from every instrument",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/currency_with_any_and_grouped"
          },
          "kind": {
            "$ref": "#/components/schemas/kind_future_or_option_with_any"
          }
        },
        "type": "object"
      },
      "ErrorMessageResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": "integer"
          }
        },
        "required": [
          "jsonrpc",
          "message",
          "error"
        ],
        "type": "object"
      },
      "OkResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "Result of method execution. `ok` in case of success",
            "enum": [
              "ok"
            ],
            "type": "string"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetTimeResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "Current timestamp (milliseconds since the UNIX epoch)",
            "example": 1517329113791,
            "type": "integer"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetInstrumentsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/instrument"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetInstrumentResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/instrument"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetExpirationsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/expirations"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetFundingRateHistoryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "timestamp": {
                  "$ref": "#/components/schemas/timestamp"
                },
                "prev_index_price": {
                  "$ref": "#/components/schemas/price"
                },
                "index_price": {
                  "$ref": "#/components/schemas/price"
                },
                "interest_1h": {
                  "description": "1hour interest rate",
                  "type": "number"
                },
                "interest_8h": {
                  "description": "8hour interest rate",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetFundingRateValueResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "type": "number"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetFundingChartDataResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "current_interest": {
                "description": "Current interest",
                "example": 0.005000670552845,
                "type": "number"
              },
              "interest_8h": {
                "description": "Current interest 8h",
                "example": 0.0040080896931,
                "type": "number"
              },
              "data": {
                "items": {
                  "properties": {
                    "timestamp": {
                      "$ref": "#/components/schemas/timestamp"
                    },
                    "index_price": {
                      "$ref": "#/components/schemas/index_price"
                    },
                    "interest_8h": {
                      "description": "Historical interest 8h value",
                      "example": 0.004999511380756577,
                      "type": "number"
                    }
                  },
                  "required": [
                    "timestamp",
                    "index_price",
                    "interest_8h"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "current_interest",
              "data",
              "interest_8h"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetTradingviewChartDataResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "status": {
                "description": "Status of the query: `ok` or `no_data`",
                "enum": [
                  "ok",
                  "no_data"
                ],
                "type": "string"
              },
              "ticks": {
                "description": "Values of the time axis given in milliseconds since UNIX epoch",
                "items": {
                  "$ref": "#/components/schemas/timestamp"
                },
                "type": "array"
              },
              "volume": {
                "description": "List of volume bars (in base currency, one per candle)",
                "items": {
                  "$ref": "#/components/schemas/chart_volume"
                },
                "type": "array"
              },
              "cost": {
                "description": "List of cost bars (volume in quote currency, one per candle)",
                "items": {
                  "$ref": "#/components/schemas/chart_volume"
                },
                "type": "array"
              },
              "open": {
                "description": "List of prices at open (one per candle)",
                "items": {
                  "$ref": "#/components/schemas/quote_price"
                },
                "type": "array"
              },
              "close": {
                "description": "List of prices at close (one per candle)",
                "items": {
                  "$ref": "#/components/schemas/quote_price"
                },
                "type": "array"
              },
              "high": {
                "description": "List of highest price levels (one per candle)",
                "items": {
                  "$ref": "#/components/schemas/quote_price"
                },
                "type": "array"
              },
              "low": {
                "description": "List of lowest price levels (one per candle)",
                "items": {
                  "$ref": "#/components/schemas/quote_price"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetVolatilityIndexDataResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "Volatility index candles.",
            "properties": {
              "data": {
                "description": "Candles as an array of arrays with 5 values each. The inner values correspond to the timestamp in ms, open, high, low, and close values of the volatility index correspondingly.",
                "type": "array"
              },
              "continuation": {
                "description": "Continuation - to be used as the `end_timestamp` parameter on the next request. `NULL` when no continuation.",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetMarkPriceHistoryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "Markprice history values as an array of arrays with 2 values each. The inner values correspond to the timestamp in ms and the markprice itself.",
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetCurrenciesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/currency_with_apr"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetHistoricalVolatilityResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "integer"
                },
                "value": {
                  "type": "number"
                }
              },
              "required": [
                "timestamp",
                "value"
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetDeliveryPricesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "records_total": {
                "description": "Available delivery prices",
                "example": 120,
                "type": "number"
              },
              "data": {
                "items": {
                  "properties": {
                    "date": {
                      "$ref": "#/components/schemas/date"
                    },
                    "delivery_price": {
                      "$ref": "#/components/schemas/delivery_price"
                    }
                  },
                  "required": [
                    "date",
                    "delivery_price"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "records_total",
              "data"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetContractSizeResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "contract_size": {
                "$ref": "#/components/schemas/contract_size"
              }
            },
            "required": [
              "contract_size"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetAprHistoryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "continuation": {
                "$ref": "#/components/schemas/continuation"
              },
              "data": {
                "items": {
                  "properties": {
                    "day": {
                      "description": "The full epoch day",
                      "type": "integer"
                    },
                    "apr": {
                      "description": "The APR of the day",
                      "type": "number"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "data"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicAuthResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "access_token": {
                "example": "843SehgeX5n6XxEU4XbABx4Cny5Akai5iHiJePTsvUw7",
                "type": "string"
              },
              "token_type": {
                "description": "Authorization type, allowed value - `bearer`",
                "enum": [
                  "bearer"
                ],
                "type": "string"
              },
              "expires_in": {
                "description": "Token lifetime in seconds",
                "example": 315360000,
                "type": "integer"
              },
              "refresh_token": {
                "description": "Can be used to request a new token (with a new lifetime)",
                "example": "6faf8L36JdaSqsjCEEiwqifPpj6JB18RWwiWHrsGTZ91",
                "type": "string"
              },
              "scope": {
                "description": "Type of the access for assigned token",
                "type": "string"
              },
              "state": {
                "description": "Copied from the input (if applicable)",
                "type": "string"
              },
              "sid": {
                "description": "Optional Session id",
                "type": "string"
              },
              "enabled_features": {
                "$ref": "#/components/schemas/api_key_features"
              },
              "mandatory_tfa_status": {
                "description": "2FA is required for privileged methods",
                "example": "enabled",
                "type": "string"
              },
              "google_login": {
                "description": "The access token was acquired by logging in through Google.",
                "type": "boolean"
              }
            },
            "required": [
              "access_token",
              "token_type",
              "expires_in",
              "refresh_token",
              "scope"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicTokenResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "access_token": {
                "example": "843SehgeX5n6XxEU4XbABx4Cny5Akai5iHiJePTsvUw7",
                "type": "string"
              },
              "token_type": {
                "description": "Authorization type, allowed value - `bearer`",
                "enum": [
                  "bearer"
                ],
                "type": "string"
              },
              "expires_in": {
                "description": "Token lifetime in seconds",
                "example": 315360000,
                "type": "integer"
              },
              "refresh_token": {
                "description": "Can be used to request a new token (with a new lifetime)",
                "example": "6faf8L36JdaSqsjCEEiwqifPpj6JB18RWwiWHrsGTZ91",
                "type": "string"
              },
              "scope": {
                "description": "Type of the access for assigned token",
                "type": "string"
              },
              "sid": {
                "description": "Optional Session id",
                "type": "string"
              }
            },
            "required": [
              "access_token",
              "token_type",
              "expires_in",
              "refresh_token",
              "scope"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicTickerResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicTickersByExpirationResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicTradesHistoryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "trades": {
                "items": {
                  "$ref": "#/components/schemas/public_trade"
                },
                "type": "array"
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "trades",
              "has_more"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicTestResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "version": {
                "description": "The API version",
                "example": "2.1.26",
                "type": "string"
              }
            },
            "required": [
              "version"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicStatusResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "locked": {
                "description": "`true` when platform is locked in all currencies, `partial` when some currencies are locked, `false` - when there are not currencies locked",
                "type": "string"
              },
              "locked_indices": {
                "description": "List of currency indices locked platform-wise",
                "type": "array"
              }
            },
            "required": [
              "locked"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicSettlementResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "continuation": {
                "$ref": "#/components/schemas/continuation"
              },
              "settlements": {
                "items": {
                  "$ref": "#/components/schemas/settlement"
                },
                "type": "array"
              }
            },
            "required": [
              "continuation",
              "settlements"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetAnnouncementsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "body": {
                  "description": "The HTML body of the announcement",
                  "example": "An&nbsp;announcement",
                  "type": "string"
                },
                "publication_timestamp": {
                  "description": "The timestamp (milliseconds since the Unix epoch) of announcement publication",
                  "example": 1527844253000,
                  "type": "integer"
                },
                "id": {
                  "description": "A unique identifier for the announcement",
                  "example": 19288317,
                  "type": "number"
                },
                "important": {
                  "description": "Whether the announcement is marked as important",
                  "example": false,
                  "type": "boolean"
                },
                "confirmation": {
                  "description": "Whether the user confirmation is required for this announcement",
                  "example": false,
                  "type": "boolean"
                },
                "title": {
                  "description": "The title of the announcement",
                  "example": "Example announcement",
                  "type": "string"
                }
              },
              "required": [
                "title",
                "body",
                "important",
                "id",
                "publication_timestamp"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetOrderBookResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetBookSummaryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/book_summary"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetIndexPriceResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "index_price": {
                "description": "Value of requested index",
                "example": 11628.81,
                "type": "number"
              },
              "estimated_delivery_price": {
                "description": "Estimated delivery price for the market. For more details, see Documentation > General > Expiration Price",
                "example": 11628.81,
                "type": "number"
              }
            },
            "required": [
              "index_price",
              "estimated_delivery_price"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetIndexPriceNamesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "name": {
                  "description": "Index name",
                  "type": "string"
                },
                "future_combo_creation_enabled": {
                  "description": "Whether future combo creation is enabled for this index (only present when `extended`=`true`)",
                  "type": "boolean"
                },
                "option_combo_creation_enabled": {
                  "description": "Whether option combo creation is enabled for this index (only present when `extended`=`true`)",
                  "type": "boolean"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetTradesVolumesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/trades_volumes"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetSecurityKeysResetDataResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "email": {
                "description": "Email of account which Security Keys are about to reset",
                "example": "support@deribit.com",
                "type": "string"
              }
            },
            "required": [
              "email"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetCombosResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/combo"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetComboIdsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/combo_id"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetComboDetailsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/combo"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateCreateComboResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/combo"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetLegPricesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "legs": {
                "$ref": "#/components/schemas/leg_structure"
              },
              "amount": {
                "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
                "type": "number"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetPositionResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/position_with_elp"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetPositionsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/position_with_elp"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateSubscribeResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "A list of subscribed channels.",
            "items": {
              "example": "deribit_price_index.btc_usd",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetOrderMarginByIdsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/order_id_initial_margin_pair"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateBuyAndSellResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "order": {
                "$ref": "#/components/schemas/order"
              },
              "trades": {
                "items": {
                  "$ref": "#/components/schemas/user_trade"
                },
                "type": "array"
              }
            },
            "required": [
              "order",
              "trades"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetOrderStateResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/order"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetOrderStateByLabelResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/orders"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetTriggerOrderHistoryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "entries": {
                "items": {
                  "$ref": "#/components/schemas/trigger_order_history_record"
                },
                "type": "array"
              },
              "continuation": {
                "$ref": "#/components/schemas/continuation"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetSubaccountsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "username": {
                  "type": "string"
                },
                "id": {
                  "description": "Account/Subaccount identifier",
                  "type": "integer"
                },
                "email": {
                  "description": "User email",
                  "type": "string"
                },
                "not_confirmed_email": {
                  "description": "New email address that has not yet been confirmed. This field is only included if `with_portfolio` == `true`.",
                  "type": "string"
                },
                "security_keys_enabled": {
                  "description": "Whether the Security Keys authentication is enabled",
                  "type": "boolean"
                },
                "security_keys_assignments": {
                  "description": "Names of assignments with Security Keys assigned",
                  "type": "array"
                },
                "system_name": {
                  "description": "System generated user nickname",
                  "type": "string"
                },
                "receive_notifications": {
                  "description": "When `true` - receive all notification emails on the main email",
                  "type": "boolean"
                },
                "is_password": {
                  "description": "`true` when password for the subaccount has been configured",
                  "type": "boolean"
                },
                "margin_model": {
                  "description": "Margin model",
                  "type": "string"
                },
                "proof_id": {
                  "description": "hashed identifier used in the Proof Of Liability for the subaccount. This identifier allows you to find your entries in the Deribit Proof-Of-Reserves files. IMPORTANT: Keep it secret to not disclose your entries in the Proof-Of-Reserves.",
                  "type": "string"
                },
                "proof_id_signature": {
                  "description": "signature used as a base string for proof_id hash. IMPORTANT: Keep it secret to not disclose your entries in the Proof-Of-Reserves.",
                  "type": "string"
                },
                "login_enabled": {
                  "description": "Informs whether login to the subaccount is enabled",
                  "type": "boolean"
                },
                "portfolio": {
                  "description": "Only if with_portfolio == true",
                  "$ref": "#/components/schemas/portfolio"
                }
              },
              "required": [
                "username",
                "email",
                "type",
                "tfa_enabled",
                "receive_notifications",
                "is_password",
                "system_name",
                "id"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetSubaccountsDetailsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "uid": {
                  "description": "Account/Subaccount identifier",
                  "type": "integer"
                },
                "positions": {
                  "items": {
                    "$ref": "#/components/schemas/position"
                  },
                  "type": "array"
                },
                "open_orders": {
                  "items": {
                    "$ref": "#/components/schemas/order"
                  },
                  "type": "array"
                }
              },
              "required": [
                "uid",
                "positions"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateCreateSubaccountResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "email": {
                "description": "User email",
                "example": "user_ABC@deribit.com",
                "type": "string"
              },
              "login_enabled": {
                "description": "Informs whether login to the subaccount is enabled",
                "type": "boolean"
              },
              "is_password": {
                "description": "`true` when password for the subaccount has been configured",
                "type": "boolean"
              },
              "receive_notifications": {
                "description": "When `true` - receive all notification emails on the main email",
                "type": "boolean"
              },
              "system_name": {
                "description": "System generated user nickname",
                "type": "string"
              },
              "security_keys_enabled": {
                "description": "Whether the Security Keys authentication is enabled",
                "type": "boolean"
              },
              "username": {
                "description": "Account name (given by user)",
                "type": "string"
              },
              "id": {
                "description": "Subaccount identifier",
                "type": "integer"
              },
              "portfolio": {
                "$ref": "#/components/schemas/portfolio"
              }
            },
            "required": [
              "username",
              "type",
              "id",
              "login_enabled",
              "is_password",
              "receive_notifications",
              "system_name",
              "tfa_enabled",
              "email"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetUserTradesByOrderResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          }
        },
        "required": [
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetUserTradesHistoryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "trades": {
                "items": {
                  "$ref": "#/components/schemas/user_trade"
                },
                "type": "array"
              },
              "has_more": {
                "type": "boolean"
              }
            },
            "required": [
              "trades",
              "has_more"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetDepositsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/deposit"
                },
                "type": "array"
              },
              "count": {
                "$ref": "#/components/schemas/result_count"
              }
            },
            "required": [
              "data",
              "count"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateWithdrawResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/withdrawal"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetWithdrawalsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/withdrawal"
                },
                "type": "array"
              },
              "count": {
                "$ref": "#/components/schemas/result_count"
              }
            },
            "required": [
              "data",
              "count"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateDepositAddressResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "Object if address is created, null otherwise",
            "properties": {
              "creation_timestamp": {
                "$ref": "#/components/schemas/timestamp"
              },
              "currency": {
                "$ref": "#/components/schemas/currency"
              },
              "address": {
                "$ref": "#/components/schemas/currency_address"
              }
            },
            "required": [
              "creation_timestamp",
              "currency",
              "address",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateAddressBookResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/address_book_item"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateAddToAddressBookResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/address_book_item"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateRemoveFromAddressBookResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "ok",
            "example": "ok",
            "type": "string"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateUpdateInAddressBookResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "ok",
            "example": "ok",
            "type": "string"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateSaveAddressBeneficiaryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/address_beneficiary_item"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetAddressBeneficiaryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/address_beneficiary_item"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateDeleteAddressBeneficiaryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "ok",
            "example": "ok",
            "type": "string"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateListAddressBeneficiariesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/address_beneficiary_item"
                },
                "type": "array"
              },
              "continuation": {
                "$ref": "#/components/schemas/continuation"
              },
              "count": {
                "description": "Total number of results available",
                "example": 42,
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetTransfersResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "data": {
                "items": {
                  "$ref": "#/components/schemas/transfer_item"
                },
                "type": "array"
              },
              "count": {
                "$ref": "#/components/schemas/result_count"
              }
            },
            "required": [
              "data",
              "count"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateSubmitTransferResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/transfer_item"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetRewardEligibilityResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "eligibility_status": {
                "enum": [
                  "eligible",
                  "partially_eligible",
                  "non_eligible"
                ],
                "description": "`eligible`: User can get reward for specific currency for all its equity `partially_eligible`: User can get reward for specific currency, but custody balance is excluded `non_eligible`: User can not get reward for specific currency",
                "type": "string"
              },
              "apr_sma7": {
                "description": "Simple Moving Average (SMA) of the last 7 days of rewards for the currency",
                "example": 4.156,
                "type": "number"
              }
            },
            "required": [
              "eligibility_status",
              "apr_sma7"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateAccountResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "total_pl": {
                "description": "Profit and loss",
                "example": 0.02032221,
                "type": "number"
              },
              "session_rpl": {
                "$ref": "#/components/schemas/rpl"
              },
              "session_upl": {
                "$ref": "#/components/schemas/upl"
              },
              "available_funds": {
                "description": "The account's available funds. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                "example": 2.2638913,
                "type": "number"
              },
              "available_withdrawal_funds": {
                "description": "The account's available to withdrawal funds",
                "example": 2.26,
                "type": "number"
              },
              "margin_balance": {
                "description": "The account's margin balance. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                "example": 2.25,
                "type": "number"
              },
              "balance": {
                "description": "The account's balance",
                "example": 3.4906363,
                "type": "number"
              },
              "spot_reserve": {
                "description": "The account's balance reserved in active spot orders",
                "example": 0.3,
                "type": "number"
              },
              "additional_reserve": {
                "$ref": "#/components/schemas/additional_reserve"
              },
              "fee_balance": {
                "$ref": "#/components/schemas/fee_balance"
              },
              "currency": {
                "description": "The selected currency",
                "example": "ETH",
                "type": "string"
              },
              "delta_total": {
                "$ref": "#/components/schemas/delta_total"
              },
              "projected_delta_total": {
                "$ref": "#/components/schemas/projected_delta_total"
              },
              "deposit_address": {
                "description": "The deposit address for the account (if available)",
                "example": "14diAAyXL5UzhPTCKC998ch2GV7DMb7yDi",
                "type": "string"
              },
              "email": {
                "description": "User email (available when parameter `extended` = `true`)",
                "example": "support@deribit.com",
                "type": "string"
              },
              "equity": {
                "description": "The account's current equity",
                "example": 2.6437733,
                "type": "number"
              },
              "futures_pl": {
                "description": "Futures profit and Loss",
                "example": 0,
                "type": "number"
              },
              "futures_session_rpl": {
                "description": "Futures session realized profit and Loss",
                "example": 0,
                "type": "number"
              },
              "futures_session_upl": {
                "description": "Futures session unrealized profit and Loss",
                "example": 0,
                "type": "number"
              },
              "initial_margin": {
                "description": "The account's initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                "example": 0.379882,
                "type": "number"
              },
              "maintenance_margin": {
                "description": "The maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                "example": 0.1334519,
                "type": "number"
              },
              "estimated_liquidation_ratio": {
                "$ref": "#/components/schemas/estimated_liquidation_ratio"
              },
              "system_name": {
                "description": "System generated user nickname (available when parameter `extended` = `true`)",
                "example": "myname",
                "type": "string"
              },
              "options_delta": {
                "description": "Options summary delta",
                "example": 0,
                "type": "number"
              },
              "options_gamma": {
                "description": "Options summary gamma",
                "example": 0,
                "type": "number"
              },
              "options_pl": {
                "description": "Options profit and Loss",
                "example": 0,
                "type": "number"
              },
              "options_session_rpl": {
                "description": "Options session realized profit and Loss",
                "example": 0,
                "type": "number"
              },
              "options_session_upl": {
                "description": "Options session unrealized profit and Loss",
                "example": 0,
                "type": "number"
              },
              "options_theta": {
                "description": "Options summary theta",
                "example": 0,
                "type": "number"
              },
              "options_value": {
                "description": "Options value",
                "example": 0,
                "type": "number"
              },
              "options_vega": {
                "description": "Options summary vega",
                "example": 0,
                "type": "number"
              },
              "options_gamma_map": {
                "description": "Map of options' gammas per index",
                "type": "object"
              },
              "options_theta_map": {
                "description": "Map of options' thetas per index",
                "type": "object"
              },
              "options_vega_map": {
                "description": "Map of options' vegas per index",
                "type": "object"
              },
              "security_keys_enabled": {
                "description": "Whether Security Key authentication is enabled (available when parameter `extended` = `true`)",
                "example": false,
                "type": "boolean"
              },
              "mmp_enabled": {
                "description": "Whether MMP is enabled (available when parameter `extended` = `true`)",
                "example": false,
                "type": "boolean"
              },
              "projected_initial_margin": {
                "$ref": "#/components/schemas/projected_initial_margin"
              },
              "projected_maintenance_margin": {
                "$ref": "#/components/schemas/projected_maintenance_margin"
              },
              "username": {
                "description": "Account name (given by user) (available when parameter `extended` = `true`)",
                "example": "name",
                "type": "string"
              },
              "login_enabled": {
                "description": "Whether account is loginable using email and password (available when parameter `extended` = `true` and account is a subaccount)",
                "example": false,
                "type": "boolean"
              },
              "id": {
                "description": "Account id (available when parameter `extended` = `true`)",
                "example": 12354,
                "type": "integer"
              },
              "portfolio_margining_enabled": {
                "example": true,
                "description": "`true` when portfolio margining is enabled for user",
                "type": "boolean"
              },
              "cross_collateral_enabled": {
                "example": true,
                "description": "When `true` cross collateral is enabled for user",
                "type": "boolean"
              },
              "margin_model": {
                "example": "segregated_sm",
                "description": "Name of user's currently enabled margin model",
                "type": "string"
              },
              "total_equity_usd": {
                "description": "Optional (only for users using cross margin). The account's total equity in all cross collateral currencies, expressed in USD",
                "example": 2.6437733,
                "type": "number"
              },
              "total_initial_margin_usd": {
                "description": "Optional (only for users using cross margin). The account's total initial margin in all cross collateral currencies, expressed in USD",
                "example": 0.379882,
                "type": "number"
              },
              "total_maintenance_margin_usd": {
                "description": "Optional (only for users using cross margin). The account's total maintenance margin in all cross collateral currencies, expressed in USD",
                "example": 0.1334519,
                "type": "number"
              },
              "total_margin_balance_usd": {
                "description": "Optional (only for users using cross margin). The account's total margin balance in all cross collateral currencies, expressed in USD",
                "example": 2.25,
                "type": "number"
              },
              "total_delta_total_usd": {
                "description": "Optional (only for users using cross margin). The account's total delta total in all cross collateral currencies, expressed in USD",
                "example": 1.8,
                "type": "number"
              },
              "interuser_transfers_enabled": {
                "example": false,
                "description": "`true` when the inter-user transfers are enabled for user (available when parameter `extended` = `true`)",
                "type": "boolean"
              },
              "referrer_id": {
                "description": "Optional identifier of the referrer (of the affiliation program, and available when parameter `extended` = `true`), which link was used by this account at registration. It coincides with suffix of the affiliation link path after `/reg-`",
                "example": "517.6035",
                "type": "string"
              },
              "limits": {
                "$ref": "#/components/schemas/api_limits"
              },
              "creation_timestamp": {
                "description": "Time at which the account was created (milliseconds since the Unix epoch; available when parameter `extended` = `true`)",
                "example": 1542100802842,
                "type": "integer"
              },
              "has_non_block_chain_equity": {
                "description": "Optional field returned with value `true` when user has non block chain equity that is excluded from proof of reserve calculations",
                "type": "boolean"
              },
              "self_trading_reject_mode": {
                "description": "Self trading rejection behavior - `reject_taker` or `cancel_maker` (available when parameter `extended` = `true`)",
                "type": "string"
              },
              "self_trading_extended_to_subaccounts": {
                "description": "`true` if self trading rejection behavior is applied to trades between subaccounts (available when parameter `extended` = `true`)",
                "type": "string"
              },
              "fees": {
                "description": "List of fee objects for all currency pairs and instrument types related to the currency (available when parameter `extended` = `true` and user has any discounts)",
                "items": {
                  "properties": {
                    "value": {
                      "properties": {
                        "default": {
                          "properties": {
                            "taker": {
                              "description": "Taker fee",
                              "type": "number"
                            },
                            "maker": {
                              "description": "Maker fee",
                              "type": "number"
                            }
                          },
                          "type": "object"
                        },
                        "settlement": {
                          "description": "Settlement fee",
                          "type": "number"
                        },
                        "block_trade": {
                          "description": "Block trade fee (if applicable)",
                          "type": "number"
                        }
                      },
                      "required": [
                        "default"
                      ],
                      "type": "object"
                    },
                    "kind": {
                      "description": "Type of the instruments the fee applies to - `future` for future instruments (excluding perpetual), `perpetual` for future perpetual instruments, `option` for options",
                      "type": "string"
                    },
                    "index_name": {
                      "description": "The currency pair this fee applies to",
                      "type": "string"
                    }
                  },
                  "required": [
                    "value",
                    "kind",
                    "index_name"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "equity",
              "currency",
              "maintenance_margin",
              "initial_margin",
              "available_funds",
              "available_withdrawal_funds",
              "balance",
              "session_upl",
              "session_rpl",
              "total_pl",
              "options_pl",
              "options_session_upl",
              "options_session_rpl",
              "options_delta",
              "options_gamma",
              "options_vega",
              "options_value",
              "options_theta",
              "futures_pl",
              "options_gamma_map",
              "options_theta_map",
              "options_vega_map",
              "futures_session_upl",
              "futures_session_rpl",
              "projected_maintenance_margin",
              "delta_total",
              "projected_delta_total",
              "security_keys_enabled",
              "system_name",
              "username",
              "email",
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateAccountSummariesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "id": {
                "description": "Account id (available when parameter `extended` = `true`)",
                "example": 12354,
                "type": "integer"
              },
              "system_name": {
                "description": "System generated user nickname (available when parameter `extended` = `true`)",
                "example": "myname",
                "type": "string"
              },
              "username": {
                "description": "Account name (given by user) (available when parameter `extended` = `true`)",
                "example": "name",
                "type": "string"
              },
              "login_enabled": {
                "description": "Whether account is loginable using email and password (available when parameter `extended` = `true` and account is a subaccount)",
                "example": false,
                "type": "boolean"
              },
              "email": {
                "description": "User email (available when parameter `extended` = `true`)",
                "example": "support@deribit.com",
                "type": "string"
              },
              "security_keys_enabled": {
                "description": "Whether Security Key authentication is enabled (available when parameter `extended` = `true`)",
                "example": false,
                "type": "boolean"
              },
              "mmp_enabled": {
                "description": "Whether MMP is enabled (available when parameter `extended` = `true`)",
                "example": false,
                "type": "boolean"
              },
              "interuser_transfers_enabled": {
                "example": false,
                "description": "`true` when the inter-user transfers are enabled for user (available when parameter `extended` = `true`)",
                "type": "boolean"
              },
              "referrer_id": {
                "description": "Optional identifier of the referrer (of the affiliation program, and available when parameter `extended` = `true`), which link was used by this account at registration. It coincides with suffix of the affiliation link path after `/reg-`",
                "example": "517.6035",
                "type": "string"
              },
              "creation_timestamp": {
                "description": "Time at which the account was created (milliseconds since the Unix epoch; available when parameter `extended` = `true`)",
                "example": 1542100802842,
                "type": "integer"
              },
              "self_trading_reject_mode": {
                "description": "Self trading rejection behavior - `reject_taker` or `cancel_maker` (available when parameter `extended` = `true`)",
                "type": "string"
              },
              "self_trading_extended_to_subaccounts": {
                "description": "`true` if self trading rejection behavior is applied to trades between subaccounts (available when parameter `extended` = `true`)",
                "type": "string"
              },
              "block_rfq_self_match_prevention": {
                "description": "When Block RFQ Self Match Prevention is enabled, it ensures that RFQs cannot be executed between accounts that belong to the same legal entity. This setting is independent of the general self-match prevention settings and must be configured separately.",
                "type": "string"
              },
              "summaries": {
                "description": "Aggregated list of per-currency account summaries",
                "items": {
                  "properties": {
                    "total_pl": {
                      "description": "Profit and loss",
                      "example": 0.02032221,
                      "type": "number"
                    },
                    "session_rpl": {
                      "$ref": "#/components/schemas/rpl"
                    },
                    "session_upl": {
                      "$ref": "#/components/schemas/upl"
                    },
                    "available_funds": {
                      "description": "The account's available funds. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                      "example": 2.2638913,
                      "type": "number"
                    },
                    "available_withdrawal_funds": {
                      "description": "The account's available to withdrawal funds",
                      "example": 2.26,
                      "type": "number"
                    },
                    "margin_balance": {
                      "description": "The account's margin balance. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                      "example": 2.25,
                      "type": "number"
                    },
                    "balance": {
                      "description": "The account's balance",
                      "example": 3.4906363,
                      "type": "number"
                    },
                    "spot_reserve": {
                      "description": "The account's balance reserved in active spot orders",
                      "example": 0.3,
                      "type": "number"
                    },
                    "additional_reserve": {
                      "$ref": "#/components/schemas/additional_reserve"
                    },
                    "fee_balance": {
                      "$ref": "#/components/schemas/fee_balance"
                    },
                    "currency": {
                      "description": "Currency of the summary",
                      "example": "ETH",
                      "type": "string"
                    },
                    "delta_total": {
                      "$ref": "#/components/schemas/delta_total"
                    },
                    "projected_delta_total": {
                      "$ref": "#/components/schemas/projected_delta_total"
                    },
                    "deposit_address": {
                      "description": "The deposit address for the account (if available)",
                      "example": "14diAAyXL5UzhPTCKC998ch2GV7DMb7yDi",
                      "type": "string"
                    },
                    "equity": {
                      "description": "The account's current equity",
                      "example": 2.6437733,
                      "type": "number"
                    },
                    "futures_pl": {
                      "description": "Futures profit and Loss",
                      "example": 0,
                      "type": "number"
                    },
                    "futures_session_rpl": {
                      "description": "Futures session realized profit and Loss",
                      "example": 0,
                      "type": "number"
                    },
                    "futures_session_upl": {
                      "description": "Futures session unrealized profit and Loss",
                      "example": 0,
                      "type": "number"
                    },
                    "initial_margin": {
                      "description": "The account's initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                      "example": 0.379882,
                      "type": "number"
                    },
                    "maintenance_margin": {
                      "description": "The maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                      "example": 0.1334519,
                      "type": "number"
                    },
                    "estimated_liquidation_ratio": {
                      "$ref": "#/components/schemas/estimated_liquidation_ratio"
                    },
                    "options_delta": {
                      "description": "Options summary delta",
                      "example": 0,
                      "type": "number"
                    },
                    "options_gamma": {
                      "description": "Options summary gamma",
                      "example": 0,
                      "type": "number"
                    },
                    "options_pl": {
                      "description": "Options profit and Loss",
                      "example": 0,
                      "type": "number"
                    },
                    "options_session_rpl": {
                      "description": "Options session realized profit and Loss",
                      "example": 0,
                      "type": "number"
                    },
                    "options_session_upl": {
                      "description": "Options session unrealized profit and Loss",
                      "example": 0,
                      "type": "number"
                    },
                    "options_theta": {
                      "description": "Options summary theta",
                      "example": 0,
                      "type": "number"
                    },
                    "options_value": {
                      "description": "Options value",
                      "example": 0,
                      "type": "number"
                    },
                    "options_vega": {
                      "description": "Options summary vega",
                      "example": 0,
                      "type": "number"
                    },
                    "options_gamma_map": {
                      "description": "Map of options' gammas per index",
                      "type": "object"
                    },
                    "options_theta_map": {
                      "description": "Map of options' thetas per index",
                      "type": "object"
                    },
                    "options_vega_map": {
                      "description": "Map of options' vegas per index",
                      "type": "object"
                    },
                    "projected_initial_margin": {
                      "$ref": "#/components/schemas/projected_initial_margin"
                    },
                    "projected_maintenance_margin": {
                      "$ref": "#/components/schemas/projected_maintenance_margin"
                    },
                    "portfolio_margining_enabled": {
                      "example": true,
                      "description": "`true` when portfolio margining is enabled for user",
                      "type": "boolean"
                    },
                    "cross_collateral_enabled": {
                      "example": true,
                      "description": "When `true` cross collateral is enabled for user",
                      "type": "boolean"
                    },
                    "margin_model": {
                      "example": "segregated_sm",
                      "description": "Name of user's currently enabled margin model",
                      "type": "string"
                    },
                    "total_equity_usd": {
                      "description": "Optional (only for users using cross margin). The account's total equity in all cross collateral currencies, expressed in USD",
                      "example": 2.6437733,
                      "type": "number"
                    },
                    "total_initial_margin_usd": {
                      "description": "Optional (only for users using cross margin). The account's total initial margin in all cross collateral currencies, expressed in USD",
                      "example": 0.379882,
                      "type": "number"
                    },
                    "total_maintenance_margin_usd": {
                      "description": "Optional (only for users using cross margin). The account's total maintenance margin in all cross collateral currencies, expressed in USD",
                      "example": 0.1334519,
                      "type": "number"
                    },
                    "total_margin_balance_usd": {
                      "description": "Optional (only for users using cross margin). The account's total margin balance in all cross collateral currencies, expressed in USD",
                      "example": 2.25,
                      "type": "number"
                    },
                    "total_delta_total_usd": {
                      "description": "Optional (only for users using cross margin). The account's total delta total in all cross collateral currencies, expressed in USD",
                      "example": 1.8,
                      "type": "number"
                    },
                    "limits": {
                      "$ref": "#/components/schemas/api_limits"
                    },
                    "has_non_block_chain_equity": {
                      "description": "Optional field returned with value `true` when user has non block chain equity that is excluded from proof of reserve calculations",
                      "type": "boolean"
                    },
                    "fees": {
                      "description": "List of fee objects for all currency pairs and instrument types related to the currency (available when parameter `extended` = `true` and user has any discounts)",
                      "items": {
                        "properties": {
                          "value": {
                            "properties": {
                              "default": {
                                "properties": {
                                  "taker": {
                                    "description": "Taker fee",
                                    "type": "number"
                                  },
                                  "maker": {
                                    "description": "Maker fee",
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "settlement": {
                                "description": "Settlement fee",
                                "type": "number"
                              },
                              "block_trade": {
                                "description": "Block trade fee (if applicable)",
                                "type": "number"
                              }
                            },
                            "required": [
                              "default"
                            ],
                            "type": "object"
                          },
                          "kind": {
                            "description": "Instrument type (e.g., future, perpetual, option)",
                            "type": "string"
                          },
                          "index_name": {
                            "description": "The currency pair this fee applies to",
                            "type": "string"
                          }
                        },
                        "required": [
                          "value",
                          "kind",
                          "index_name"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "equity",
                    "currency",
                    "maintenance_margin",
                    "initial_margin",
                    "available_funds",
                    "available_withdrawal_funds",
                    "balance",
                    "session_upl",
                    "session_rpl",
                    "total_pl",
                    "options_pl",
                    "options_session_upl",
                    "options_session_rpl",
                    "options_delta",
                    "options_gamma",
                    "options_vega",
                    "options_value",
                    "options_theta",
                    "futures_pl",
                    "options_gamma_map",
                    "options_theta_map",
                    "options_vega_map",
                    "futures_session_upl",
                    "futures_session_rpl",
                    "projected_maintenance_margin",
                    "delta_total",
                    "projected_delta_total"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "security_keys_enabled",
              "system_name",
              "username",
              "email",
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateCancelResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/order"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateCancelAllResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "Total number of successfully cancelled orders",
            "example": 7,
            "type": "number"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetEmailLanguageResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "The abbreviation of the language",
            "example": "en",
            "type": "string"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateEditResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "order": {
                "$ref": "#/components/schemas/order"
              },
              "trades": {
                "items": {
                  "$ref": "#/components/schemas/user_trade"
                },
                "type": "array"
              }
            },
            "required": [
              "order",
              "trades"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetOrderHistoryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/order"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetOpenOrdersResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/order"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateSettlementResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "continuation": {
                "$ref": "#/components/schemas/continuation"
              },
              "settlements": {
                "items": {
                  "$ref": "#/components/schemas/settlement"
                },
                "type": "array"
              }
            },
            "required": [
              "continuation",
              "settlements"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetMarginsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "buy": {
                "description": "Margin when buying",
                "example": 0.01681367,
                "type": "number"
              },
              "sell": {
                "description": "Margin when selling",
                "example": 0.01680479,
                "type": "number"
              },
              "min_price": {
                "$ref": "#/components/schemas/min_price"
              },
              "max_price": {
                "$ref": "#/components/schemas/max_price"
              }
            },
            "required": [
              "buy",
              "sell",
              "min_price",
              "max_price"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateApiKeyResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/api_key"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateCancelQuotesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "Total number of successfully cancelled quotes",
            "example": 3,
            "type": "number"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateMassQuoteResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "orders": {
                "items": {
                  "$ref": "#/components/schemas/order"
                },
                "type": "array"
              },
              "trades": {
                "items": {
                  "$ref": "#/components/schemas/user_trade"
                },
                "type": "array"
              },
              "errors_count": {
                "description": "Number of errors (present when `detailed` : `false`).",
                "type": "integer"
              },
              "pending_requests_count": {
                "description": "Number of pending quotes (present when `wait_for_response`: `false` and `detailed` : `false`).",
                "type": "integer"
              },
              "pending_requests": {
                "description": "List of pending quotes (present when `wait_for_response`: `false` and `detailed` : `true`).",
                "items": {
                  "properties": {
                    "instrument_name": {
                      "description": "Instrument name.",
                      "type": "string"
                    },
                    "side": {
                      "description": "Quote side - `bid` or `ask`.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "errors": {
                "description": "List of errors (present when `detailed` : `true`).",
                "items": {
                  "properties": {
                    "instrument_name": {
                      "description": "Instrument name.",
                      "type": "string"
                    },
                    "side": {
                      "description": "Quote side - `bid` or `ask`.",
                      "type": "string"
                    },
                    "error": {
                      "description": "Error data.",
                      "type": "object"
                    },
                    "code": {
                      "description": "Error code",
                      "type": "integer"
                    },
                    "message": {
                      "description": "Error message.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetMmpConfigResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "index_name": {
                  "$ref": "#/components/schemas/index_name"
                },
                "interval": {
                  "description": "MMP Interval in seconds, if set to 0 MMP is disabled",
                  "type": "integer"
                },
                "frozen_time": {
                  "description": "MMP frozen time in seconds, if set to 0 manual reset is required",
                  "type": "integer"
                },
                "mmp_group": {
                  "description": "Specified MMP Group",
                  "type": "string"
                },
                "quantity_limit": {
                  "description": "Quantity limit",
                  "type": "number"
                },
                "delta_limit": {
                  "description": "Delta limit",
                  "type": "number"
                },
                "vega_limit": {
                  "description": "Vega limit",
                  "type": "number"
                },
                "block_rfq": {
                  "description": "If true, indicates MMP configuration for Block RFQ. Block RFQ MMP settings are completely separate from normal order/quote MMP settings.",
                  "type": "boolean"
                },
                "trade_count_limit": {
                  "description": "For Block RFQ only. The maximum number of Block RFQ trades allowed in the lookback window. Each RFQ trade counts as +1 towards the limit (not individual legs). Works across all currency pairs.",
                  "type": "integer"
                }
              },
              "required": [
                "index_name",
                "interval",
                "frozen_time"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetMmpStatusResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "index_name": {
                  "$ref": "#/components/schemas/index_name"
                },
                "frozen_until": {
                  "description": "Timestamp (milliseconds since the UNIX epoch) until the user will be frozen - 0 means that the user is frozen until manual reset.",
                  "type": "integer"
                },
                "mmp_group": {
                  "description": "Triggered mmp group, this parameter is optional (appears only for Mass Quote orders trigger)",
                  "example": "MassQuoteBot7",
                  "type": "string"
                },
                "block_rfq": {
                  "description": "If true, indicates that the MMP status is for Block RFQ. Block RFQ MMP status is completely separate from normal order/quote MMP status.",
                  "example": false,
                  "type": "boolean"
                }
              },
              "required": [
                "index_name",
                "frozen_until",
                "mmp_group"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateSetMmpConfigResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "index_name": {
                  "$ref": "#/components/schemas/index_name"
                },
                "interval": {
                  "description": "MMP Interval in seconds, if set to 0 MMP is disabled",
                  "type": "integer"
                },
                "frozen_time": {
                  "description": "MMP frozen time in seconds, if set to 0 manual reset is required",
                  "type": "integer"
                },
                "mmp_group": {
                  "description": "Specified MMP Group",
                  "type": "string"
                },
                "quantity_limit": {
                  "description": "Quantity limit",
                  "type": "number"
                },
                "delta_limit": {
                  "description": "Delta limit",
                  "type": "number"
                },
                "vega_limit": {
                  "description": "Vega limit",
                  "type": "number"
                },
                "block_rfq": {
                  "description": "If true, indicates MMP configuration for Block RFQ. Block RFQ MMP settings are completely separate from normal order/quote MMP settings.",
                  "type": "boolean"
                },
                "trade_count_limit": {
                  "description": "For Block RFQ only. The maximum number of Block RFQ trades allowed in the lookback window. Each RFQ trade counts as +1 towards the limit (not individual legs). Works across all currency pairs.",
                  "type": "integer"
                }
              },
              "required": [
                "index_name",
                "interval",
                "frozen_time"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetAccessLogResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/access_log"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateChangeMarginModelResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "old_state": {
                  "description": "Represents portfolio state before change",
                  "properties": {
                    "maintenance_margin_rate": {
                      "description": "Maintenance margin rate before change",
                      "type": "number"
                    },
                    "initial_margin_rate": {
                      "description": "Initial margin rate before change",
                      "type": "number"
                    },
                    "available_balance": {
                      "description": "Available balance before change",
                      "type": "number"
                    }
                  },
                  "required": [
                    "maintenance_margin_rate",
                    "initial_margin_rate",
                    "available_balance"
                  ],
                  "type": "object"
                },
                "new_state": {
                  "description": "Represents portfolio state after change",
                  "properties": {
                    "maintenance_margin_rate": {
                      "description": "Maintenance margin rate after change",
                      "type": "number"
                    },
                    "initial_margin_rate": {
                      "description": "Initial margin rate after change",
                      "type": "number"
                    },
                    "available_balance": {
                      "description": "Available balance after change",
                      "type": "number"
                    }
                  },
                  "required": [
                    "maintenance_margin_rate",
                    "initial_margin_rate",
                    "available_balance"
                  ],
                  "type": "object"
                },
                "currency": {
                  "$ref": "#/components/schemas/currency"
                }
              },
              "required": [
                "old_state",
                "new_state",
                "currency"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetSecurityKeyActivationDataResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "activation_challenge": {
                "description": "Activation challenge, needs to be send with activation request",
                "type": "string"
              },
              "account": {
                "description": "Email address of current account",
                "type": "string"
              },
              "issuer": {
                "description": "Domain name",
                "type": "string"
              },
              "secret": {
                "description": "TFA Secret (for tfa type only)",
                "type": "string"
              },
              "data": {
                "description": "Data for U2F activation",
                "type": "object"
              }
            },
            "required": [
              "activation_challenge"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateListSecurityKeysResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/security_key"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetSecurityKeyStatusResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "mode": {
                "description": "Current Security Keys management mode",
                "enum": [
                  "basic",
                  "advanced"
                ],
                "type": "string"
              },
              "enabled": {
                "description": "`true` if there is any assignment to any key made",
                "type": "boolean"
              },
              "assignments": {
                "description": "List of assignments that has Security Key assigned, allowed values: `login`, `account`, `wallet`, `admin`",
                "items": {
                  "description": "",
                  "enum": [
                    "login",
                    "account",
                    "wallet",
                    "admin"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "mode",
              "enabled",
              "assignments"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetCancelOnDisconnectResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "scope": {
                "$ref": "#/components/schemas/cod_scope"
              },
              "enabled": {
                "$ref": "#/components/schemas/enabled_field"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetTransactionLogResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          }
        },
        "required": [
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetBlockTradeResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/block_trade"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivatePositionMoveResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/position_move"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetBlockTradesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/block_trade"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateSimulateBlockTradeResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "`true` if block trade can be executed, `false` otherwise",
            "type": "boolean"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateVerifyBlockTradeResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "signature": {
                "$ref": "#/components/schemas/block_trade_signature"
              }
            },
            "required": [
              "signature"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetPendingBlockTradesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/pending_block_trade"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetBlockTradeRequestsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/pending_block_trade"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateChangePasswordResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "access_token": {
                "example": "843SehgeX5n6XxEU4XbABx4Cny5Akai5iHiJePTsvUw7",
                "type": "string"
              },
              "token_type": {
                "description": "Authorization type, allowed value - `bearer`",
                "enum": [
                  "bearer"
                ],
                "type": "string"
              },
              "expires_in": {
                "description": "Token lifetime in seconds",
                "example": 315360000,
                "type": "integer"
              },
              "refresh_token": {
                "description": "Can be used to request a new token (with a new lifetime)",
                "example": "6faf8L36JdaSqsjCEEiwqifPpj6JB18RWwiWHrsGTZ91",
                "type": "string"
              },
              "scope": {
                "description": "Type of the access for assigned token",
                "type": "string"
              }
            },
            "required": [
              "access_token",
              "token_type",
              "expires_in",
              "refresh_token",
              "scope"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetBlockRfqsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "block_rfqs": {
                "items": {
                  "$ref": "#/components/schemas/block_rfq"
                },
                "type": "array"
              },
              "continuation": {
                "$ref": "#/components/schemas/continuation"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateCreateBlockRfqResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/block_rfq"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateCancelBlockRfqResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/block_rfq"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateAcceptBlockRfqResponse": {
        "properties": {
          "trade_trigger": {
            "properties": {
              "state": {
                "enum": [
                  "untriggered"
                ],
                "type": "string"
              },
              "price": {
                "type": "number"
              },
              "direction": {
                "enum": [
                  "buy",
                  "sell"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "block_trades": {
            "items": {
              "$ref": "#/components/schemas/block_trade"
            },
            "type": "array"
          }
        },
        "required": [
          "trade_trigger",
          "block_trades"
        ],
        "type": "object"
      },
      "PrivateCancelBlockRfqTriggerResponse": {
        "$ref": "#/components/schemas/block_rfq"
      },
      "PrivateGetBlockRfqQuotesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/block_rfq_quote"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateAddBlockRfqQuoteResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/block_rfq_quote"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateEditBlockRfqQuoteResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/block_rfq_quote"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateCancelBlockRfqQuoteResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/block_rfq_quote"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateCancelAllBlockRfqQuotesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "Total number of successfully cancelled quotes",
            "example": 7,
            "type": "number"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetBlockRfqMakersResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "A list of available makers.",
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicGetBlockRfqTradesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "block_rfqs": {
                "items": {
                  "properties": {
                    "id": {
                      "description": "ID of the Block RFQ",
                      "type": "integer"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/trade_timestamp"
                    },
                    "direction": {
                      "description": "Trade direction of the taker",
                      "$ref": "#/components/schemas/direction"
                    },
                    "amount": {
                      "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
                      "type": "number"
                    },
                    "mark_price": {
                      "description": "Mark Price at the moment of trade",
                      "type": "number"
                    },
                    "legs": {
                      "$ref": "#/components/schemas/leg_structure"
                    },
                    "combo_id": {
                      "$ref": "#/components/schemas/combo_id"
                    },
                    "hedge": {
                      "$ref": "#/components/schemas/block_rfq_hedge_leg"
                    },
                    "index_prices": {
                      "description": "A map of index prices for the underlying instrument(s) at the time of trade execution, where keys are price index names and values are prices.",
                      "type": "object"
                    },
                    "trades": {
                      "items": {
                        "properties": {
                          "direction": {
                            "$ref": "#/components/schemas/direction"
                          },
                          "price": {
                            "$ref": "#/components/schemas/price"
                          },
                          "amount": {
                            "description": "Trade amount. For options, linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                            "type": "number"
                          },
                          "hedge_amount": {
                            "description": "Amount of the hedge leg. For linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                            "type": "number"
                          }
                        },
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "continuation": {
                "$ref": "#/components/schemas/block_rfq_trade_tape_continuation"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetBlockRfqUserInfoResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "parent": {
                "description": "Parent Identity (group alias), representing the overall account group (main + subaccounts).",
                "properties": {
                  "identity": {
                    "description": "Group-level alias identifying the account group as a whole.",
                    "type": "string"
                  },
                  "is_maker": {
                    "description": "Indicates whether the Parent Identity has maker scope.",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "users": {
                "items": {
                  "properties": {
                    "user_id": {
                      "$ref": "#/components/schemas/user_id"
                    },
                    "taker_rating": {
                      "description": "Taker rating associated with this account, if available.",
                      "type": "number"
                    },
                    "identity": {
                      "description": "Specific alias identifying this account individually.",
                      "type": "string"
                    },
                    "is_maker": {
                      "description": "Indicates whether this account has maker scope.",
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicListApiKeysResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/api_key"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetUserLocksResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "currency": {
                  "$ref": "#/components/schemas/currency"
                },
                "enabled": {
                  "description": "Value is set to 'true' when user account is locked in currency",
                  "type": "boolean"
                },
                "message": {
                  "description": "Optional information for user why his account is locked",
                  "type": "string"
                }
              },
              "required": [
                "currency",
                "enabled"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetAffiliateProgramInfoResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "is_enabled": {
                "description": "Status of affiliate program",
                "type": "boolean"
              },
              "number_of_affiliates": {
                "description": "Number of affiliates",
                "type": "number"
              },
              "link": {
                "description": "Affiliate link",
                "type": "string"
              },
              "received": {
                "properties": {
                  "eth": {
                    "description": "Total payout received in ETH",
                    "type": "number"
                  },
                  "btc": {
                    "description": "Total payout received in BTC",
                    "type": "number"
                  }
                },
                "required": [
                  "btc",
                  "eth"
                ],
                "type": "object"
              }
            },
            "required": [
              "is_enabled"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateStatsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "user": {
                "description": "Statistics of the user",
                "type": "object"
              },
              "apps": {
                "description": "Statistics of the applications owned by the user",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateSimulatePortfolioResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "Portfolio details",
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivatePmeSimulateResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "Simulation details",
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivatePmeParamsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "PM open order restrictions",
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PublicPlaceholderResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "description": "See example.",
            "type": "string"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateChatSetNickResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "nick": {
                "example": "user12121212",
                "type": "string"
              },
              "jid_node": {
                "example": "www.user12121",
                "type": "string"
              }
            },
            "required": [
              "nick",
              "jid_node"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateChatGetAccountSummaryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "nick": {
                "example": "user12121212",
                "type": "string"
              },
              "registered": {
                "type": "boolean"
              },
              "email": {
                "example": "user12121@gmail.com",
                "type": "string"
              },
              "system_name": {
                "example": "user1212121",
                "type": "string"
              }
            },
            "required": [
              "registered"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivatePutBalanceResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "balance": {
                "description": "Updated \"in custody\" balance of the user as seen by the exchange",
                "type": "number"
              }
            },
            "required": [
              "balance"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetBalanceResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/get_custody_balance"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetBalanceSnapshotResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "currency": {
                "$ref": "#/components/schemas/currency"
              },
              "total_equity": {
                "description": "Equity of the main account + subaccounts. Takes into account external equity.",
                "type": "number"
              },
              "custody": {
                "description": "Custody balance",
                "type": "number"
              },
              "pnl": {
                "description": "Profit net loss of the user (total_equity - custody)",
                "type": "number"
              },
              "accounts": {
                "description": "Represents portfolio of main-account and sub-accounts",
                "properties": {
                  "available_withdrawal_funds": {
                    "description": "The account's available to withdrawal funds",
                    "type": "number"
                  },
                  "available_funds": {
                    "description": "The account's available funds. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                    "type": "number"
                  },
                  "initial_margin": {
                    "description": "The account's initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                    "type": "number"
                  },
                  "maintenance_margin": {
                    "description": "The maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                    "type": "number"
                  },
                  "equity": {
                    "description": "The account's current equity",
                    "type": "number"
                  },
                  "margin_balance": {
                    "description": "The account's margin balance. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                    "type": "number"
                  },
                  "main": {
                    "description": "Main account or subaccount",
                    "type": "boolean"
                  },
                  "balance": {
                    "description": "Balance of the (sub)account",
                    "type": "number"
                  },
                  "user_id": {
                    "description": "Id of a (sub)account",
                    "type": "integer"
                  },
                  "snapshot_timestamp": {
                    "description": "Timestamp of the snapshot",
                    "type": "integer"
                  }
                },
                "required": [
                  "available_withdrawal_funds",
                  "available_funds",
                  "initial_margin",
                  "maintenance_margin",
                  "equity",
                  "margin_balance",
                  "main",
                  "balance",
                  "user_id"
                ],
                "type": "object"
              },
              "signature": {
                "description": "The signature, encode as base64. Signature is generated using RSA SHA256 with 4096bit key. The signature can be verified using the signature_payload and Deribit's public key.",
                "type": "string"
              },
              "signature_payload": {
                "description": "Serialized JSON string of the result (without the `signature` and `signature_payload` fields). The JSON string is compressed using Gzip and encoded in Base64. To validate the process, the user should first decode the Base64-encoded `signature_payload` and then un-Gzip the decoded payload to retrieve the original JSON string. Next, the user should verify the `signature` by using the decoded JSON string along with the corresponding public key, ensuring that the signature was correctly generated.",
                "type": "string"
              },
              "signed_at": {
                "description": "Timestamp of the signature",
                "type": "integer"
              }
            },
            "required": [
              "currency",
              "accounts",
              "total_equity",
              "custody",
              "pnl"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetAllBalancesSnapshotResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "balances": {
                "description": "User balance in a given currency",
                "properties": {
                  "currency": {
                    "$ref": "#/components/schemas/currency"
                  },
                  "total_equity": {
                    "description": "Equity of the main account + subaccounts. Takes into account external equity.",
                    "type": "number"
                  },
                  "custody": {
                    "description": "Custody balance",
                    "type": "number"
                  },
                  "pnl": {
                    "description": "Profit net loss of the user (total_equity - custody)",
                    "type": "number"
                  },
                  "accounts": {
                    "description": "Represents portfolio of main-account and sub-accounts",
                    "properties": {
                      "available_withdrawal_funds": {
                        "description": "The account's available to withdrawal funds",
                        "type": "number"
                      },
                      "available_funds": {
                        "description": "The account's available funds. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                        "type": "number"
                      },
                      "initial_margin": {
                        "description": "The account's initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                        "type": "number"
                      },
                      "maintenance_margin": {
                        "description": "The maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                        "type": "number"
                      },
                      "equity": {
                        "description": "The account's current equity",
                        "type": "number"
                      },
                      "margin_balance": {
                        "description": "The account's margin balance. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
                        "type": "number"
                      },
                      "main": {
                        "description": "Main account or subaccount",
                        "type": "boolean"
                      },
                      "balance": {
                        "description": "Balance of the (sub)account",
                        "type": "number"
                      },
                      "user_id": {
                        "description": "Id of a (sub)account",
                        "type": "integer"
                      },
                      "snapshot_timestamp": {
                        "description": "Timestamp of the snapshot",
                        "type": "integer"
                      }
                    },
                    "required": [
                      "available_withdrawal_funds",
                      "available_funds",
                      "initial_margin",
                      "maintenance_margin",
                      "equity",
                      "margin_balance",
                      "main",
                      "balance",
                      "user_id"
                    ],
                    "type": "object"
                  }
                },
                "type": "array"
              },
              "signature": {
                "description": "The signature, encode as base64. Signature is generated using RSA SHA256 with 4096bit key. The signature can be verified using the signature_payload and Deribit's public key.",
                "type": "string"
              },
              "signature_payload": {
                "description": "Serialized JSON string of the result (without the `signature` and `signature_payload` fields). The JSON string is compressed using Gzip and encoded in Base64. To validate the process, the user should first decode the Base64-encoded `signature_payload` and then un-Gzip the decoded payload to retrieve the original JSON string. Next, the user should verify the `signature` by using the decoded JSON string along with the corresponding public key, ensuring that the signature was correctly generated.",
                "type": "string"
              },
              "signed_at": {
                "description": "Timestamp of the signature",
                "type": "integer"
              }
            },
            "required": [
              "currency",
              "accounts",
              "total_equity",
              "custody",
              "pnl"
            ],
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateCustodySettlementResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/custody_settlement"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetJwtResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjQyLCJndWlkIjo0MjQyLCJlbWFpbCI6InRyYWRlckBkZXJpYml0LmNvbSIsImRpc3BsYXlfbmFtZSI6IlRyYWRlciJ9.d-QIJqBr8E1wrG_XIQHD0VPPDP3RJqA0Va8rC2V4VCE",
            "type": "string"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "MulticastGetPacketResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "packet": {
                "description": "The base64 encoded binary multicast packet",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "MulticastGetPacketsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "seq": {
                  "description": "The sequence number of the multicast packet",
                  "type": "integer"
                },
                "packet": {
                  "description": "The base64 encoded binary multicast packet",
                  "type": "string"
                }
              },
              "required": [
                "seq",
                "packet"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "MulticastGetInstrumentDictionaryResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Dictionary that maps the names of active instruments into their corresponding integer id's",
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "AddressOwnershipResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/address_ownership_item"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "VaspsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/vasp_item"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetWithdrawalPolicyModeResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/withdrawal_policy_mode"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetWithdrawalPolicyLimitsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/withdrawal_policy_limits"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetBrokerTradesResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "properties": {
              "history": {
                "items": {
                  "properties": {
                    "id": {
                      "description": "Unique identifier of the block trade history entry.",
                      "type": "string"
                    },
                    "timestamp": {
                      "description": "Timestamp of the block trade history entry (milliseconds since the UNIX epoch).",
                      "type": "integer"
                    },
                    "trades": {
                      "items": {
                        "$ref": "#/components/schemas/block_trade"
                      },
                      "type": "array"
                    },
                    "maker": {
                      "properties": {
                        "user_id": {
                          "description": "Obscured user id of the maker.",
                          "type": "integer"
                        },
                        "client_id": {
                          "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                          "type": "integer"
                        },
                        "client_name": {
                          "description": "Name of the client; available to broker.",
                          "type": "string"
                        },
                        "client_link_name": {
                          "description": "Name of the linked user within the client; available to broker.",
                          "type": "string"
                        },
                        "client_link_id": {
                          "description": "ID assigned to a single user in a client; available to broker.",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "taker": {
                      "properties": {
                        "user_id": {
                          "description": "Obscured user id of the taker.",
                          "type": "integer"
                        },
                        "client_id": {
                          "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                          "type": "integer"
                        },
                        "client_name": {
                          "description": "Name of the client; available to broker.",
                          "type": "string"
                        },
                        "client_link_name": {
                          "description": "Name of the linked user within the client; available to broker.",
                          "type": "string"
                        },
                        "client_link_id": {
                          "description": "ID assigned to a single user in a client; available to broker.",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "next_start_id": {
                "description": "The next start ID for pagination.",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "PrivateGetBrokerTradeRequestsResponse": {
        "properties": {
          "jsonrpc": {
            "description": "The JSON-RPC version (2.0)",
            "enum": [
              "2.0"
            ],
            "type": "string"
          },
          "id": {
            "description": "The id that was sent in the request",
            "type": "integer"
          },
          "result": {
            "items": {
              "properties": {
                "timestamp": {
                  "description": "Timestamp of the broker block trade request (milliseconds since the UNIX epoch).",
                  "type": "integer"
                },
                "state": {
                  "description": "State of the broker block trade request.",
                  "type": "string"
                },
                "trades": {
                  "items": {
                    "properties": {
                      "amount": {
                        "description": "Trade amount.",
                        "type": "number"
                      },
                      "direction": {
                        "description": "Trade direction (buy or sell).",
                        "type": "string"
                      },
                      "price": {
                        "description": "Trade price.",
                        "type": "number"
                      },
                      "instrument_name": {
                        "description": "Name of the traded instrument.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "maker": {
                  "properties": {
                    "state": {
                      "description": "State of the request from the maker side: `initial`, `approved`, or `rejected`.",
                      "type": "string"
                    },
                    "client_id": {
                      "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                      "type": "integer"
                    },
                    "user_id": {
                      "description": "Obscured user id of the maker.",
                      "type": "string"
                    },
                    "client_name": {
                      "description": "Name of the client; available to broker.",
                      "type": "string"
                    },
                    "client_link_name": {
                      "description": "Name of the linked user within the client; available to broker.",
                      "type": "string"
                    },
                    "client_link_id": {
                      "description": "ID assigned to a single user in a client; available to broker.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "taker": {
                  "properties": {
                    "state": {
                      "description": "State of the request from the taker side: `initial`, `approved`, or `rejected`.",
                      "type": "string"
                    },
                    "client_id": {
                      "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                      "type": "integer"
                    },
                    "user_id": {
                      "description": "Obscured user id of the taker.",
                      "type": "string"
                    },
                    "client_name": {
                      "description": "Name of the client; available to broker.",
                      "type": "string"
                    },
                    "client_link_name": {
                      "description": "Name of the linked user within the client; available to broker.",
                      "type": "string"
                    },
                    "client_link_id": {
                      "description": "ID assigned to a single user in a client; available to broker.",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "nonce": {
                  "description": "Nonce for approving or rejecting the broker block trade request.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "result",
          "jsonrpc"
        ],
        "type": "object"
      },
      "id": {
        "description": "Unique identifier",
        "example": 5967413,
        "type": "integer"
      },
      "book_state": {
        "description": "The state of the order book. Possible values are `open` and `closed`.",
        "enum": [
          "open",
          "closed"
        ],
        "type": "string"
      },
      "greeks": {
        "description": "Only for options",
        "properties": {
          "delta": {
            "description": "(Only for option) The delta value for the option",
            "type": "number"
          },
          "gamma": {
            "description": "(Only for option) The gamma value for the option",
            "type": "number"
          },
          "rho": {
            "description": "(Only for option) The rho value for the option",
            "type": "number"
          },
          "theta": {
            "description": "(Only for option) The theta value for the option",
            "type": "number"
          },
          "vega": {
            "description": "(Only for option) The vega value for the option",
            "type": "number"
          }
        },
        "required": [
          "delta",
          "gamma",
          "rho",
          "theta",
          "vega"
        ],
        "type": "object"
      },
      "bids": {
        "items": {
          "description": "List of bids",
          "properties": {
            "price": {
              "type": "number"
            },
            "amount": {
              "type": "number"
            }
          },
          "required": [
            "price",
            "amount"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "asks": {
        "items": {
          "description": "List of asks",
          "properties": {
            "price": {
              "type": "number"
            },
            "amount": {
              "type": "number"
            }
          },
          "required": [
            "price",
            "amount"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "tick_size_step": {
        "properties": {
          "above_price": {
            "description": "The price from which the increased tick size applies",
            "type": "number"
          },
          "tick_size": {
            "description": "Tick size to be used above the price. It must be multiple of the minimum tick size.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "stats": {
        "properties": {
          "volume": {
            "description": "Volume during last 24h in base currency",
            "type": "number"
          },
          "low": {
            "description": "Lowest price during 24h",
            "type": "number"
          },
          "high": {
            "description": "Highest price during 24h",
            "type": "number"
          },
          "price_change": {
            "description": "24-hour price change expressed as a percentage, `null` if there weren't any trades",
            "example": 10.23,
            "type": "number"
          },
          "volume_usd": {
            "$ref": "#/components/schemas/volume_usd"
          }
        },
        "required": [
          "volume",
          "high",
          "low"
        ],
        "type": "object"
      },
      "continuation": {
        "description": "Continuation token for pagination.",
        "example": "xY7T6cutS3t2B9YtaDkE6TS379oKnkzTvmEDUnEUP2Msa9xKWNNaT",
        "type": "string"
      },
      "continuation_with_null": {
        "description": "Continuation token for pagination. `NULL` when no continuation.",
        "example": 429946,
        "type": "integer"
      },
      "block_rfq_trade_tape_continuation": {
        "description": "Continuation token for pagination. `NULL` when no continuation. Consists of `timestamp` and `block_rfq_id`.",
        "example": "1738050297271:103",
        "type": "string"
      },
      "kind": {
        "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"spot\"`, `\"future_combo\"`, `\"option_combo\"`",
        "enum": [
          "future",
          "option",
          "spot",
          "future_combo",
          "option_combo"
        ],
        "type": "string"
      },
      "kind_with_any": {
        "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"spot\"`, `\"future_combo\"`, `\"option_combo\"` or `\"any\"` for all",
        "enum": [
          "future",
          "option",
          "spot",
          "future_combo",
          "option_combo",
          "any"
        ],
        "type": "string"
      },
      "kind_future_or_option_with_any": {
        "description": "Instrument kind: `\"future\"`, `\"option\"` or `\"any\"` for all",
        "enum": [
          "future",
          "option",
          "any"
        ],
        "type": "string"
      },
      "kind_with_combo_all": {
        "description": "Instrument kind: `\"future\"`, `\"option\"`, `\"spot\"`, `\"future_combo\"`, `\"option_combo\"`, `\"combo\"` for any combo or `\"any\"` for all",
        "enum": [
          "future",
          "option",
          "spot",
          "future_combo",
          "option_combo",
          "combo",
          "any"
        ],
        "type": "string"
      },
      "only_combo_kind": {
        "description": "Instrument kind: `\"future_combo\"`, `\"option_combo\"` or `\"combo\"` for any combo",
        "enum": [
          "future_combo",
          "option_combo",
          "combo"
        ],
        "type": "string"
      },
      "block_rfq_currency": {
        "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
        "enum": [
          "BTC",
          "ETH",
          "USDC",
          "USDT",
          "any"
        ],
        "type": "string"
      },
      "wallet_currency": {
        "description": "Currency, i.e `\"BTC\"`, `\"ETH\"`, `\"USDC\"`",
        "enum": [
          "BTC",
          "ETH",
          "STETH",
          "ETHW",
          "USDC",
          "USDT",
          "EURR",
          "MATIC",
          "SOL",
          "XRP",
          "USYC",
          "PAXG",
          "BNB",
          "USDE"
        ],
        "type": "string"
      },
      "pme_currency": {
        "description": "The currency for which the Extended Risk Matrix will be calculated. Use `CROSS` for Cross Collateral simulation.",
        "enum": [
          "BTC",
          "ETH",
          "USDC",
          "USDT",
          "CROSS"
        ],
        "type": "string"
      },
      "currency_with_any": {
        "description": "Currency name or `\"any\"` if don't care",
        "enum": [
          "BTC",
          "ETH",
          "USDC",
          "USDT",
          "EURR",
          "any"
        ],
        "type": "string"
      },
      "currency_with_any_and_list": {
        "description": "The currency symbol, list of currency symbols or `\"any\"` for all",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        ]
      },
      "currency_with_any_and_grouped": {
        "description": "Currency name or `\"any\"` if don't care or `\"grouped\"` if grouped by currencies",
        "enum": [
          "BTC",
          "ETH",
          "USDC",
          "SOL",
          "USDT",
          "EURR",
          "XRP",
          "STETH",
          "USYC",
          "PAXG",
          "BNB",
          "USDE",
          "any",
          "grouped"
        ],
        "type": "string"
      },
      "settlement_currency_with_any_and_grouped": {
        "description": "Currency name or `\"any\"` if don't care or `\"grouped\"` if grouped by currencies",
        "enum": [
          "BTC",
          "ETH",
          "USDC",
          "USDT",
          "any",
          "grouped"
        ],
        "type": "string"
      },
      "currency_pair": {
        "description": "Currency pair: `\"btc_usd\"` or `\"eth_usd\"`",
        "enum": [
          "btc_usd",
          "eth_usd"
        ],
        "type": "string"
      },
      "instrument_name": {
        "description": "Unique instrument identifier",
        "example": "BTC-PERPETUAL",
        "type": "string"
      },
      "instrument_id": {
        "description": "Instrument ID",
        "type": "integer"
      },
      "combo_id": {
        "description": "Unique combo identifier",
        "example": "BTC-FS-31DEC21-PERP",
        "type": "string"
      },
      "combo_state": {
        "description": "Combo state: `\"active\"`, \"`inactive`\"",
        "enum": [
          "active",
          "inactive"
        ],
        "type": "string"
      },
      "combo_leg_amount": {
        "description": "Size multiplier of a leg. A negative value indicates that the trades on given leg are in opposite direction to the combo trades they originate from",
        "example": -1,
        "type": "integer"
      },
      "trade_timestamp": {
        "description": "The timestamp of the trade (milliseconds since the UNIX epoch)",
        "example": 1517329113791,
        "type": "integer"
      },
      "order_id": {
        "description": "Unique order identifier",
        "example": "ETH-100234",
        "type": "string"
      },
      "block_trade_id": {
        "description": "Block trade id",
        "example": "154",
        "type": "string"
      },
      "block_trade_id_in_result": {
        "description": "Block trade id - when trade was part of a block trade",
        "example": "154",
        "type": "string"
      },
      "block_trade_leg_count": {
        "description": "Block trade leg count - when trade was part of a block trade",
        "example": 3,
        "type": "integer"
      },
      "block_trade_order": {
        "description": "`true` if order made from block_trade trade, added only in that case.",
        "example": true,
        "type": "boolean"
      },
      "block_trade_signature": {
        "description": "Signature of block trade It is valid only for 5 minutes around given timestamp",
        "example": "1565173369982.1M9tO0Q-.z9n9WyZUU5op9pEz6Jtd2CI71QxQMMsCZAexnIfK9HQRT1pKH3clxeIbY7Bqm-yMcWIoE3IfCDPW5VEdiN-6oS0YkKUyXPD500MUf3ULKhfkmH81EZs",
        "type": "string"
      },
      "settlement_type": {
        "description": "The type of settlement. `settlement`, `delivery` or `bankruptcy`.",
        "enum": [
          "settlement",
          "delivery",
          "bankruptcy"
        ],
        "type": "string"
      },
      "trade_id": {
        "description": "Unique (per currency) trade identifier",
        "type": "string"
      },
      "date": {
        "example": "2019-11-24",
        "description": "The event date with year, month and day",
        "type": "string"
      },
      "timestamp": {
        "example": 1536569522277,
        "description": "The timestamp (milliseconds since the Unix epoch)",
        "type": "integer"
      },
      "timestamp_for_book_notifications": {
        "example": 1536569522277,
        "description": "The timestamp of last change (milliseconds since the Unix epoch)",
        "type": "integer"
      },
      "last_rfq_timestamp": {
        "example": 1536569522277,
        "description": "The timestamp of last RFQ (milliseconds since the Unix epoch)",
        "type": "integer"
      },
      "direction": {
        "description": "Direction: `buy`, or `sell`",
        "enum": [
          "buy",
          "sell"
        ],
        "type": "string"
      },
      "quote_direction": {
        "description": "Direction of trade from the maker perspective",
        "enum": [
          "buy",
          "sell"
        ],
        "type": "string"
      },
      "position_direction": {
        "description": "Direction: `buy`, `sell` or `zero`",
        "enum": [
          "buy",
          "sell",
          "zero"
        ],
        "type": "string"
      },
      "tick_direction": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "description": "Direction of the \"tick\" (`0` = Plus Tick, `1` = Zero-Plus Tick, `2` = Minus Tick, `3` = Zero-Minus Tick).",
        "type": "integer"
      },
      "order_type": {
        "description": "Order type: `\"limit\"`, `\"market\"`, `\"stop_limit\"`, `\"stop_market\"`",
        "enum": [
          "market",
          "limit",
          "stop_market",
          "stop_limit"
        ],
        "type": "string"
      },
      "original_order_type": {
        "description": "Original order type. Optional field",
        "enum": [
          "market",
          "market_limit"
        ],
        "type": "string"
      },
      "order_type2": {
        "description": "Order type: `\"all\"`, `\"limit\"`, `\"trigger_all\"`, `\"stop_all\"`, `\"stop_limit\"`, `\"stop_market\"`, `\"take_all\"`, `\"take_limit\"`, `\"take_market\"`",
        "enum": [
          "all",
          "limit",
          "trigger_all",
          "stop_all",
          "stop_limit",
          "stop_market",
          "take_all",
          "take_limit",
          "take_market",
          "trailing_all",
          "trailing_stop"
        ],
        "type": "string"
      },
      "simple_order_type": {
        "description": "Order type: `\"all\"`, `\"limit\"`, `\"stop\"`, `\"take\"`, `\"trailing_stop\"`, `\"trailing_take\"`",
        "enum": [
          "all",
          "limit",
          "trigger_all",
          "stop",
          "take",
          "trailing_stop"
        ],
        "type": "string"
      },
      "order_state_in_user_trade": {
        "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"` or `\"archive\"` (if order was archived)",
        "enum": [
          "open",
          "filled",
          "rejected",
          "cancelled",
          "untriggered",
          "archive"
        ],
        "type": "string"
      },
      "order_state": {
        "description": "Order state: `\"open\"`, `\"filled\"`, `\"rejected\"`, `\"cancelled\"`, `\"untriggered\"`",
        "enum": [
          "open",
          "filled",
          "rejected",
          "cancelled",
          "untriggered",
          "triggered"
        ],
        "type": "string"
      },
      "cancel_reason": {
        "description": "Enumerated reason behind cancel `\"user_request\"`, `\"autoliquidation\"`, `\"cancel_on_disconnect\"`, `\"risk_mitigation\"`, `\"pme_risk_reduction\"` (portfolio margining risk reduction), `\"pme_account_locked\"` (portfolio margining account locked per currency), `\"position_locked\"`, `\"mmp_trigger\"` (market maker protection), `\"mmp_config_curtailment\"` (market maker configured quantity decreased), `\"edit_post_only_reject\"` (cancelled on edit because of `reject_post_only` setting), `\"oco_other_closed\"` (the oco order linked to this order was closed), `\"oto_primary_closed\"` (the oto primary order that was going to trigger this order was cancelled), `\"settlement\"` (closed because of a settlement)",
        "enum": [
          "user_request",
          "autoliquidation",
          "cancel_on_disconnect",
          "risk_mitigation",
          "pme_risk_reduction",
          "pme_account_locked",
          "position_locked",
          "mmp_trigger",
          "mmp_config_curtailment",
          "edit_post_only_reject",
          "oco_other_closed",
          "oto_primary_closed",
          "settlement"
        ],
        "type": "string"
      },
      "order_state_stop": {
        "description": "Order state: `\"triggered\"`, `\"cancelled\"`, or `\"rejected\"` with rejection reason (e.g. `\"rejected:reduce_direction\"`).",
        "type": "string"
      },
      "time_in_force": {
        "description": "Order time in force: `\"good_til_cancelled\"`, `\"good_til_day\"`, `\"fill_or_kill\"` or `\"immediate_or_cancel\"`",
        "enum": [
          "good_til_cancelled",
          "good_til_day",
          "fill_or_kill",
          "immediate_or_cancel"
        ],
        "type": "string"
      },
      "block_rfq_time_in_force": {
        "description": "Block RFQ time in force: `\"fill_or_kill\"` or `\"good_til_cancelled\"`",
        "enum": [
          "fill_or_kill",
          "good_til_cancelled"
        ],
        "type": "string"
      },
      "trade_trigger_state": {
        "description": "Trade trigger state: `\"untriggered\"` or `\"cancelled\"`",
        "enum": [
          "triggered",
          "untriggered",
          "cancelled"
        ],
        "type": "string"
      },
      "trade_trigger": {
        "description": "Contains information about the trade trigger state",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/trade_trigger_state"
          },
          "price": {
            "description": "Price of the trade trigger",
            "type": "number"
          },
          "direction": {
            "description": "Direction of the trade trigger",
            "enum": [
              "buy",
              "sell"
            ],
            "type": "string"
          },
          "cancel_reason": {
            "description": "Reason for cancellation, present only when state is cancelled",
            "type": "string"
          }
        },
        "required": [
          "state",
          "price",
          "direction"
        ],
        "type": "object"
      },
      "price": {
        "description": "Price in base currency",
        "type": "number"
      },
      "quote_price": {
        "description": "Price in quote currency",
        "type": "number"
      },
      "label": {
        "description": "User defined label (up to 64 characters)",
        "type": "string"
      },
      "label_presentation": {
        "description": "User defined label (presented only when previously set for order by user)",
        "type": "string"
      },
      "post_only": {
        "description": "`true` for post-only orders only",
        "type": "boolean"
      },
      "reject_post_only": {
        "description": "`true` if order has `reject_post_only` flag (field is present only when `post_only` is `true`)",
        "type": "boolean"
      },
      "reduce_only": {
        "description": "Optional (not added for spot). '`true` for reduce-only orders only'",
        "type": "boolean"
      },
      "api": {
        "description": "`true` if created with API",
        "type": "boolean"
      },
      "mobile": {
        "description": "optional field with value `true` added only when created with Mobile Application",
        "type": "boolean"
      },
      "web": {
        "description": "`true` if created via Deribit frontend (optional)",
        "type": "boolean"
      },
      "max_show": {
        "description": "Deprecated. Maximum amount within an order to be shown to other traders, 0 for invisible order.",
        "type": "number"
      },
      "display_amount": {
        "description": "The actual display amount of iceberg order. Absent for other types of orders.",
        "type": "number"
      },
      "refresh_amount": {
        "description": "The initial display amount of iceberg order. Iceberg order display amount will be refreshed to that value after match consuming actual display amount. Absent for other types of orders",
        "type": "number"
      },
      "amount": {
        "description": "It represents the requested order size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
        "type": "number"
      },
      "contracts": {
        "description": "It represents the order size in contract units. (Optional, may be absent in historical data).",
        "type": "number"
      },
      "log_amount": {
        "description": "For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
        "type": "number"
      },
      "currency_amount": {
        "description": "Amount of funds in given currency",
        "example": 1.0,
        "type": "number"
      },
      "filled_amount": {
        "description": "Filled amount of the order. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
        "type": "number"
      },
      "filled_amount_quote": {
        "description": "Filled amount of the quote. For perpetual and futures the filled_amount is in USD units, for options - in units or corresponding cryptocurrency contracts, e.g., BTC or ETH.",
        "type": "number"
      },
      "profit_loss": {
        "description": "Profit and loss in base currency.",
        "type": "number"
      },
      "quantity": {
        "description": "The number of contracts to be traded.",
        "type": "number"
      },
      "average_price": {
        "description": "Average fill price of the order",
        "type": "number"
      },
      "commission": {
        "description": "Commission paid so far (in base currency)",
        "type": "number"
      },
      "advanced": {
        "description": "advanced type: `\"usd\"` or `\"implv\"` (Only for options; field is omitted if not applicable).",
        "enum": [
          "usd",
          "implv"
        ],
        "type": "string"
      },
      "implv": {
        "description": "Implied volatility in percent. (Only if `advanced=\"implv\"`)",
        "type": "number"
      },
      "usd": {
        "description": "Option price in USD (Only if `advanced=\"usd\"`)",
        "type": "number"
      },
      "triggered": {
        "description": "Whether the trigger order has been triggered",
        "type": "boolean"
      },
      "trigger": {
        "description": "Trigger type (only for trigger orders). Allowed values: `\"index_price\"`, `\"mark_price\"`, `\"last_price\"`.",
        "enum": [
          "index_price",
          "mark_price",
          "last_price"
        ],
        "type": "string"
      },
      "trigger_price": {
        "description": "Trigger price (Only for future trigger orders)",
        "type": "number"
      },
      "trigger_offset": {
        "description": "The maximum deviation from the price peak beyond which the order will be triggered (Only for trailing trigger orders)",
        "type": "number"
      },
      "trigger_reference_price": {
        "description": "The price of the given trigger at the time when the order was placed (Only for trailing trigger orders)",
        "type": "number"
      },
      "sorting": {
        "enum": [
          "asc",
          "desc",
          "default"
        ],
        "type": "string"
      },
      "contract_size": {
        "description": "Contract size, for futures in USD, for options in base currency of the instrument (BTC, ETH, ...)",
        "example": 10,
        "type": "integer"
      },
      "currency_address": {
        "description": "Address in proper format for currency",
        "example": "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
        "type": "string"
      },
      "currency_address_type": {
        "description": "Address type acording to Notabene",
        "enum": [
          "HOSTED",
          "UNHOSTED",
          "UNKNOWN"
        ],
        "example": "HOSTED",
        "type": "string"
      },
      "address_book_type": {
        "description": "Address book type",
        "enum": [
          "transfer",
          "withdrawal",
          "deposit_source"
        ],
        "type": "string"
      },
      "address_book_type_without_deposit_source": {
        "description": "Address book type",
        "enum": [
          "transfer",
          "withdrawal"
        ],
        "type": "string"
      },
      "address_label": {
        "description": "Label of the address book entry",
        "example": "Main address",
        "type": "string"
      },
      "beneficiary_vasp_name": {
        "description": "Name of beneficiary VASP",
        "example": "Money`s Gone",
        "type": "string"
      },
      "beneficiary_vasp_did": {
        "description": "DID of beneficiary VASP",
        "example": "did:example:123456789abcdefghi",
        "type": "string"
      },
      "beneficiary_first_name": {
        "description": "First name of the beneficiary (if beneficiary is a person)",
        "example": "John",
        "type": "string"
      },
      "beneficiary_last_name": {
        "description": "Last name of the beneficiary (if beneficiary is a person)",
        "example": "Doe",
        "type": "string"
      },
      "beneficiary_company_name": {
        "description": "Company name of the beneficiary (if beneficiary is a company)",
        "example": "Company Name",
        "type": "string"
      },
      "beneficiary_address": {
        "description": "Geographical address of the beneficiary",
        "example": "NL, Amsterdam, Street, 1",
        "type": "string"
      },
      "beneficiary_vasp_website": {
        "description": "Website of the beneficiary VASP",
        "type": "string"
      },
      "agree_to_share_with_3rd_party": {
        "description": "Indicates that the user agreed to shared provided information with 3rd parties",
        "example": true,
        "type": "boolean"
      },
      "personal_wallet": {
        "description": "The user confirms that he provided address belongs to him and he has access to it via an un-hosted wallet software",
        "example": true,
        "type": "boolean"
      },
      "extra_currencies": {
        "description": "The user can pass a list of currencies to add the address for. It is currently available ONLY for ERC20 currencies. Without passing this paramater for an ERC20 currency, the address will be added to ALL of the ERC20 currencies.",
        "items": {
          "description": "Name of the currency",
          "type": "string"
        },
        "example": [
          "USDC",
          "MATIC"
        ],
        "type": "array"
      },
      "address_info_required": {
        "description": "Signalises that addition information regarding the beneficiary of the address is required",
        "example": true,
        "type": "boolean"
      },
      "status": {
        "description": "Wallet address status, values: [`admin_locked`, `waiting`, `confirmed`, `ready`]",
        "enum": [
          "admin_locked",
          "waiting",
          "confirmed",
          "ready"
        ],
        "type": "string"
      },
      "waiting_timestamp": {
        "description": "Timestamp when the address will be ready",
        "example": true,
        "type": "boolean"
      },
      "requires_confirmation": {
        "description": "If address requires email confirmation for withdrawals",
        "example": true,
        "type": "boolean"
      },
      "requires_confirmation_change": {
        "description": "If email confirmation change is in progress",
        "example": true,
        "type": "boolean"
      },
      "deposit_state": {
        "description": "Deposit state. Allowed values: `pending`: deposit detected on blockchain/system, compliance not yet finished `completed`: compliance check finished successfully `rejected`: deposit failed compliance and must be handled manually `replaced`: deposit transaction was replaced on the blockchain and should have a new transaction hash",
        "enum": [
          "pending",
          "completed",
          "rejected",
          "replaced"
        ],
        "type": "string"
      },
      "withdrawal_state": {
        "description": "Withdrawal state, allowed values : `unconfirmed`, `confirmed`, `cancelled`, `completed`, `interrupted`, `rejected`",
        "enum": [
          "unconfirmed",
          "confirmed",
          "cancelled",
          "completed",
          "interrupted",
          "rejected"
        ],
        "type": "string"
      },
      "clearance_state": {
        "description": "Clearance state indicating the current status of the transaction clearance process. Allowed values: `in_progress`: clearance process is in progress `pending_admin_decision`: transaction is under manual review by Deribit admin `pending_user_input`: user should provide additional information regarding the transaction `success`: clearance process completed successfully `failed`: clearance process failed, transaction is rejected `cancelled`: transaction is cancelled (currently used only for withdrawals, meaning the withdrawal is cancelled) `refund_initiated`: clearance process failed, transaction refund is initiated, funds are removed from Deribit balance (valid for deposits only) `refunded`: clearance process failed, deposit amount is refunded back to the client (valid for deposits only)",
        "enum": [
          "in_progress",
          "pending_admin_decision",
          "pending_user_input",
          "success",
          "failed",
          "cancelled",
          "refund_initiated",
          "refunded"
        ],
        "type": "string"
      },
      "fee": {
        "example": 2.3e-05,
        "description": "Fee in currency",
        "type": "number"
      },
      "currency_transaction_id": {
        "description": "Transaction id in proper format for currency, `null` if id is not available",
        "nullable": true,
        "example": "1b1fb5568515e2b79503501e3d3680b2d0838d5dfc2d15a04eb8cd9fbbe0b572",
        "type": "string"
      },
      "result_count": {
        "description": "Total number of results available",
        "example": 101,
        "type": "integer"
      },
      "transfer_id": {
        "description": "Id of transfer",
        "example": 12,
        "type": "integer"
      },
      "transfer_type": {
        "description": "Type of transfer: `user` - sent to user, `subaccount` - sent to subaccount",
        "enum": [
          "user",
          "subaccount"
        ],
        "type": "string"
      },
      "transfer_direction": {
        "description": "Transfer direction",
        "enum": [
          "payment",
          "income"
        ],
        "type": "string"
      },
      "transfer_state": {
        "description": "Transfer state, allowed values : `prepared`, `confirmed`, `cancelled`, `waiting_for_admin`, `insufficient_funds`, `withdrawal_limit` otherwise rejection reason",
        "type": "string"
      },
      "transfer_other_side": {
        "description": "For transfer from/to subaccount returns this subaccount name, for transfer to other account returns address, for transfer from other account returns that accounts username.",
        "example": "Smith",
        "type": "string"
      },
      "trade_seq": {
        "description": "The sequence number of the trade within instrument",
        "type": "integer"
      },
      "wallet_address_type": {
        "description": "Address type/purpose, allowed values : `deposit`",
        "type": "string"
      },
      "best_bid_price": {
        "description": "The current best bid price, `null` if there aren't any bids",
        "nullable": true,
        "type": "number"
      },
      "best_bid_amount": {
        "description": "It represents the requested order size of all best bids",
        "nullable": true,
        "type": "number"
      },
      "best_ask_price": {
        "description": "The current best ask price, `null` if there aren't any asks",
        "nullable": true,
        "type": "number"
      },
      "best_ask_amount": {
        "description": "It represents the requested order size of all best asks",
        "nullable": true,
        "type": "number"
      },
      "min_price": {
        "description": "The minimum price for the future. Any sell orders you submit lower than this price will be clamped to this minimum.",
        "type": "number"
      },
      "max_price": {
        "description": "The maximum price for the future. Any buy orders you submit higher than this price, will be clamped to this maximum.",
        "type": "number"
      },
      "mark_price": {
        "description": "The mark price for the instrument",
        "type": "number"
      },
      "last_price": {
        "description": "The price for the last trade",
        "nullable": true,
        "type": "number"
      },
      "underlying_price": {
        "description": "Underlying price for implied volatility calculations (options only)",
        "type": "number"
      },
      "underlying_index": {
        "description": "Name of the underlying future, or `index_price` (options only)",
        "type": "number"
      },
      "interest_rate": {
        "description": "Interest rate used in implied volatility calculations (options only)",
        "type": "number"
      },
      "bid_iv": {
        "description": "(Only for option) implied volatility for best bid",
        "type": "number"
      },
      "ask_iv": {
        "description": "(Only for option) implied volatility for best ask",
        "type": "number"
      },
      "mark_iv": {
        "description": "(Only for option) implied volatility for mark price",
        "type": "number"
      },
      "funding_8h": {
        "description": "Funding 8h (perpetual only)",
        "type": "number"
      },
      "interest_value": {
        "description": "Value used to calculate `realized_funding` in positions (perpetual only)",
        "type": "number"
      },
      "current_funding": {
        "description": "Current funding (perpetual only)",
        "type": "number"
      },
      "delivery_price": {
        "description": "The settlement price for the instrument. Only when `state = closed`",
        "type": "number"
      },
      "settlement_price": {
        "description": "Optional (not added for spot). The settlement price for the instrument. Only when `state = open`",
        "type": "number"
      },
      "volume_usd": {
        "description": "Volume in usd (futures only)",
        "type": "number"
      },
      "estimated_delivery_price": {
        "description": "Estimated delivery price for the market. For more details, see Contract Specification > General Documentation > Expiration Price",
        "example": 11628.81,
        "type": "number"
      },
      "open_interest": {
        "description": "The total amount of outstanding contracts in the corresponding amount units. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
        "type": "number"
      },
      "index_price": {
        "description": "Current index price",
        "example": 8247.27,
        "type": "number"
      },
      "index_name": {
        "description": "Index identifier, matches (base) cryptocurrency with quote currency",
        "enum": [
          "btc_usd",
          "eth_usd",
          "ada_usdc",
          "algo_usdc",
          "avax_usdc",
          "bch_usdc",
          "bnb_usdc",
          "btc_usdc",
          "btcdvol_usdc",
          "buidl_usdc",
          "doge_usdc",
          "dot_usdc",
          "eurr_usdc",
          "eth_usdc",
          "ethdvol_usdc",
          "link_usdc",
          "ltc_usdc",
          "near_usdc",
          "paxg_usdc",
          "shib_usdc",
          "sol_usdc",
          "steth_usdc",
          "ton_usdc",
          "trump_usdc",
          "trx_usdc",
          "uni_usdc",
          "usde_usdc",
          "usyc_usdc",
          "xrp_usdc",
          "btc_usdt",
          "eth_usdt",
          "eurr_usdt",
          "sol_usdt",
          "steth_usdt",
          "usdc_usdt",
          "usde_usdt",
          "btc_eurr",
          "btc_usde",
          "btc_usyc",
          "eth_btc",
          "eth_eurr",
          "eth_usde",
          "eth_usyc",
          "steth_eth",
          "paxg_btc",
          "drbfix-btc_usdc",
          "drbfix-eth_usdc"
        ],
        "type": "string"
      },
      "index_name_for_dvol": {
        "description": "Index identifier supported for DVOL",
        "enum": [
          "btc_usd",
          "eth_usd"
        ],
        "type": "string"
      },
      "index_name_derivative": {
        "description": "Index identifier of derivative instrument on the platform",
        "enum": [
          "btc_usd",
          "eth_usd",
          "btc_usdc",
          "eth_usdc",
          "ada_usdc",
          "algo_usdc",
          "avax_usdc",
          "bch_usdc",
          "bnb_usdc",
          "doge_usdc",
          "dot_usdc",
          "link_usdc",
          "ltc_usdc",
          "near_usdc",
          "paxg_usdc",
          "shib_usdc",
          "sol_usdc",
          "ton_usdc",
          "trx_usdc",
          "trump_usdc",
          "uni_usdc",
          "xrp_usdc",
          "usde_usdc",
          "buidl_usdc",
          "btcdvol_usdc",
          "ethdvol_usdc",
          "btc_usdt",
          "eth_usdt",
          "all"
        ],
        "type": "string"
      },
      "volatility": {
        "description": "Value of the corresponding volatility",
        "type": "number"
      },
      "implied_volatility": {
        "description": "Value of the volatility of the underlying instrument",
        "type": "number"
      },
      "chart_volume": {
        "description": "// todo",
        "type": "number"
      },
      "key_id": {
        "description": "key identifier",
        "example": 1,
        "type": "integer"
      },
      "security_key_id": {
        "description": "Security Key Identifier",
        "example": 12,
        "type": "integer"
      },
      "security_key_name": {
        "description": "Security Key name",
        "type": "string"
      },
      "security_key_type": {
        "description": "Security Key type",
        "enum": [
          "tfa",
          "u2f"
        ],
        "type": "string"
      },
      "security_key_assignments": {
        "items": {
          "properties": {
            "assignment": {
              "description": "Assignment name",
              "enum": [
                "login",
                "wallet",
                "admin",
                "account"
              ],
              "type": "string"
            },
            "timestamp": {
              "description": "Timestamp when assignment was created (milliseconds since the UNIX epoch)",
              "type": "integer"
            }
          },
          "required": [
            "type",
            "assignment",
            "timestamp"
          ],
          "type": "object"
        },
        "type": "array"
      },
      "security_key_timestamp": {
        "description": "Timestamp when Security Key was created (milliseconds since the UNIX epoch)",
        "type": "integer"
      },
      "security_key_last_used": {
        "description": "Timestamp when Security Key was last used (milliseconds since the UNIX epoch)",
        "type": "integer"
      },
      "client_id": {
        "description": "Client identifier used for authentication",
        "example": "IY2D68DS",
        "type": "string"
      },
      "public_key": {
        "description": "PEM encoded public key (Ed25519/RSA) used for asymmetric signatures (optional)",
        "example": "-----BEGIN PUBLIC KEY----- MCowBQYDK2VwAyEApajFN0CSwIaaiIRPiFbiYYvpsLQLSccSLLsKPe984sc= -----END PUBLIC KEY-----",
        "type": "string"
      },
      "client_secret": {
        "description": "Client secret or MD5 fingerprint of public key used for authentication",
        "example": "P9Z_c73KaBPwpoTVfsXzehAhjhdJn5kM7Zlz_hhDhE8",
        "type": "string"
      },
      "api_key_default": {
        "description": "Informs whether this api key is default (field is deprecated and will be removed in the future)",
        "example": false,
        "type": "boolean"
      },
      "api_key_name": {
        "description": "Api key name that can be displayed in transaction log",
        "example": "TestName",
        "type": "string"
      },
      "api_key_features": {
        "description": "List of enabled advanced on-key features. Available options: - `restricted_block_trades`: Limit the block_trade read the scope of the API key to block trades that have been made using this specific API key - `block_trade_approval`: Block trades created using this API key require additional user approval. Methods that use `block_rfq` scope are not affected by Block Trade approval feature",
        "items": {
          "description": "Name of the feature",
          "type": "string"
        },
        "type": "array"
      },
      "max_scope": {
        "description": "Describes maximal access for tokens generated with given key, possible values: `trade:[read, read_write, none]`, `wallet:[read, read_write, none]`, `account:[read, read_write, none]`, `block_trade:[read, read_write, none]`, `block_rfq:[read, read_write, none]`. If scope is not provided, its value is set as none. Please check details described in Access scope",
        "example": "connection",
        "type": "string"
      },
      "api_key_enabled": {
        "description": "Informs whether api key is enabled and can be used for authentication",
        "example": true,
        "type": "boolean"
      },
      "enabled_field": {
        "description": "Current configuration status",
        "example": true,
        "type": "boolean"
      },
      "cod_scope": {
        "description": "Informs if Cancel on Disconnect was checked for the current connection or the account",
        "enum": [
          "connection",
          "account"
        ],
        "type": "string"
      },
      "nonce": {
        "description": "Nonce",
        "example": "bF1_gfgcsd",
        "type": "string"
      },
      "role": {
        "description": "Trade role of the user: `maker` or `taker`",
        "enum": [
          "maker",
          "taker"
        ],
        "type": "string"
      },
      "fee_role": {
        "description": "Fee role of the user: `maker` or `taker`. Can be different from trade role of the user when iceberg order was involved in matching.",
        "enum": [
          "maker",
          "taker"
        ],
        "type": "string"
      },
      "user_id": {
        "description": "Unique user identifier",
        "example": 57874,
        "type": "integer"
      },
      "username": {
        "description": "System name or user defined subaccount alias",
        "example": "MrTrader",
        "type": "string"
      },
      "custody_name": {
        "description": "Custody name",
        "enum": [
          "copper",
          "cobo"
        ],
        "type": "string"
      },
      "delta_total": {
        "description": "The sum of position deltas",
        "example": 0.1334,
        "type": "number"
      },
      "projected_delta_total": {
        "description": "The sum of position deltas without positions that will expire during closest expiration",
        "example": 0.1334,
        "type": "number"
      },
      "projected_maintenance_margin": {
        "description": "Projected maintenance margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
        "example": 1,
        "type": "number"
      },
      "estimated_liquidation_ratio": {
        "description": "Estimated Liquidation Ratio is returned only for users without portfolio margining enabled. Multiplying it by future position's market price returns its estimated liquidation price. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
        "example": 2.34e-05,
        "type": "number"
      },
      "projected_initial_margin": {
        "description": "Projected initial margin. When cross collateral is enabled, this aggregated value is calculated by converting the sum of each cross collateral currency's value to the given currency, using each cross collateral currency's index.",
        "example": 1,
        "type": "number"
      },
      "additional_reserve": {
        "description": "The account's balance reserved in other orders",
        "example": 0.3,
        "type": "number"
      },
      "rate_and_burst": {
        "required": [
          "rate",
          "burst"
        ],
        "properties": {
          "rate": {
            "description": "Number of requests per second allowed for user",
            "type": "integer"
          },
          "burst": {
            "description": "Maximal number of requests allowed for user in burst mode",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "group_rate_and_burst": {
        "properties": {
          "total": {
            "properties": {
              "rate": {
                "description": "Number of all requests per second in perpetuals allowed for user",
                "type": "integer"
              },
              "burst": {
                "description": "Maximal number of all requests allowed for user in burst mode",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "perpetuals": {
            "properties": {
              "rate": {
                "description": "Number of perpetual requests per second allowed for user",
                "type": "integer"
              },
              "burst": {
                "description": "Maximal number of perpetuals requests allowed for user in burst mode",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "futures": {
            "properties": {
              "rate": {
                "description": "Number of futures requests per second allowed for user",
                "type": "integer"
              },
              "burst": {
                "description": "Maximal number of futures requests allowed for user in burst mode",
                "type": "integer"
              }
            },
            "type": "object"
          },
          "options": {
            "properties": {
              "rate": {
                "description": "Number of option requests per second allowed for user",
                "type": "integer"
              },
              "burst": {
                "description": "Maximal number of option requests allowed for user in burst mode",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "api_limits": {
        "description": "Returned object is described in separate document.",
        "type": "object"
      },
      "scale_down": {
        "description": "The field is only added if the user has it set",
        "properties": {
          "mm_multiplier": {
            "description": "Maintenance Margin multiplier",
            "type": "number"
          },
          "im_multiplier": {
            "description": "Initial Margin multiplier",
            "type": "number"
          }
        },
        "required": [
          "im_multiplier",
          "mm_multiplier"
        ],
        "type": "object"
      },
      "rpl": {
        "description": "Session realized profit and loss",
        "example": 0.1,
        "type": "number"
      },
      "upl": {
        "description": "Session unrealized profit and loss",
        "example": 0.846863,
        "type": "number"
      },
      "side": {
        "example": "`buy`",
        "description": "Side - `buy` or `sell`",
        "enum": [
          "buy",
          "sell"
        ],
        "type": "string"
      },
      "fee_balance": {
        "description": "The account's fee balance (it can be used to pay for fees)",
        "type": "number"
      },
      "did": {
        "description": "Distributed ID",
        "type": "string"
      },
      "jurisdictions": {
        "description": "Jurisdictions a VASP belongs to",
        "items": {
          "description": "Jurisdiction name",
          "type": "string"
        },
        "type": "array"
      },
      "vasp_name": {
        "description": "VASP name",
        "type": "string"
      },
      "source": {
        "description": "Blockchain address source",
        "type": "string"
      },
      "jwt": {
        "description": "JSON web token",
        "type": "string"
      },
      "external_id": {
        "description": "User ID in external systems",
        "example": "4b4cee3d-2dfc-4402-a9ae-f8f9785fa966",
        "type": "string"
      },
      "business_registration_number": {
        "description": "Registration number of the company",
        "example": "2021/135466541/07",
        "type": "string"
      },
      "trigger_fill_condition": {
        "description": "The fill condition of the linked order (Only for linked order types), default: `first_hit`. `\"first_hit\"` - any execution of the primary order will fully cancel/place all secondary orders. `\"complete_fill\"` - a complete execution (meaning the primary order no longer exists) will cancel/place the secondary orders. `\"incremental\"` - any fill of the primary order will cause proportional partial cancellation/placement of the secondary order. The amount that will be subtracted/added to the secondary order will be rounded down to the contract size.",
        "enum": [
          "first_hit",
          "complete_fill",
          "incremental"
        ],
        "type": "string"
      },
      "withdrawal_policy_limit_bucket": {
        "description": "Withdrawal Policy limit bucket, i.e. `\"h24\"`",
        "enum": [
          "h24"
        ],
        "type": "string"
      },
      "withdrawal_policy_category": {
        "description": "Withdrawal Policy category, i.e. `\"small\"`, `\"secure\"`",
        "enum": [
          "small",
          "secure"
        ],
        "type": "string"
      },
      "withdrawal_policy_limit_buckets": {
        "description": "Withdrawal Policy limit bucket",
        "properties": {
          "small": {
            "$ref": "#/components/schemas/amount"
          },
          "secure": {
            "$ref": "#/components/schemas/amount"
          }
        },
        "type": "object"
      },
      "withdrawal_policy_amount": {
        "description": "A positive float as limit",
        "type": "number"
      },
      "oco_ref": {
        "description": "Unique reference that identifies a one_cancels_others (OCO) pair.",
        "type": "string"
      },
      "is_secondary_oto": {
        "description": "`true` if the order is an order that can be triggered by another order, otherwise not present.",
        "type": "boolean"
      },
      "block_rfq_legs": {
        "items": {
          "properties": {
            "ratio": {
              "description": "Ratio of amount between legs",
              "type": "integer"
            },
            "instrument_name": {
              "$ref": "#/components/schemas/instrument_name"
            },
            "direction": {
              "$ref": "#/components/schemas/direction"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "leg_structure": {
        "items": {
          "properties": {
            "ratio": {
              "description": "Ratio of amount between legs",
              "type": "integer"
            },
            "instrument_name": {
              "$ref": "#/components/schemas/instrument_name"
            },
            "direction": {
              "$ref": "#/components/schemas/direction"
            },
            "price": {
              "description": "Price for a leg",
              "type": "number"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "block_rfq_hedge_leg": {
        "properties": {
          "amount": {
            "description": "It represents the requested hedge leg size. For perpetual and inverse futures the amount is in USD units. For options and linear futures and it is the underlying base currency coin.",
            "type": "integer"
          },
          "instrument_name": {
            "$ref": "#/components/schemas/instrument_name"
          },
          "direction": {
            "$ref": "#/components/schemas/direction"
          },
          "price": {
            "description": "Price for a hedge leg",
            "type": "number"
          }
        },
        "type": "object"
      },
      "replaced_quote": {
        "description": "`true` if the quote was edited, otherwise `false`.",
        "type": "boolean"
      },
      "block_rfq": {
        "properties": {
          "creation_timestamp": {
            "description": "The timestamp when Block RFQ was created (milliseconds since the Unix epoch)",
            "example": 1536569522277,
            "type": "integer"
          },
          "expiration_timestamp": {
            "example": 1536569522277,
            "description": "The timestamp when the Block RFQ will expire (milliseconds since the UNIX epoch)",
            "type": "integer"
          },
          "block_rfq_id": {
            "description": "ID of the Block RFQ",
            "type": "integer"
          },
          "role": {
            "description": "Role of the user in Block RFQ",
            "enum": [
              "taker",
              "maker"
            ],
            "type": "string"
          },
          "state": {
            "description": "State of the Block RFQ",
            "enum": [
              "open",
              "filled",
              "cancelled",
              "expired"
            ],
            "type": "string"
          },
          "taker_rating": {
            "description": "Rating of the taker",
            "type": "string"
          },
          "makers": {
            "items": {
              "description": "List of targeted Block RFQ makers",
              "type": "string"
            },
            "type": "array"
          },
          "amount": {
            "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
            "type": "number"
          },
          "min_trade_amount": {
            "description": "Minimum amount for trading",
            "type": "number"
          },
          "asks": {
            "$ref": "#/components/schemas/quote_asks"
          },
          "bids": {
            "$ref": "#/components/schemas/quote_bids"
          },
          "legs": {
            "$ref": "#/components/schemas/block_rfq_legs"
          },
          "hedge": {
            "$ref": "#/components/schemas/block_rfq_hedge_leg"
          },
          "combo_id": {
            "$ref": "#/components/schemas/combo_id"
          },
          "label": {
            "description": "User defined label for the Block RFQ (maximum 64 characters)",
            "type": "string"
          },
          "app_name": {
            "description": "The name of the application that created the Block RFQ on behalf of the user (optional, visible only to taker).",
            "example": "Example Application",
            "type": "string"
          },
          "mark_price": {
            "$ref": "#/components/schemas/mark_price"
          },
          "disclosed": {
            "description": "Indicates whether the RFQ was created as non-anonymous, meaning taker and maker aliases are visible to counterparties.",
            "type": "boolean"
          },
          "taker": {
            "description": "Taker alias. Present only when `disclosed` is `true`.",
            "example": "TAKER1",
            "type": "string"
          },
          "index_prices": {
            "items": {
              "description": "A list of index prices for the underlying instrument(s) at the time of trade execution.",
              "type": "number"
            },
            "type": "array"
          },
          "included_in_taker_rating": {
            "description": "Indicates whether the RFQ is included in the taker's rating calculation. Present only for closed RFQs created by the requesting taker.",
            "type": "boolean"
          },
          "trades": {
            "items": {
              "properties": {
                "direction": {
                  "$ref": "#/components/schemas/direction"
                },
                "price": {
                  "$ref": "#/components/schemas/price"
                },
                "amount": {
                  "description": "Trade amount. For options, linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                  "type": "number"
                },
                "maker": {
                  "description": "Alias of the maker (optional)",
                  "type": "string"
                },
                "hedge_amount": {
                  "description": "Amount of the hedge leg. For linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "trade_trigger": {
            "$ref": "#/components/schemas/trade_trigger",
            "description": "Present only if a trade trigger was placed by the taker and only visible to taker. Only for cases: `cancelled` (contains the reason for cancellation) and `untriggered` (contains the information about the trade trigger)."
          },
          "trade_allocations": {
            "$ref": "#/components/schemas/trade_allocations",
            "description": "List of allocations for Block RFQ pre-allocation. Allows to split amount between different (sub)accounts. The taker can also allocate to himself. Visible only to the taker."
          }
        },
        "type": "object"
      },
      "block_rfq_for_maker": {
        "properties": {
          "creation_timestamp": {
            "description": "The timestamp when Block RFQ was created (milliseconds since the Unix epoch)",
            "example": 1536569522277,
            "type": "integer"
          },
          "expiration_timestamp": {
            "example": 1536569522277,
            "description": "The timestamp when the Block RFQ will expire (milliseconds since the UNIX epoch)",
            "type": "integer"
          },
          "block_rfq_id": {
            "description": "ID of the Block RFQ",
            "type": "integer"
          },
          "role": {
            "description": "Role of the user in Block RFQ",
            "enum": [
              "taker",
              "maker"
            ],
            "type": "string"
          },
          "state": {
            "description": "State of the Block RFQ",
            "enum": [
              "open",
              "filled",
              "cancelled",
              "expired"
            ],
            "type": "string"
          },
          "taker_rating": {
            "description": "Rating of the taker",
            "type": "string"
          },
          "amount": {
            "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
            "type": "number"
          },
          "min_trade_amount": {
            "description": "Minimum amount for trading",
            "type": "number"
          },
          "legs": {
            "$ref": "#/components/schemas/block_rfq_legs"
          },
          "hedge": {
            "$ref": "#/components/schemas/block_rfq_hedge_leg"
          },
          "combo_id": {
            "$ref": "#/components/schemas/combo_id"
          },
          "disclosed": {
            "description": "Indicates whether the RFQ was created as non-anonymous, meaning taker and maker aliases are visible to counterparties.",
            "type": "boolean"
          },
          "taker": {
            "description": "Taker alias. Present only when `disclosed` is `true`.",
            "example": "TAKER1",
            "type": "string"
          },
          "index_prices": {
            "items": {
              "description": "A list of index prices for the underlying instrument(s) at the time of trade execution.",
              "type": "number"
            },
            "type": "array"
          },
          "included_in_taker_rating": {
            "description": "Indicates whether the RFQ is included in the taker's rating calculation. Present only for closed RFQs created by the requesting taker.",
            "type": "boolean"
          },
          "trades": {
            "items": {
              "properties": {
                "direction": {
                  "$ref": "#/components/schemas/direction"
                },
                "price": {
                  "$ref": "#/components/schemas/price"
                },
                "amount": {
                  "description": "Trade amount. For options, linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                  "type": "number"
                },
                "maker": {
                  "description": "Alias of the maker (optional)",
                  "type": "string"
                },
                "hedge_amount": {
                  "description": "Amount of the hedge leg. For linear futures, linear perpetuals and spots the amount is denominated in the underlying base currency coin. The inverse perpetuals and inverse futures are denominated in USD units.",
                  "type": "number"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "block_rfq_quote": {
        "properties": {
          "creation_timestamp": {
            "description": "The timestamp when quote was created (milliseconds since the Unix epoch)",
            "example": 1536569522277,
            "type": "integer"
          },
          "last_update_timestamp": {
            "example": 1536569522277,
            "description": "Timestamp of the last update of the quote (milliseconds since the UNIX epoch)",
            "type": "integer"
          },
          "block_rfq_id": {
            "description": "ID of the Block RFQ",
            "type": "integer"
          },
          "block_rfq_quote_id": {
            "description": "ID of the Block RFQ quote",
            "type": "integer"
          },
          "quote_state": {
            "description": "State of the quote",
            "type": "string"
          },
          "execution_instruction": {
            "$ref": "#/components/schemas/execution_instruction"
          },
          "price": {
            "description": "Price of a quote",
            "type": "number"
          },
          "amount": {
            "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
            "type": "number"
          },
          "direction": {
            "$ref": "#/components/schemas/quote_direction"
          },
          "filled_amount": {
            "$ref": "#/components/schemas/filled_amount_quote"
          },
          "legs": {
            "$ref": "#/components/schemas/leg_structure"
          },
          "hedge": {
            "$ref": "#/components/schemas/block_rfq_hedge_leg"
          },
          "replaced": {
            "$ref": "#/components/schemas/replaced_quote"
          },
          "label": {
            "description": "User defined label for the quote (maximum 64 characters)",
            "type": "string"
          },
          "app_name": {
            "description": "The name of the application that placed the quote on behalf of the user (optional).",
            "example": "Example Application",
            "type": "string"
          },
          "quote_state_reason": {
            "description": "Reason of quote cancellation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "quote_bids": {
        "items": {
          "properties": {
            "makers": {
              "items": {
                "description": "Maker of the quote",
                "type": "string"
              },
              "type": "array"
            },
            "price": {
              "description": "Price of a quote",
              "type": "number"
            },
            "last_update_timestamp": {
              "example": 1536569522277,
              "description": "Timestamp of the last update of the quote (milliseconds since the UNIX epoch)",
              "type": "integer"
            },
            "execution_instruction": {
              "$ref": "#/components/schemas/execution_instruction"
            },
            "amount": {
              "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
              "type": "number"
            },
            "expires_at": {
              "example": 1745312540321,
              "description": "The timestamp when the quote expires (milliseconds since the Unix epoch), equal to the earliest expiry of placed quotes",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "quote_asks": {
        "items": {
          "properties": {
            "makers": {
              "items": {
                "description": "Maker of the quote",
                "type": "string"
              },
              "type": "array"
            },
            "price": {
              "description": "Price of a quote",
              "type": "number"
            },
            "last_update_timestamp": {
              "example": 1536569522277,
              "description": "Timestamp of the last update of the quote (milliseconds since the UNIX epoch)",
              "type": "integer"
            },
            "execution_instruction": {
              "$ref": "#/components/schemas/execution_instruction"
            },
            "amount": {
              "description": "This value multiplied by the ratio of a leg gives trade size on that leg.",
              "type": "number"
            },
            "expires_at": {
              "example": 1745312540321,
              "description": "The timestamp when the quote expires (milliseconds since the Unix epoch), equal to the earliest expiry of placed quotes",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "execution_instruction": {
        "description": "Execution instruction of the quote. Default - `any_part_of` `\"all_or_none (AON)\"` - The quote can only be filled entirely or not at all, ensuring that its amount matches the amount specified in the Block RFQ. Additionally, 'all_or_none' quotes have priority over 'any_part_of' quotes at the same price level.`\"any_part_of (APO)\"` - The quote can be filled either partially or fully, with the filled amount potentially being less than the Block RFQ amount.",
        "type": "string"
      },
      "custody_settlement": {
        "properties": {
          "id": {
            "description": "Unique identifier of the settlement instance",
            "type": "string"
          },
          "status": {
            "description": "Status of the settlement",
            "enum": [
              "completed",
              "completed_partially",
              "failed",
              "in_progress"
            ],
            "example": "completed",
            "type": "string"
          },
          "created_at": {
            "description": "The timestamp when the settlement was created (milliseconds since the Unix epoch)",
            "example": 1736712919000,
            "type": "integer"
          },
          "updated_at": {
            "description": "Timestamp of the last update of the settlement (milliseconds since the Unix epoch)",
            "example": 1736713920000,
            "type": "integer"
          },
          "failed_at": {
            "description": "Timestamp (in milliseconds since the Unix epoch) when the settlement or settlement instruction failed. Present only if the status is `failed`.",
            "example": 1736713950000,
            "type": "integer"
          },
          "completed_at": {
            "description": "Timestamp of when the settlement was completed (if applicable)",
            "example": 1736714000000,
            "type": "integer"
          },
          "instructions": {
            "description": "Settlement currency instructions",
            "items": {
              "properties": {
                "currency": {
                  "description": "The currency supported by custodian and exchange",
                  "type": "string"
                },
                "amount": {
                  "description": "Positive value means that since the previous settlement, the client has earned/bought the asset in the exchange and settlement direction is from exchange to the client.Negative value means, since the previous settlement, the client has lost/sold the asset in the exchange and settlement direction is from client to deribit.",
                  "example": 1.3141,
                  "type": "number"
                },
                "custody_balance": {
                  "description": "Custody balance of the user at the time of initiating the settlement",
                  "example": 2.341,
                  "type": "number"
                },
                "total_equity": {
                  "description": "Total equity of the client between all main and sub accounts, at the time of initialising the settlement.",
                  "example": 3.452,
                  "type": "number"
                },
                "status": {
                  "description": "The status of settlement instruction. Default is `pending_review`.",
                  "enum": [
                    "pending_review",
                    "pending_execution",
                    "completed",
                    "rejected",
                    "failed",
                    "skipped"
                  ],
                  "example": "completed",
                  "type": "string"
                },
                "settlement_id": {
                  "description": "The id of the settlement instance",
                  "example": "dec42708-2ec6-4cdd-8f9d-d49bbe94d0aa",
                  "type": "string"
                },
                "created_at": {
                  "description": "Timestamp of when the instruction was created (milliseconds since the Unix epoch)",
                  "example": 1736712919000,
                  "type": "integer"
                },
                "updated_at": {
                  "description": "Timestamp of the last update of the instruction (milliseconds since the Unix epoch)",
                  "example": 1736713920000,
                  "type": "integer"
                },
                "failed_at": {
                  "description": "Timestamp (in milliseconds since the Unix epoch) when the settlement or settlement instruction failed. Present only if the status is `failed`.",
                  "example": 1736713950000,
                  "type": "integer"
                },
                "reviewed_at": {
                  "description": "Timestamp (in milliseconds since the Unix epoch) when the custodian reviewed the settlement instruction. Present only after a review action has been taken.",
                  "example": 1736713986000,
                  "type": "integer"
                },
                "completed_at": {
                  "description": "Timestamp (in milliseconds since the Unix epoch) when the settlement or settlement instruction was completed. Only present if the status is `completed`.",
                  "example": 1736714000000,
                  "type": "integer"
                },
                "review_reason": {
                  "description": "Optional reason provided by the custodian when rejecting or ignoring a settlement instruction.",
                  "example": "Custody balance mismatch",
                  "type": "string"
                },
                "review_result": {
                  "description": "Outcome of the custodian's review. Present only after the review has been completed. Values match the `action` taken: `confirm`, `ignore`, or `reject`.",
                  "example": "confirm",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "note": {
            "description": "Additional note related to the settlement",
            "example": "Settlement processed successfully",
            "type": "string"
          }
        },
        "type": "object"
      },
      "unhosted_wallet": {
        "description": "Indicates if the address belongs to an unhosted wallet",
        "example": false,
        "type": "boolean"
      },
      "trade_allocations": {
        "description": "List of allocations for Block RFQ pre-allocation. Allows to split amount between different (sub)accounts or broker clients. Each allocation must specify either `user_id` (for direct allocation) or `client_info` object (for broker allocation), and amount. Visible only to the taker.",
        "items": {
          "properties": {
            "user_id": {
              "description": "User ID to allocate part of the RFQ amount. For brokers the User ID is obstructed.",
              "type": "integer"
            },
            "client_info": {
              "description": "Client allocation info for brokers.",
              "properties": {
                "client_id": {
                  "description": "ID of a client; available to broker. Represents a group of users under a common name.",
                  "type": "integer"
                },
                "client_link_id": {
                  "description": "ID assigned to a single user in a client; available to broker.",
                  "type": "integer"
                },
                "name": {
                  "description": "Name of the linked user within the client; available to broker.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "amount": {
              "description": "Amount allocated to this user or client.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "type": "array"
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Generic error response for broken references",
        "properties": {
          "jsonrpc": {
            "type": "string",
            "enum": [
              "2.0"
            ]
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "Error code"
              },
              "message": {
                "type": "string",
                "description": "Error message"
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "jsonrpc",
          "error"
        ]
      },
      "GetgetOrderBookByInstrumentId200response": {
        "$ref": "#/components/schemas/PublicGetOrderBookResponse"
      },
      "GetgetLastSettlementsByCurrency200response": {
        "$ref": "#/components/schemas/PublicSettlementResponse"
      },
      "GetgetBookSummaryByCurrency200response": {
        "$ref": "#/components/schemas/PublicGetBookSummaryResponse"
      },
      "GetgetBookSummaryByInstrument200response": {
        "$ref": "#/components/schemas/PublicGetBookSummaryResponse"
      },
      "GetgetLastSettlementsByInstrument200response": {
        "$ref": "#/components/schemas/PublicSettlementResponse"
      },
      "GetgetSettlementHistoryByCurrency200response": {
        "$ref": "#/components/schemas/PrivateSettlementResponse"
      },
      "GetgetSettlementHistoryByInstrument200response": {
        "$ref": "#/components/schemas/PrivateSettlementResponse"
      },
      "GetgetTradeVolumes200response": {
        "$ref": "#/components/schemas/PublicGetTradesVolumesResponse"
      },
      "GetgetSupportedIndexNames200response": {
        "$ref": "#/components/schemas/PublicGetIndexPriceNamesResponse"
      },
      "GetgetOrderHistoryByInstrument200response": {
        "$ref": "#/components/schemas/PrivateGetOrderHistoryResponse"
      },
      "GetgetOrderHistoryByCurrency200response": {
        "$ref": "#/components/schemas/PrivateGetOrderHistoryResponse"
      },
      "GetgetOpenOrdersByInstrument200response": {
        "$ref": "#/components/schemas/PrivateGetOpenOrdersResponse"
      },
      "GetgetOpenOrdersByCurrency200response": {
        "$ref": "#/components/schemas/PrivateGetOpenOrdersResponse"
      },
      "GetgetOpenOrdersByLabel200response": {
        "$ref": "#/components/schemas/PrivateGetOpenOrdersResponse"
      },
      "GetgetLastTradesByInstrument200response": {
        "$ref": "#/components/schemas/PublicTradesHistoryResponse"
      },
      "GetgetLastTradesByInstrumentAndTime200response": {
        "$ref": "#/components/schemas/PublicTradesHistoryResponse"
      },
      "GetgetLastTradesByCurrency200response": {
        "$ref": "#/components/schemas/PublicTradesHistoryResponse"
      },
      "GetgetLastTradesByCurrencyAndTime200response": {
        "$ref": "#/components/schemas/PublicTradesHistoryResponse"
      },
      "GetgetUserTradesByInstrument200response": {
        "$ref": "#/components/schemas/PrivateGetUserTradesHistoryResponse"
      },
      "GetgetUserTradesByInstrumentAndTime200response": {
        "$ref": "#/components/schemas/PrivateGetUserTradesHistoryResponse"
      },
      "GetgetUserTradesByCurrency200response": {
        "$ref": "#/components/schemas/PrivateGetUserTradesHistoryResponse"
      },
      "GetgetUserTradesByCurrencyAndTime200response": {
        "$ref": "#/components/schemas/PrivateGetUserTradesHistoryResponse"
      },
      "GetcancelAllByInstrument200response": {
        "$ref": "#/components/schemas/PrivateCancelAllResponse"
      },
      "GetcancelAllByCurrency200response": {
        "$ref": "#/components/schemas/PrivateCancelAllResponse"
      },
      "GetcancelAllByCurrencyPair200response": {
        "$ref": "#/components/schemas/PrivateCancelAllResponse"
      },
      "GetcancelAllByKindOrType200response": {
        "$ref": "#/components/schemas/PrivateCancelAllResponse"
      },
      "GetcancelByLabel200response": {
        "$ref": "#/components/schemas/PrivateCancelAllResponse"
      },
      "Getbuy200response": {
        "$ref": "#/components/schemas/PrivateBuyAndSellResponse"
      },
      "Getsell200response": {
        "$ref": "#/components/schemas/PrivateBuyAndSellResponse"
      },
      "GeteditByLabel200response": {
        "$ref": "#/components/schemas/PrivateEditResponse"
      },
      "GetclosePosition200response": {
        "$ref": "#/components/schemas/PrivateBuyAndSellResponse"
      },
      "GetcreateDepositAddress200response": {
        "$ref": "#/components/schemas/PrivateDepositAddressResponse"
      },
      "GetgetCurrentDepositAddress200response": {
        "$ref": "#/components/schemas/PrivateDepositAddressResponse"
      },
      "GetcancelWithdrawal200response": {
        "$ref": "#/components/schemas/PrivateWithdrawResponse"
      },
      "GetgetAddressBook200response": {
        "$ref": "#/components/schemas/PrivateAddressBookResponse"
      },
      "GetsubmitTransferToSubaccount200response": {
        "$ref": "#/components/schemas/PrivateSubmitTransferResponse"
      },
      "GetsubmitTransferBetweenSubaccounts200response": {
        "$ref": "#/components/schemas/PrivateSubmitTransferResponse"
      },
      "GetsubmitTransferToUser200response": {
        "$ref": "#/components/schemas/PrivateSubmitTransferResponse"
      },
      "GetcancelTransferById200response": {
        "$ref": "#/components/schemas/PrivateSubmitTransferResponse"
      },
      "GetsetClearanceOriginator200response": {
        "$ref": "#/components/schemas/deposit"
      },
      "GetgetAccountSummary200response": {
        "$ref": "#/components/schemas/PrivateAccountResponse"
      },
      "GetgetAccountSummaries200response": {
        "$ref": "#/components/schemas/PrivateAccountSummariesResponse"
      },
      "Getsimulate200response": {
        "$ref": "#/components/schemas/PrivatePmeSimulateResponse"
      },
      "GetenableAffiliateProgram200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetresetMmp200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetsetSelfTradingConfig200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetsetDisabledTradingProducts200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetdisableApiKey200response": {
        "$ref": "#/components/schemas/PrivateApiKeyResponse"
      },
      "GetenableApiKey200response": {
        "$ref": "#/components/schemas/PrivateApiKeyResponse"
      },
      "GetcreateApiKey200response": {
        "$ref": "#/components/schemas/PrivateApiKeyResponse"
      },
      "GetchangeScopeInApiKey200response": {
        "$ref": "#/components/schemas/PrivateApiKeyResponse"
      },
      "GetchangeApiKeyName200response": {
        "$ref": "#/components/schemas/PrivateApiKeyResponse"
      },
      "GetresetApiKey200response": {
        "$ref": "#/components/schemas/PrivateApiKeyResponse"
      },
      "GetremoveApiKey200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GeteditApiKey200response": {
        "$ref": "#/components/schemas/PrivateApiKeyResponse"
      },
      "GetexecuteBlockTrade200response": {
        "$ref": "#/components/schemas/PrivateGetBlockTradeResponse"
      },
      "GetinvalidateBlockTradeSignature200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetmovePositions200response": {
        "$ref": "#/components/schemas/PrivatePositionMoveResponse"
      },
      "GetapproveBlockTrade200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetrejectBlockTrade200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetexchangeToken200response": {
        "$ref": "#/components/schemas/PublicTokenResponse"
      },
      "GetforkToken200response": {
        "$ref": "#/components/schemas/PublicTokenResponse"
      },
      "GetsetHeartbeat200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetdisableHeartbeat200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetdisableHeartbeat400response": {
        "$ref": "#/components/schemas/ErrorMessageResponse"
      },
      "Getunsubscribe401response": {
        "$ref": "#/components/schemas/ErrorMessageResponse"
      },
      "GetunsubscribeAll200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "Gethello200response": {
        "$ref": "#/components/schemas/PublicTestResponse"
      },
      "GetgetNewAnnouncements200response": {
        "$ref": "#/components/schemas/PublicGetAnnouncementsResponse"
      },
      "GetsetAnnouncementAsRead200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetchangeSubaccountName200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetsetEmailLanguage200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetsetEmailForSubaccount200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GettoggleSubaccountLogin200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GettoggleNotificationsFromSubaccount200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetremoveSubaccount200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "Getunsubscribe200response": {
        "$ref": "#/components/schemas/PrivateSubscribeResponse"
      },
      "GetenableCancelOnDisconnect200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetenableCancelOnDisconnect400response": {
        "$ref": "#/components/schemas/ErrorMessageResponse"
      },
      "GetdisableCancelOnDisconnect200response": {
        "$ref": "#/components/schemas/OkResponse"
      },
      "GetdisableCancelOnDisconnect400response": {
        "$ref": "#/components/schemas/ErrorMessageResponse"
      },
      "Getlogout400response": {
        "$ref": "#/components/schemas/ErrorMessageResponse"
      }
    },
    "responses": {
      "ErrorMessageResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessageResponse"
            }
          }
        }
      },
      "OkResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/OkResponse"
            }
          }
        }
      },
      "PublicGetTimeResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetTimeResponse"
            }
          }
        }
      },
      "PublicGetInstrumentsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetInstrumentsResponse"
            }
          }
        }
      },
      "PublicGetInstrumentResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetInstrumentResponse"
            }
          }
        }
      },
      "PublicGetExpirationsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetExpirationsResponse"
            }
          }
        }
      },
      "PublicGetFundingRateHistoryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetFundingRateHistoryResponse"
            }
          }
        }
      },
      "PublicGetFundingRateValueResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetFundingRateValueResponse"
            }
          }
        }
      },
      "PublicGetFundingChartDataResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetFundingChartDataResponse"
            }
          }
        }
      },
      "PublicGetTradingviewChartDataResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetTradingviewChartDataResponse"
            }
          }
        }
      },
      "PublicGetVolatilityIndexDataResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetVolatilityIndexDataResponse"
            }
          }
        }
      },
      "PublicGetMarkPriceHistoryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetMarkPriceHistoryResponse"
            }
          }
        }
      },
      "PublicGetCurrenciesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetCurrenciesResponse"
            }
          }
        }
      },
      "PublicGetHistoricalVolatilityResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetHistoricalVolatilityResponse"
            }
          }
        }
      },
      "PublicGetDeliveryPricesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetDeliveryPricesResponse"
            }
          }
        }
      },
      "PublicGetContractSizeResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetContractSizeResponse"
            }
          }
        }
      },
      "PublicGetAprHistoryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetAprHistoryResponse"
            }
          }
        }
      },
      "PublicAuthResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicAuthResponse"
            }
          }
        }
      },
      "PublicTokenResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicTokenResponse"
            }
          }
        }
      },
      "PublicTickerResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicTickerResponse"
            }
          }
        }
      },
      "PublicTickersByExpirationResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicTickersByExpirationResponse"
            }
          }
        }
      },
      "PublicTradesHistoryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicTradesHistoryResponse"
            }
          }
        }
      },
      "PublicTestResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicTestResponse"
            }
          }
        }
      },
      "PublicStatusResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicStatusResponse"
            }
          }
        }
      },
      "PublicSettlementResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicSettlementResponse"
            }
          }
        }
      },
      "PublicGetAnnouncementsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetAnnouncementsResponse"
            }
          }
        }
      },
      "PublicGetOrderBookResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetOrderBookResponse"
            }
          }
        }
      },
      "PublicGetBookSummaryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetBookSummaryResponse"
            }
          }
        }
      },
      "PublicGetIndexPriceResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetIndexPriceResponse"
            }
          }
        }
      },
      "PublicGetIndexPriceNamesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetIndexPriceNamesResponse"
            }
          }
        }
      },
      "PublicGetTradesVolumesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetTradesVolumesResponse"
            }
          }
        }
      },
      "PublicGetSecurityKeysResetDataResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetSecurityKeysResetDataResponse"
            }
          }
        }
      },
      "PublicGetCombosResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetCombosResponse"
            }
          }
        }
      },
      "PublicGetComboIdsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetComboIdsResponse"
            }
          }
        }
      },
      "PublicGetComboDetailsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetComboDetailsResponse"
            }
          }
        }
      },
      "PrivateCreateComboResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCreateComboResponse"
            }
          }
        }
      },
      "PrivateGetLegPricesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetLegPricesResponse"
            }
          }
        }
      },
      "PrivateGetPositionResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetPositionResponse"
            }
          }
        }
      },
      "PrivateGetPositionsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetPositionsResponse"
            }
          }
        }
      },
      "PrivateSubscribeResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateSubscribeResponse"
            }
          }
        }
      },
      "PrivateGetOrderMarginByIdsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetOrderMarginByIdsResponse"
            }
          }
        }
      },
      "PrivateBuyAndSellResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateBuyAndSellResponse"
            }
          }
        }
      },
      "PrivateGetOrderStateResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetOrderStateResponse"
            }
          }
        }
      },
      "PrivateGetOrderStateByLabelResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetOrderStateByLabelResponse"
            }
          }
        }
      },
      "PrivateGetTriggerOrderHistoryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetTriggerOrderHistoryResponse"
            }
          }
        }
      },
      "PrivateGetSubaccountsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetSubaccountsResponse"
            }
          }
        }
      },
      "PrivateGetSubaccountsDetailsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetSubaccountsDetailsResponse"
            }
          }
        }
      },
      "PrivateCreateSubaccountResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCreateSubaccountResponse"
            }
          }
        }
      },
      "PrivateGetUserTradesByOrderResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetUserTradesByOrderResponse"
            }
          }
        }
      },
      "PrivateGetUserTradesHistoryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetUserTradesHistoryResponse"
            }
          }
        }
      },
      "PrivateGetDepositsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetDepositsResponse"
            }
          }
        }
      },
      "PrivateWithdrawResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateWithdrawResponse"
            }
          }
        }
      },
      "PrivateGetWithdrawalsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetWithdrawalsResponse"
            }
          }
        }
      },
      "PrivateDepositAddressResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateDepositAddressResponse"
            }
          }
        }
      },
      "PrivateAddressBookResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateAddressBookResponse"
            }
          }
        }
      },
      "PrivateAddToAddressBookResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateAddToAddressBookResponse"
            }
          }
        }
      },
      "PrivateRemoveFromAddressBookResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateRemoveFromAddressBookResponse"
            }
          }
        }
      },
      "PrivateUpdateInAddressBookResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateUpdateInAddressBookResponse"
            }
          }
        }
      },
      "PrivateSaveAddressBeneficiaryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateSaveAddressBeneficiaryResponse"
            }
          }
        }
      },
      "PrivateGetAddressBeneficiaryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetAddressBeneficiaryResponse"
            }
          }
        }
      },
      "PrivateDeleteAddressBeneficiaryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateDeleteAddressBeneficiaryResponse"
            }
          }
        }
      },
      "PrivateListAddressBeneficiariesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateListAddressBeneficiariesResponse"
            }
          }
        }
      },
      "PrivateGetTransfersResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetTransfersResponse"
            }
          }
        }
      },
      "PrivateSubmitTransferResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateSubmitTransferResponse"
            }
          }
        }
      },
      "PrivateGetRewardEligibilityResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetRewardEligibilityResponse"
            }
          }
        }
      },
      "PrivateAccountResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateAccountResponse"
            }
          }
        }
      },
      "PrivateAccountSummariesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateAccountSummariesResponse"
            }
          }
        }
      },
      "PrivateCancelResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCancelResponse"
            }
          }
        }
      },
      "PrivateCancelAllResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCancelAllResponse"
            }
          }
        }
      },
      "PrivateGetEmailLanguageResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetEmailLanguageResponse"
            }
          }
        }
      },
      "PrivateEditResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateEditResponse"
            }
          }
        }
      },
      "PrivateGetOrderHistoryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetOrderHistoryResponse"
            }
          }
        }
      },
      "PrivateGetOpenOrdersResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetOpenOrdersResponse"
            }
          }
        }
      },
      "PrivateSettlementResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateSettlementResponse"
            }
          }
        }
      },
      "PrivateGetMarginsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetMarginsResponse"
            }
          }
        }
      },
      "PrivateApiKeyResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateApiKeyResponse"
            }
          }
        }
      },
      "PrivateCancelQuotesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCancelQuotesResponse"
            }
          }
        }
      },
      "PrivateMassQuoteResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateMassQuoteResponse"
            }
          }
        }
      },
      "PrivateGetMmpConfigResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetMmpConfigResponse"
            }
          }
        }
      },
      "PrivateGetMmpStatusResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetMmpStatusResponse"
            }
          }
        }
      },
      "PrivateSetMmpConfigResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateSetMmpConfigResponse"
            }
          }
        }
      },
      "PrivateGetAccessLogResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetAccessLogResponse"
            }
          }
        }
      },
      "PrivateChangeMarginModelResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateChangeMarginModelResponse"
            }
          }
        }
      },
      "PrivateGetSecurityKeyActivationDataResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetSecurityKeyActivationDataResponse"
            }
          }
        }
      },
      "PrivateListSecurityKeysResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateListSecurityKeysResponse"
            }
          }
        }
      },
      "PrivateGetSecurityKeyStatusResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetSecurityKeyStatusResponse"
            }
          }
        }
      },
      "PrivateGetCancelOnDisconnectResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetCancelOnDisconnectResponse"
            }
          }
        }
      },
      "PrivateGetTransactionLogResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetTransactionLogResponse"
            }
          }
        }
      },
      "PrivateGetBlockTradeResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBlockTradeResponse"
            }
          }
        }
      },
      "PrivatePositionMoveResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivatePositionMoveResponse"
            }
          }
        }
      },
      "PrivateGetBlockTradesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBlockTradesResponse"
            }
          }
        }
      },
      "PrivateSimulateBlockTradeResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateSimulateBlockTradeResponse"
            }
          }
        }
      },
      "PrivateVerifyBlockTradeResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateVerifyBlockTradeResponse"
            }
          }
        }
      },
      "PrivateGetPendingBlockTradesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetPendingBlockTradesResponse"
            }
          }
        }
      },
      "PrivateGetBlockTradeRequestsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBlockTradeRequestsResponse"
            }
          }
        }
      },
      "PrivateChangePasswordResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateChangePasswordResponse"
            }
          }
        }
      },
      "PrivateGetBlockRfqsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBlockRfqsResponse"
            }
          }
        }
      },
      "PrivateCreateBlockRfqResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCreateBlockRfqResponse"
            }
          }
        }
      },
      "PrivateCancelBlockRfqResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCancelBlockRfqResponse"
            }
          }
        }
      },
      "PrivateAcceptBlockRfqResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateAcceptBlockRfqResponse"
            }
          }
        }
      },
      "PrivateCancelBlockRfqTriggerResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCancelBlockRfqTriggerResponse"
            }
          }
        }
      },
      "PrivateGetBlockRfqQuotesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBlockRfqQuotesResponse"
            }
          }
        }
      },
      "PrivateAddBlockRfqQuoteResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateAddBlockRfqQuoteResponse"
            }
          }
        }
      },
      "PrivateEditBlockRfqQuoteResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateEditBlockRfqQuoteResponse"
            }
          }
        }
      },
      "PrivateCancelBlockRfqQuoteResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCancelBlockRfqQuoteResponse"
            }
          }
        }
      },
      "PrivateCancelAllBlockRfqQuotesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCancelAllBlockRfqQuotesResponse"
            }
          }
        }
      },
      "PrivateGetBlockRfqMakersResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBlockRfqMakersResponse"
            }
          }
        }
      },
      "PublicGetBlockRfqTradesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicGetBlockRfqTradesResponse"
            }
          }
        }
      },
      "PrivateGetBlockRfqUserInfoResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBlockRfqUserInfoResponse"
            }
          }
        }
      },
      "PublicListApiKeysResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicListApiKeysResponse"
            }
          }
        }
      },
      "PrivateGetUserLocksResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetUserLocksResponse"
            }
          }
        }
      },
      "PrivateGetAffiliateProgramInfoResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetAffiliateProgramInfoResponse"
            }
          }
        }
      },
      "PrivateStatsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateStatsResponse"
            }
          }
        }
      },
      "PrivateSimulatePortfolioResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateSimulatePortfolioResponse"
            }
          }
        }
      },
      "PrivatePmeSimulateResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivatePmeSimulateResponse"
            }
          }
        }
      },
      "PrivatePmeParamsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivatePmeParamsResponse"
            }
          }
        }
      },
      "PublicPlaceholderResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublicPlaceholderResponse"
            }
          }
        }
      },
      "PrivateChatSetNickResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateChatSetNickResponse"
            }
          }
        }
      },
      "PrivateChatGetAccountSummaryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateChatGetAccountSummaryResponse"
            }
          }
        }
      },
      "PrivatePutBalanceResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivatePutBalanceResponse"
            }
          }
        }
      },
      "PrivateGetBalanceResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBalanceResponse"
            }
          }
        }
      },
      "PrivateGetBalanceSnapshotResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBalanceSnapshotResponse"
            }
          }
        }
      },
      "PrivateGetAllBalancesSnapshotResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetAllBalancesSnapshotResponse"
            }
          }
        }
      },
      "PrivateCustodySettlementResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateCustodySettlementResponse"
            }
          }
        }
      },
      "PrivateGetJwtResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetJwtResponse"
            }
          }
        }
      },
      "MulticastGetPacketResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MulticastGetPacketResponse"
            }
          }
        }
      },
      "MulticastGetPacketsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MulticastGetPacketsResponse"
            }
          }
        }
      },
      "MulticastGetInstrumentDictionaryResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MulticastGetInstrumentDictionaryResponse"
            }
          }
        }
      },
      "AddressOwnershipResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AddressOwnershipResponse"
            }
          }
        }
      },
      "VaspsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/VaspsResponse"
            }
          }
        }
      },
      "PrivateGetWithdrawalPolicyModeResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetWithdrawalPolicyModeResponse"
            }
          }
        }
      },
      "PrivateGetWithdrawalPolicyLimitsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetWithdrawalPolicyLimitsResponse"
            }
          }
        }
      },
      "PrivateGetBrokerTradesResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBrokerTradesResponse"
            }
          }
        }
      },
      "PrivateGetBrokerTradeRequestsResponse": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrivateGetBrokerTradeRequestsResponse"
            }
          }
        }
      },
      "ErrorResponse": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "get_public_unsubscribe_200": {
        "description": "Successfully unsubscribed from channels",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "jsonrpc": {
                  "type": "string",
                  "example": "2.0"
                },
                "id": {
                  "type": "integer",
                  "example": 8691
                },
                "result": {
                  "type": "array",
                  "description": "List of channels that were successfully unsubscribed in this request",
                  "items": {
                    "type": "string",
                    "x-deribit-type": "channel"
                  },
                  "example": [
                    "deribit_price_index.btc_usd"
                  ]
                }
              }
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 8691,
                  "result": [
                    "deribit_price_index.btc_usd"
                  ]
                }
              }
            }
          }
        }
      },
      "get_private_list_custody_accounts_200": {
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                {
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/custody_account"
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2515,
                  "result": [
                    {
                      "name": "copper",
                      "currency": "BTC",
                      "client_id": "4KVcFrrzmXBR",
                      "external_id": "24f97d44-1d72-4641-8527-811268a0bdd3",
                      "balance": 0.5,
                      "withdrawals_require_security_key": false,
                      "pending_withdrawal_balance": 0.1,
                      "auto_deposit": false
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Response for GET /private/list_custody_accounts"
      },
      "GetgetOrderBookByInstrumentId200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetOrderBookByInstrumentId200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 8772,
                  "result": {
                    "timestamp": 1550757626706,
                    "stats": {
                      "volume": 93.35589552,
                      "price_change": 0.6913,
                      "low": 3940.75,
                      "high": 3976.25
                    },
                    "state": "open",
                    "settlement_price": 3925.85,
                    "open_interest": 45.27600333464605,
                    "min_price": 3932.22,
                    "max_price": 3971.74,
                    "mark_price": 3931.97,
                    "last_price": 3955.75,
                    "instrument_name": "BTC-PERPETUAL",
                    "index_price": 3910.46,
                    "funding_8h": 0.00455263,
                    "current_funding": 0.00500063,
                    "change_id": 474988,
                    "bids": [
                      [
                        3955.75,
                        30.0
                      ],
                      [
                        3940.75,
                        102020.0
                      ],
                      [
                        3423.0,
                        42840.0
                      ]
                    ],
                    "best_bid_price": 3955.75,
                    "best_bid_amount": 30.0,
                    "best_ask_price": 0.0,
                    "best_ask_amount": 0.0,
                    "asks": []
                  }
                }
              }
            }
          }
        }
      },
      "GetgetLastSettlementsByCurrency200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetLastSettlementsByCurrency200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 4497,
                  "result": {
                    "settlements": [
                      {
                        "type": "delivery",
                        "timestamp": 1550242800013,
                        "session_profit_loss": 4.703907906,
                        "profit_loss": -0.427669766,
                        "position": 64,
                        "mark_price": 0.121679828,
                        "instrument_name": "BTC-15FEB19-4000-P",
                        "index_price": 3566.08
                      },
                      {
                        "type": "delivery",
                        "timestamp": 1550242800013,
                        "session_profit_loss": 3.135938604,
                        "profit_loss": -2.539278115,
                        "position": 206,
                        "mark_price": 0,
                        "instrument_name": "BTC-15FEB19-4000-C",
                        "index_price": 3566.08
                      }
                    ],
                    "continuation": "29XjjMM7Zc6U4oytmV27f7a6YRb5aSdVijwfuYhHRTLphugjRf1edP8uGLo3w2mWKV23QgrxsmenRGqzucc7"
                  }
                }
              }
            }
          }
        }
      },
      "GetgetBookSummaryByCurrency200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetBookSummaryByCurrency200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9344,
                  "result": [
                    {
                      "volume_usd": 0,
                      "volume": 0,
                      "quote_currency": "USD",
                      "price_change": -11.1896349,
                      "open_interest": 0,
                      "mid_price": null,
                      "mark_price": 3579.73,
                      "mark_iv": 80,
                      "low": null,
                      "last": null,
                      "instrument_name": "BTC-22FEB19",
                      "high": null,
                      "estimated_delivery_price": 3579.73,
                      "creation_timestamp": 1550230036440,
                      "bid_price": null,
                      "base_currency": "BTC",
                      "ask_price": null
                    },
                    {
                      "volume_usd": 22440,
                      "volume": 6.24,
                      "quote_currency": "USD",
                      "price_change": -60.8183509,
                      "open_interest": 183180,
                      "mid_price": null,
                      "mark_price": 3579.73,
                      "mark_iv": 80,
                      "low": 3591,
                      "last": 3595,
                      "instrument_name": "BTC-PERPETUAL",
                      "high": 3595,
                      "funding_8h": 0.0002574,
                      "estimated_delivery_price": 3579.73,
                      "current_funding": 0,
                      "creation_timestamp": 1550230036440,
                      "bid_price": null,
                      "base_currency": "BTC",
                      "ask_price": null
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetgetBookSummaryByInstrument200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetBookSummaryByInstrument200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 3659,
                  "result": [
                    {
                      "volume": 0.55,
                      "underlying_price": 121.38,
                      "underlying_index": "index_price",
                      "quote_currency": "USD",
                      "price_change": -26.7793594,
                      "open_interest": 0.55,
                      "mid_price": 0.2444,
                      "mark_price": 80,
                      "low": 0.34,
                      "last": 0.34,
                      "interest_rate": 0.207,
                      "instrument_name": "ETH-22FEB19-140-P",
                      "high": 0.34,
                      "creation_timestamp": 1550227952163,
                      "bid_price": 0.1488,
                      "base_currency": "ETH",
                      "ask_price": 0.34
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetgetLastSettlementsByInstrument200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetLastSettlementsByInstrument200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 5482,
                  "result": {
                    "settlements": [
                      {
                        "type": "settlement",
                        "timestamp": 1550502000023,
                        "session_profit_loss": 0.116509752,
                        "profit_loss": -9.999999999886402e-10,
                        "position": 240,
                        "mark_price": 3578.16,
                        "instrument_name": "BTC-22FEB19",
                        "index_price": 3796.43
                      }
                    ],
                    "continuation": "2Z7mdtavzYvfuyYcHkJXvPTr9ZSMsEzM3sLCH7AbYEDd1AzTXY2hnhegQDiaP1TtU4b5iSJZ4"
                  }
                }
              }
            }
          }
        }
      },
      "GetgetSettlementHistoryByCurrency200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetSettlementHistoryByCurrency200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 6074,
                  "result": {
                    "settlements": [
                      {
                        "type": "delivery",
                        "timestamp": 1550242800013,
                        "session_profit_loss": 1.567969302,
                        "profit_loss": -0.251617338,
                        "position": 13,
                        "mark_price": 0.121679828,
                        "instrument_name": "BTC-15FEB19-4000-P",
                        "index_price": 3566.08
                      }
                    ],
                    "continuation": "AHmpC39UH5EeGVjryrf731YEhjL16oqCQorSvBFZFAbbwvCN7GCbMFgno7U5JKW"
                  }
                }
              }
            }
          }
        }
      },
      "GetgetSettlementHistoryByInstrument200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetSettlementHistoryByInstrument200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2192,
                  "result": {
                    "settlements": [
                      {
                        "type": "settlement",
                        "timestamp": 1550475692526,
                        "session_profit_loss": 0.038358299,
                        "profit_loss": -0.001783937,
                        "position": -66,
                        "mark_price": 121.67,
                        "instrument_name": "ETH-22FEB19",
                        "index_price": 119.8
                      }
                    ],
                    "continuation": "xY7T6cusbMBNpH9SNmKb94jXSBxUPojJEdCPL4YociHBUgAhWQvEP"
                  }
                }
              }
            }
          }
        }
      },
      "GetgetTradeVolumes200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetTradeVolumes200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 6387,
                  "result": [
                    {
                      "puts_volume": 48,
                      "futures_volume": 6.25578452,
                      "currency": "BTC",
                      "calls_volume": 145,
                      "spot_volume": 11.1
                    },
                    {
                      "puts_volume": 122.65,
                      "futures_volume": 374.392173,
                      "currency": "ETH",
                      "calls_volume": 37.4,
                      "spot_volume": 57.7
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetgetSupportedIndexNames200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetSupportedIndexNames200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 25718,
                  "result": [
                    "btc_eth",
                    "btc_usdc",
                    "eth_usdc"
                  ]
                }
              }
            }
          }
        }
      },
      "GetgetOrderHistoryByInstrument200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetOrderHistoryByInstrument200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 1032,
                  "result": [
                    {
                      "time_in_force": "good_til_cancelled",
                      "reduce_only": false,
                      "price": 3886.5,
                      "post_only": false,
                      "order_type": "limit",
                      "order_state": "filled",
                      "order_id": "146475",
                      "max_show": 40,
                      "last_update_timestamp": 1550661808761,
                      "label": "",
                      "is_rebalance": false,
                      "is_liquidation": false,
                      "instrument_name": "BTC-PERPETUAL",
                      "filled_amount": 40,
                      "direction": "buy",
                      "creation_timestamp": 1550661808761,
                      "average_price": 3659.8,
                      "api": true,
                      "amount": 40
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetgetOrderHistoryByCurrency200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetOrderHistoryByCurrency200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9305,
                  "result": [
                    {
                      "time_in_force": "good_til_cancelled",
                      "reduce_only": false,
                      "price": 3886.5,
                      "post_only": false,
                      "order_type": "limit",
                      "order_state": "filled",
                      "order_id": "146475",
                      "max_show": 40,
                      "last_update_timestamp": 1550661808761,
                      "label": "",
                      "is_rebalance": false,
                      "is_liquidation": false,
                      "instrument_name": "BTC-PERPETUAL",
                      "filled_amount": 40,
                      "direction": "buy",
                      "creation_timestamp": 1550661808761,
                      "average_price": 3659.8,
                      "api": true,
                      "amount": 40
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetgetOpenOrdersByInstrument200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetOpenOrdersByInstrument200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 8442,
                  "result": [
                    {
                      "time_in_force": "good_til_cancelled",
                      "reduce_only": false,
                      "price": 0.135,
                      "post_only": false,
                      "order_type": "limit",
                      "order_state": "open",
                      "order_id": "ETH-252017",
                      "max_show": 10,
                      "last_update_timestamp": 1550050594882,
                      "label": "",
                      "is_rebalance": false,
                      "is_liquidation": false,
                      "instrument_name": "ETH-22FEB19-120-C",
                      "filled_amount": 0,
                      "direction": "sell",
                      "creation_timestamp": 1550050594882,
                      "average_price": 0,
                      "api": true,
                      "amount": 10
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetgetOpenOrdersByCurrency200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetOpenOrdersByCurrency200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 1953,
                  "result": [
                    {
                      "time_in_force": "good_til_cancelled",
                      "reduce_only": false,
                      "price": 0.0028,
                      "post_only": false,
                      "order_type": "limit",
                      "order_state": "open",
                      "order_id": "146062",
                      "max_show": 10,
                      "last_update_timestamp": 1550050597036,
                      "label": "",
                      "is_rebalance": false,
                      "is_liquidation": false,
                      "instrument_name": "BTC-15FEB19-3250-P",
                      "filled_amount": 0,
                      "direction": "buy",
                      "creation_timestamp": 1550050597036,
                      "average_price": 0,
                      "api": true,
                      "amount": 10
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetgetOpenOrdersByLabel200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetOpenOrdersByLabel200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 1953,
                  "result": [
                    {
                      "time_in_force": "good_til_cancelled",
                      "reduce_only": false,
                      "price": 0.0028,
                      "post_only": false,
                      "order_type": "limit",
                      "order_state": "open",
                      "order_id": "146062",
                      "max_show": 10,
                      "last_update_timestamp": 1550050597036,
                      "label": "fooBar",
                      "is_rebalance": false,
                      "is_liquidation": false,
                      "instrument_name": "BTC-15FEB19-3250-P",
                      "filled_amount": 0,
                      "direction": "buy",
                      "creation_timestamp": 1550050597036,
                      "average_price": 0,
                      "api": true,
                      "amount": 10
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetgetLastTradesByInstrument200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetLastTradesByInstrument200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9267,
                  "result": {
                    "trades": [
                      {
                        "trade_seq": 36798,
                        "trade_id": "277976",
                        "timestamp": 1590476708320,
                        "tick_direction": 2,
                        "price": 8767.08,
                        "mark_price": 8829.7,
                        "instrument_name": "BTC-PERPETUAL",
                        "index_price": 8878.53,
                        "direction": "sell",
                        "amount": 100
                      }
                    ],
                    "has_more": true
                  }
                }
              }
            }
          }
        }
      },
      "GetgetLastTradesByInstrumentAndTime200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetLastTradesByInstrumentAndTime200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 3983,
                  "result": {
                    "trades": [
                      {
                        "trade_seq": 1966031,
                        "trade_id": "ETH-2696055",
                        "timestamp": 1590479408216,
                        "tick_direction": 0,
                        "price": 203.6,
                        "mark_price": 203.41,
                        "instrument_name": "ETH-PERPETUAL",
                        "index_price": 203.45,
                        "direction": "buy",
                        "amount": 10
                      }
                    ],
                    "has_more": true
                  }
                }
              }
            }
          }
        }
      },
      "GetgetLastTradesByCurrency200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetLastTradesByCurrency200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9290,
                  "result": {
                    "trades": [
                      {
                        "trade_seq": 36798,
                        "trade_id": "277976",
                        "timestamp": 1590476708320,
                        "tick_direction": 2,
                        "price": 8767.08,
                        "mark_price": 8829.7,
                        "instrument_name": "BTC-PERPETUAL",
                        "index_price": 8878.53,
                        "direction": "sell",
                        "amount": 100
                      }
                    ],
                    "has_more": true
                  }
                }
              }
            }
          }
        }
      },
      "GetgetLastTradesByCurrencyAndTime200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetLastTradesByCurrencyAndTime200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 1469,
                  "result": {
                    "trades": [
                      {
                        "trade_seq": 3471,
                        "trade_id": "48077291",
                        "timestamp": 1590470616101,
                        "tick_direction": 2,
                        "price": 0.032,
                        "mark_price": 0.04070324,
                        "iv": 74.74,
                        "instrument_name": "BTC-25SEP20-6000-P",
                        "index_price": 8899.93,
                        "direction": "sell",
                        "amount": 0.5
                      }
                    ],
                    "has_more": true
                  }
                }
              }
            }
          }
        }
      },
      "GetgetUserTradesByInstrument200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetUserTradesByInstrument200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 5728,
                  "result": {
                    "trades": [
                      {
                        "trade_seq": 1966042,
                        "trade_id": "ETH-2696068",
                        "timestamp": 1590480712800,
                        "tick_direction": 3,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 203.8,
                        "post_only": false,
                        "order_type": "market",
                        "order_id": "ETH-584830574",
                        "matching_id": null,
                        "mark_price": 203.78,
                        "liquidity": "T",
                        "instrument_name": "ETH-PERPETUAL",
                        "index_price": 203.89,
                        "fee_currency": "ETH",
                        "fee": 0.00036801,
                        "direction": "buy",
                        "amount": 100
                      },
                      {
                        "trade_seq": 1966043,
                        "trade_id": "ETH-2696069",
                        "timestamp": 1590480724473,
                        "tick_direction": 3,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 203.8,
                        "post_only": false,
                        "order_type": "market",
                        "order_id": "ETH-584830695",
                        "matching_id": null,
                        "mark_price": 203.81,
                        "liquidity": "T",
                        "instrument_name": "ETH-PERPETUAL",
                        "index_price": 203.92,
                        "fee_currency": "ETH",
                        "fee": 0.00036801,
                        "direction": "sell",
                        "amount": 100
                      }
                    ],
                    "has_more": true
                  }
                }
              }
            }
          }
        }
      },
      "GetgetUserTradesByInstrumentAndTime200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetUserTradesByInstrumentAndTime200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 276,
                  "result": {
                    "trades": [
                      {
                        "trade_seq": 30289127,
                        "trade_id": "48078944",
                        "timestamp": 1590480866924,
                        "tick_direction": 2,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 8988.5,
                        "post_only": false,
                        "order_type": "limit",
                        "order_id": "4008716877",
                        "matching_id": null,
                        "mark_price": 8990.52,
                        "liquidity": "T",
                        "instrument_name": "BTC-PERPETUAL",
                        "index_price": 8995.15,
                        "fee_currency": "BTC",
                        "fee": 0.00037465,
                        "direction": "sell",
                        "amount": 4490
                      },
                      {
                        "trade_seq": 30289128,
                        "trade_id": "48078945",
                        "timestamp": 1590480866924,
                        "tick_direction": 2,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 8983.5,
                        "post_only": false,
                        "order_type": "limit",
                        "order_id": "4008716877",
                        "matching_id": null,
                        "mark_price": 8990.52,
                        "liquidity": "T",
                        "instrument_name": "BTC-PERPETUAL",
                        "index_price": 8995.15,
                        "fee_currency": "BTC",
                        "fee": 1.503e-05,
                        "direction": "sell",
                        "amount": 180
                      }
                    ],
                    "has_more": true
                  }
                }
              }
            }
          }
        }
      },
      "GetgetUserTradesByCurrency200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetUserTradesByCurrency200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9367,
                  "result": {
                    "trades": [
                      {
                        "underlying_price": 204.5,
                        "trade_seq": 3,
                        "trade_id": "ETH-2696060",
                        "timestamp": 1590480363130,
                        "tick_direction": 2,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 0.361,
                        "post_only": false,
                        "order_type": "limit",
                        "order_id": "ETH-584827850",
                        "matching_id": null,
                        "mark_price": 0.364585,
                        "liquidity": "T",
                        "iv": 0,
                        "instrument_name": "ETH-29MAY20-130-C",
                        "index_price": 203.72,
                        "fee_currency": "ETH",
                        "fee": 0.002,
                        "direction": "sell",
                        "amount": 5
                      },
                      {
                        "underlying_price": 204.82,
                        "trade_seq": 3,
                        "trade_id": "ETH-2696062",
                        "timestamp": 1590480416119,
                        "tick_direction": 0,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 0.015,
                        "post_only": false,
                        "order_type": "limit",
                        "order_id": "ETH-584828229",
                        "matching_id": null,
                        "mark_price": 0.000596,
                        "liquidity": "T",
                        "iv": 352.91,
                        "instrument_name": "ETH-29MAY20-140-P",
                        "index_price": 204.06,
                        "fee_currency": "ETH",
                        "fee": 0.002,
                        "direction": "buy",
                        "amount": 5
                      }
                    ],
                    "has_more": true
                  }
                }
              }
            }
          }
        }
      },
      "GetgetUserTradesByCurrencyAndTime200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetUserTradesByCurrencyAndTime200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9292,
                  "result": {
                    "trades": [
                      {
                        "underlying_price": 8994.95,
                        "trade_seq": 1,
                        "trade_id": "48078936",
                        "timestamp": 1590480620145,
                        "tick_direction": 1,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 0.028,
                        "post_only": false,
                        "order_type": "limit",
                        "order_id": "4008699030",
                        "matching_id": null,
                        "mark_price": 0.03135383,
                        "liquidity": "M",
                        "iv": 38.51,
                        "instrument_name": "BTC-27MAY20-8750-C",
                        "index_price": 8993.47,
                        "fee_currency": "BTC",
                        "fee": 0.0004,
                        "direction": "sell",
                        "amount": 1
                      },
                      {
                        "trade_seq": 299513,
                        "trade_id": "47958936",
                        "timestamp": 1589923311862,
                        "tick_direction": 2,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 9681.5,
                        "post_only": false,
                        "order_type": "limit",
                        "order_id": "3993343822",
                        "matching_id": null,
                        "mark_price": 9684,
                        "liquidity": "M",
                        "instrument_name": "BTC-26JUN20",
                        "index_price": 9679.48,
                        "fee_currency": "BTC",
                        "fee": -2.1e-07,
                        "direction": "buy",
                        "amount": 10
                      }
                    ],
                    "has_more": false
                  }
                }
              }
            }
          }
        }
      },
      "GetcancelAllByInstrument200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetcancelAllByInstrument200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 4122,
                  "result": 7
                }
              }
            }
          }
        }
      },
      "GetcancelAllByCurrency200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetcancelAllByCurrency200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 5663,
                  "result": 3
                }
              }
            }
          }
        }
      },
      "GetcancelAllByCurrencyPair200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetcancelAllByCurrencyPair200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 5663,
                  "result": 3
                }
              }
            }
          }
        }
      },
      "GetcancelAllByKindOrType200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetcancelAllByKindOrType200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2,
                  "result": 6
                }
              }
            }
          }
        }
      },
      "GetcancelByLabel200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetcancelByLabel200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 47,
                  "result": 4
                }
              }
            }
          }
        }
      },
      "Getbuy200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Getbuy200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 5275,
                  "result": {
                    "trades": [
                      {
                        "trade_seq": 1966056,
                        "trade_id": "ETH-2696083",
                        "timestamp": 1590483938456,
                        "tick_direction": 0,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 203.3,
                        "post_only": false,
                        "order_type": "market",
                        "order_id": "ETH-584849853",
                        "matching_id": null,
                        "mark_price": 203.28,
                        "liquidity": "T",
                        "label": "market0000234",
                        "instrument_name": "ETH-PERPETUAL",
                        "index_price": 203.33,
                        "fee_currency": "ETH",
                        "fee": 0.00014757,
                        "direction": "buy",
                        "amount": 40
                      }
                    ],
                    "order": {
                      "web": false,
                      "time_in_force": "good_til_cancelled",
                      "replaced": false,
                      "reduce_only": false,
                      "price": 207.3,
                      "post_only": false,
                      "order_type": "market",
                      "order_state": "filled",
                      "order_id": "ETH-584849853",
                      "max_show": 40,
                      "last_update_timestamp": 1590483938456,
                      "label": "market0000234",
                      "is_rebalance": false,
                      "is_liquidation": false,
                      "instrument_name": "ETH-PERPETUAL",
                      "filled_amount": 40,
                      "direction": "buy",
                      "creation_timestamp": 1590483938456,
                      "average_price": 203.3,
                      "api": true,
                      "amount": 40
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Getsell200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Getsell200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2148,
                  "result": {
                    "trades": [],
                    "order": {
                      "triggered": false,
                      "trigger": "last_price",
                      "time_in_force": "good_til_cancelled",
                      "trigger_price": 145,
                      "reduce_only": false,
                      "price": 145.61,
                      "post_only": false,
                      "order_type": "stop_limit",
                      "order_state": "untriggered",
                      "order_id": "ETH-SLTS-28",
                      "max_show": 123,
                      "last_update_timestamp": 1550659803407,
                      "label": "",
                      "is_rebalance": false,
                      "is_liquidation": false,
                      "instrument_name": "ETH-PERPETUAL",
                      "direction": "sell",
                      "creation_timestamp": 1550659803407,
                      "api": true,
                      "amount": 123
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GeteditByLabel200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeteditByLabel200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9,
                  "result": {
                    "trades": [],
                    "order": {
                      "web": false,
                      "time_in_force": "good_til_cancelled",
                      "replaced": true,
                      "reduce_only": false,
                      "price": 50111.0,
                      "post_only": false,
                      "order_type": "limit",
                      "order_state": "open",
                      "order_id": "94166",
                      "max_show": 150,
                      "last_update_timestamp": 1616155550773,
                      "label": "i_love_deribit",
                      "is_rebalance": false,
                      "is_liquidation": false,
                      "instrument_name": "BTC-PERPETUAL",
                      "filled_amount": 0,
                      "direction": "buy",
                      "creation_timestamp": 1616155547764,
                      "average_price": 0.0,
                      "api": true,
                      "amount": 150
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GetclosePosition200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetclosePosition200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 6130,
                  "result": {
                    "trades": [
                      {
                        "trade_seq": 1966068,
                        "trade_id": "ETH-2696097",
                        "timestamp": 1590486335742,
                        "tick_direction": 0,
                        "state": "filled",
                        "reduce_only": true,
                        "price": 202.8,
                        "post_only": false,
                        "order_type": "limit",
                        "order_id": "ETH-584864807",
                        "matching_id": null,
                        "mark_price": 202.79,
                        "liquidity": "T",
                        "instrument_name": "ETH-PERPETUAL",
                        "index_price": 202.86,
                        "fee_currency": "ETH",
                        "fee": 7.766e-05,
                        "direction": "sell",
                        "amount": 21
                      }
                    ],
                    "order": {
                      "web": false,
                      "time_in_force": "good_til_cancelled",
                      "replaced": false,
                      "reduce_only": true,
                      "price": 198.75,
                      "post_only": false,
                      "order_type": "limit",
                      "order_state": "filled",
                      "order_id": "ETH-584864807",
                      "max_show": 21,
                      "last_update_timestamp": 1590486335742,
                      "label": "",
                      "is_rebalance": false,
                      "is_liquidation": false,
                      "instrument_name": "ETH-PERPETUAL",
                      "filled_amount": 21,
                      "direction": "sell",
                      "creation_timestamp": 1590486335742,
                      "average_price": 202.8,
                      "api": true,
                      "amount": 21
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GetcreateDepositAddress200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetcreateDepositAddress200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 7538,
                  "result": {
                    "address": "2N8udZGBc1hLRCFsU9kGwMPpmYUwMFTuCwB",
                    "creation_timestamp": 1550575165170,
                    "currency": "BTC",
                    "type": "deposit"
                  }
                }
              }
            }
          }
        }
      },
      "GetgetCurrentDepositAddress200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetCurrentDepositAddress200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 3461,
                  "result": {
                    "address": "2N8udZGBc1hLRCFsU9kGwMPpmYUwMFTuCwB",
                    "creation_timestamp": 1550575165170,
                    "currency": "BTC",
                    "type": "deposit"
                  }
                }
              }
            }
          }
        }
      },
      "GetcancelWithdrawal200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetcancelWithdrawal200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 7420,
                  "result": {
                    "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
                    "amount": 0.5,
                    "confirmed_timestamp": null,
                    "created_timestamp": 1550571443070,
                    "currency": "BTC",
                    "fee": 0.0001,
                    "id": 1,
                    "priority": 0.15,
                    "state": "cancelled",
                    "transaction_id": null,
                    "updated_timestamp": 1550571443070
                  }
                }
              }
            }
          }
        }
      },
      "GetgetAddressBook200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetAddressBook200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 31,
                  "result": [
                    {
                      "waiting_timestamp": 1720252232860,
                      "creation_timestamp": 1719993033041,
                      "requires_confirmation_change": false,
                      "personal": true,
                      "info_required": false,
                      "beneficiary_first_name": "John",
                      "beneficiary_last_name": "Doe",
                      "beneficiary_address": "NL, Amsterdam, Street, 1",
                      "requires_confirmation": true,
                      "currency": "BTC",
                      "agreed": true,
                      "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
                      "type": "withdrawal",
                      "status": "waiting",
                      "label": "Main Address"
                    },
                    {
                      "waiting_timestamp": 1720252232760,
                      "creation_timestamp": 1719993032041,
                      "requires_confirmation_change": false,
                      "personal": true,
                      "info_required": false,
                      "beneficiary_company_name": "MyCompany",
                      "beneficiary_address": "NL, Haarlem, Street, 5",
                      "requires_confirmation": false,
                      "currency": "BTC",
                      "agreed": true,
                      "address": "bc1qar0srrr7xfkvy5l643lydnw9re59gtzzwf0uyj",
                      "type": "withdrawal",
                      "status": "waiting",
                      "label": "One More Address"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetsubmitTransferToSubaccount200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetsubmitTransferToSubaccount200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 210,
                  "result": {
                    "updated_timestamp": 1550226218504,
                    "type": "subaccount",
                    "state": "confirmed",
                    "other_side": "MySubAccount",
                    "id": 1,
                    "direction": "payment",
                    "currency": "ETH",
                    "created_timestamp": 1550226218504,
                    "amount": 12.1234
                  }
                }
              }
            }
          }
        }
      },
      "GetsubmitTransferBetweenSubaccounts200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetsubmitTransferBetweenSubaccounts200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 210,
                  "result": {
                    "updated_timestamp": 1550226218504,
                    "type": "subaccount",
                    "state": "confirmed",
                    "other_side": "MySubAccount",
                    "id": 1,
                    "direction": "payment",
                    "currency": "ETH",
                    "created_timestamp": 1550226218504,
                    "amount": 12.1234
                  }
                }
              }
            }
          }
        }
      },
      "GetsubmitTransferToUser200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetsubmitTransferToUser200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9421,
                  "result": {
                    "updated_timestamp": 1550232862350,
                    "type": "user",
                    "state": "prepared",
                    "other_side": "0x4aa0753d798d668056920094d65321a8e8913e26",
                    "id": 3,
                    "direction": "payment",
                    "currency": "ETH",
                    "created_timestamp": 1550232862350,
                    "amount": 13.456
                  }
                }
              }
            }
          }
        }
      },
      "GetcancelTransferById200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetcancelTransferById200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9187,
                  "result": {
                    "amount": 0.2,
                    "created_timestamp": 1550579457727,
                    "currency": "BTC",
                    "direction": "payment",
                    "id": 2,
                    "other_side": "2MzyQc5Tkik61kJbEpJV5D5H9VfWHZK9Sgy",
                    "state": "cancelled",
                    "type": "user",
                    "updated_timestamp": 1550579457727
                  }
                }
              }
            }
          }
        }
      },
      "GetsetClearanceOriginator200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetsetClearanceOriginator200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 1,
                  "result": {
                    "currency": "BTC",
                    "user_id": 123,
                    "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
                    "amount": 0.4,
                    "state": "completed",
                    "transaction_id": "230669110fdaf0a0dbcdc079b6b8b43d5af29cc73683835b9bc6b3406c065fda",
                    "source_address": "A3BqqD5GRJ8wHy1PYyCXTe9ke5226Fha123",
                    "received_timestamp": 1550574558607,
                    "updated_timestamp": 1550574558807,
                    "note": "Note",
                    "clearance_state": "in_progress"
                  }
                }
              }
            }
          }
        }
      },
      "GetgetAccountSummary200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetAccountSummary200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2515,
                  "result": {
                    "delta_total_map": {
                      "btc_usd": 31.594357699
                    },
                    "margin_balance": 302.62729214,
                    "futures_session_rpl": -0.03258105,
                    "options_session_rpl": 0,
                    "estimated_liquidation_ratio_map": {
                      "btc_usd": 0.1009872222854525
                    },
                    "session_upl": 0.05271555,
                    "email": "user@example.com",
                    "system_name": "user",
                    "username": "user",
                    "interuser_transfers_enabled": false,
                    "id": 10,
                    "estimated_liquidation_ratio": 0.10098722,
                    "options_gamma_map": {
                      "btc_usd": 1e-05
                    },
                    "options_vega": 0.0858,
                    "options_value": -0.0086,
                    "available_withdrawal_funds": 301.35396172,
                    "projected_delta_total": 32.613978,
                    "maintenance_margin": 0.8857841,
                    "total_pl": -0.33084225,
                    "limits": {
                      "limits_per_currency": false,
                      "non_matching_engine": {
                        "burst": 1500,
                        "rate": 1000
                      },
                      "matching_engine": {
                        "trading": {
                          "total": {
                            "burst": 250,
                            "rate": 200
                          }
                        },
                        "spot": {
                          "burst": 250,
                          "rate": 200
                        },
                        "quotes": {
                          "burst": 500,
                          "rate": 500
                        },
                        "max_quotes": {
                          "burst": 10,
                          "rate": 10
                        },
                        "guaranteed_quotes": {
                          "burst": 2,
                          "rate": 2
                        },
                        "cancel_all": {
                          "burst": 250,
                          "rate": 200
                        }
                      }
                    },
                    "options_theta_map": {
                      "btc_usd": 15.97071
                    },
                    "projected_maintenance_margin": 0.7543841,
                    "available_funds": 301.38059622,
                    "login_enabled": false,
                    "options_delta": -1.01962,
                    "balance": 302.60065765,
                    "security_keys_enabled": false,
                    "referrer_id": null,
                    "mmp_enabled": false,
                    "equity": 302.61869214,
                    "block_rfq_self_match_prevention": true,
                    "futures_session_upl": 0.05921555,
                    "fee_balance": 0,
                    "currency": "BTC",
                    "options_session_upl": -0.0065,
                    "projected_initial_margin": 1.01529592,
                    "options_theta": 15.97071,
                    "creation_timestamp": 1687352432143,
                    "self_trading_extended_to_subaccounts": false,
                    "portfolio_margining_enabled": false,
                    "cross_collateral_enabled": false,
                    "margin_model": "segregated_sm",
                    "options_vega_map": {
                      "btc_usd": 0.0858
                    },
                    "futures_pl": -0.32434225,
                    "options_pl": -0.0065,
                    "type": "main",
                    "self_trading_reject_mode": "cancel_maker",
                    "initial_margin": 1.24669592,
                    "spot_reserve": 0,
                    "delta_total": 31.602958,
                    "options_gamma": 1e-05,
                    "session_rpl": -0.03258105,
                    "fees": [
                      {
                        "value": {
                          "default": {
                            "type": "fixed",
                            "taker": 0.00035,
                            "maker": -0.0001
                          },
                          "block_trade": 0.3
                        },
                        "kind": "perpetual",
                        "index_name": "btc_usd"
                      },
                      {
                        "value": {
                          "default": {
                            "type": "relative",
                            "taker": 0.625,
                            "maker": 0.625
                          },
                          "block_trade": 0.625
                        },
                        "kind": "option",
                        "index_name": "btc_usd"
                      },
                      {
                        "value": {
                          "default": {
                            "type": "fixed",
                            "taker": 0.00035,
                            "maker": -0.0001
                          },
                          "block_trade": 0.3
                        },
                        "kind": "future",
                        "index_name": "btc_usd"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "GetgetAccountSummaries200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetAccountSummaries200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2515,
                  "result": {
                    "id": 10,
                    "email": "user@example.com",
                    "system_name": "user",
                    "username": "user",
                    "block_rfq_self_match_prevention": true,
                    "creation_timestamp": 1687352432143,
                    "type": "main",
                    "referrer_id": null,
                    "login_enabled": false,
                    "security_keys_enabled": false,
                    "mmp_enabled": false,
                    "interuser_transfers_enabled": false,
                    "self_trading_reject_mode": "cancel_maker",
                    "self_trading_extended_to_subaccounts": false,
                    "summaries": [
                      {
                        "currency": "BTC",
                        "delta_total_map": {
                          "btc_usd": 31.594357699
                        },
                        "margin_balance": 302.62729214,
                        "futures_session_rpl": -0.03258105,
                        "options_session_rpl": 0,
                        "estimated_liquidation_ratio_map": {
                          "btc_usd": 0.1009872222854525
                        },
                        "session_upl": 0.05271555,
                        "estimated_liquidation_ratio": 0.10098722,
                        "options_gamma_map": {
                          "btc_usd": 1e-05
                        },
                        "options_vega": 0.0858,
                        "options_value": -0.0086,
                        "available_withdrawal_funds": 301.35396172,
                        "projected_delta_total": 32.613978,
                        "maintenance_margin": 0.8857841,
                        "total_pl": -0.33084225,
                        "limits": {
                          "limits_per_currency": false,
                          "non_matching_engine": {
                            "burst": 1500,
                            "rate": 1000
                          },
                          "matching_engine": {
                            "trading": {
                              "total": {
                                "burst": 250,
                                "rate": 200
                              }
                            },
                            "spot": {
                              "burst": 250,
                              "rate": 200
                            },
                            "quotes": {
                              "burst": 500,
                              "rate": 500
                            },
                            "max_quotes": {
                              "burst": 10,
                              "rate": 10
                            },
                            "guaranteed_quotes": {
                              "burst": 2,
                              "rate": 2
                            },
                            "cancel_all": {
                              "burst": 250,
                              "rate": 200
                            }
                          }
                        },
                        "projected_maintenance_margin": 0.7543841,
                        "available_funds": 301.38059622,
                        "options_delta": -1.01962,
                        "balance": 302.60065765,
                        "equity": 302.61869214,
                        "futures_session_upl": 0.05921555,
                        "fee_balance": 0,
                        "options_session_upl": -0.0065,
                        "projected_initial_margin": 1.01529592,
                        "options_theta": 15.97071,
                        "portfolio_margining_enabled": false,
                        "cross_collateral_enabled": false,
                        "margin_model": "segregated_sm",
                        "options_vega_map": {
                          "btc_usd": 0.0858
                        },
                        "futures_pl": -0.32434225,
                        "options_pl": -0.0065,
                        "initial_margin": 1.24669592,
                        "spot_reserve": 0,
                        "delta_total": 31.602958,
                        "options_gamma": 1e-05,
                        "session_rpl": -0.03258105,
                        "fees": [
                          {
                            "value": {
                              "default": {
                                "type": "fixed",
                                "taker": 0.00035,
                                "maker": -0.0001
                              },
                              "block_trade": 0.3
                            },
                            "kind": "perpetual",
                            "index_name": "btc_usd"
                          },
                          {
                            "value": {
                              "default": {
                                "type": "relative",
                                "taker": 0.625,
                                "maker": 0.625
                              },
                              "block_trade": 0.625
                            },
                            "kind": "option",
                            "index_name": "btc_usd"
                          },
                          {
                            "value": {
                              "default": {
                                "type": "fixed",
                                "taker": 0.00035,
                                "maker": -0.0001
                              },
                              "block_trade": 0.3
                            },
                            "kind": "future",
                            "index_name": "btc_usd"
                          }
                        ]
                      },
                      {
                        "currency": "ETH",
                        "futures_session_upl": 0,
                        "portfolio_margining_enabled": false,
                        "available_funds": 99.999598,
                        "initial_margin": 0.000402,
                        "futures_session_rpl": 0,
                        "options_gamma": 0,
                        "balance": 100,
                        "options_vega_map": {},
                        "session_upl": 0,
                        "fee_balance": 0,
                        "delta_total_map": {
                          "eth_usd": 0
                        },
                        "projected_maintenance_margin": 0,
                        "options_gamma_map": {},
                        "projected_delta_total": 0,
                        "margin_model": "segregated_sm",
                        "futures_pl": 0,
                        "options_theta": 0,
                        "limits": {
                          "limits_per_currency": false,
                          "non_matching_engine": {
                            "burst": 1500,
                            "rate": 1000
                          },
                          "matching_engine": {
                            "trading": {
                              "total": {
                                "burst": 250,
                                "rate": 200
                              }
                            },
                            "spot": {
                              "burst": 250,
                              "rate": 200
                            },
                            "quotes": {
                              "burst": 500,
                              "rate": 500
                            },
                            "max_quotes": {
                              "burst": 10,
                              "rate": 10
                            },
                            "guaranteed_quotes": {
                              "burst": 2,
                              "rate": 2
                            },
                            "cancel_all": {
                              "burst": 250,
                              "rate": 200
                            }
                          }
                        },
                        "options_delta": 0,
                        "equity": 100,
                        "projected_initial_margin": 0.0002,
                        "estimated_liquidation_ratio_map": {
                          "eth_usd": 0
                        },
                        "spot_reserve": 0.0002,
                        "cross_collateral_enabled": false,
                        "available_withdrawal_funds": 99.999597,
                        "delta_total": 0,
                        "options_session_upl": 0,
                        "maintenance_margin": 0,
                        "options_theta_map": {},
                        "additional_reserve": 0,
                        "estimated_liquidation_ratio": 0,
                        "options_pl": 0,
                        "options_session_rpl": 0,
                        "options_vega": 0,
                        "total_pl": 0,
                        "session_rpl": 0,
                        "options_value": 0,
                        "margin_balance": 100,
                        "fees": [
                          {
                            "value": {
                              "default": {
                                "type": "fixed",
                                "taker": 0.00025,
                                "maker": -5e-05
                              },
                              "block_trade": 0.2
                            },
                            "kind": "perpetual",
                            "index_name": "eth_usd"
                          },
                          {
                            "value": {
                              "default": {
                                "type": "relative",
                                "taker": 0.5,
                                "maker": 0.5
                              },
                              "block_trade": 0.5
                            },
                            "kind": "option",
                            "index_name": "eth_usd"
                          },
                          {
                            "value": {
                              "default": {
                                "type": "fixed",
                                "taker": 0.00025,
                                "maker": -5e-05
                              },
                              "block_trade": 0.2
                            },
                            "kind": "future",
                            "index_name": "eth_usd"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "Getsimulate200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Getsimulate200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2255,
                  "result": {
                    "model_params": {
                      "currency_pair": {
                        "btc_usd": {
                          "extended_table_factor": 1,
                          "m_inc": 5e-05,
                          "min_volatility_for_shock_up": 0.5,
                          "max_delta_shock": 0.1,
                          "delta_total_liq_shock_threshold": 20000000,
                          "volatility_range_down": 0.25,
                          "volatility_range_up": 0.5,
                          "long_term_vega_power": 0.13,
                          "short_term_vega_power": 0.3,
                          "price_range": 0.16
                        }
                      },
                      "currency": {
                        "usd": {
                          "max_offsetable_pnl": 0,
                          "annualised_move_risk": 0.1,
                          "extended_dampener": 25000,
                          "min_annualised_move": 0.01,
                          "haircut": 0,
                          "equity_side_impact": "none",
                          "pnl_offset": 0,
                          "correlation_set": false
                        },
                        "btc": {
                          "max_offsetable_pnl": 0,
                          "annualised_move_risk": 0.075,
                          "extended_dampener": 100000,
                          "min_annualised_move": 0.01,
                          "haircut": 0,
                          "equity_side_impact": "both",
                          "pnl_offset": 0,
                          "correlation_set": false
                        }
                      },
                      "general": {
                        "mm_factor": 0.8,
                        "buckets_count": 4,
                        "vol_scenarios_count": 3,
                        "timestamp": 1718619740501
                      }
                    },
                    "aggregated_risk_vectors": {
                      "btc_btc": {
                        "standard": [
                          -0.05968587238095239,
                          -0.05968587238095239,
                          -0.05968587238095239,
                          -0.04272965863636364,
                          -0.04272965863636364,
                          -0.04272965863636364,
                          -0.02724789826086957,
                          -0.02724789826086957,
                          -0.02724789826086957,
                          -0.013056284583333334,
                          -0.013056284583333334,
                          -0.013056284583333334,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        "extended": [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    "initial_risk_vectors": {
                      "BTC-PERPETUAL": {
                        "standard": [
                          -0.05991206933333334,
                          -0.05991206933333334,
                          -0.05991206933333334,
                          -0.04289159509090909,
                          -0.04289159509090909,
                          -0.04289159509090909,
                          -0.027351162086956524,
                          -0.027351162086956524,
                          -0.027351162086956524,
                          -0.013105765166666668,
                          -0.013105765166666668,
                          -0.013105765166666668,
                          0,
                          0,
                          0,
                          0.012097629384615385,
                          0.012097629384615385,
                          0.012097629384615385,
                          0.023299138074074074,
                          0.023299138074074074,
                          0.023299138074074074,
                          0.033700538999999995,
                          0.033700538999999995,
                          0.033700538999999995,
                          0.043384601931034494,
                          0.043384601931034494,
                          0.043384601931034494
                        ],
                        "extended": [
                          -0.05991206933333334,
                          -0.05991206933333334,
                          0.04338460193103449,
                          0.04338460193103449,
                          0.04338460193103449,
                          0.04338460193103449,
                          0.04338460193103449,
                          0.04338460193103449
                        ]
                      },
                      "BTC-28JUN24": {
                        "standard": [
                          0.0002261969523809524,
                          0.0002261969523809524,
                          0.0002261969523809524,
                          0.00016193645454545456,
                          0.00016193645454545456,
                          0.00016193645454545456,
                          0.00010326382608695652,
                          0.00010326382608695652,
                          0.00010326382608695652,
                          4.948058333333334e-05,
                          4.948058333333334e-05,
                          4.948058333333334e-05,
                          0,
                          0,
                          0,
                          -4.567438461538462e-05,
                          -4.567438461538462e-05,
                          -4.567438461538462e-05,
                          -8.796548148148148e-05,
                          -8.796548148148148e-05,
                          -8.796548148148148e-05,
                          -0.0001272357857142857,
                          -0.0001272357857142857,
                          -0.0001272357857142857,
                          -0.00016379779310344832,
                          -0.00016379779310344832,
                          -0.00016379779310344832
                        ],
                        "extended": [
                          0.0002261969523809524,
                          0.0002261969523809524,
                          -0.0001637977931034483,
                          -0.0001637977931034483,
                          -0.0001637977931034483,
                          -0.0001637977931034483,
                          -0.0001637977931034483,
                          -0.0001637977931034483
                        ]
                      }
                    },
                    "margins": {
                      "btc": {
                        "initial_margin_details": {
                          "risk_matrix_margin_details": {
                            "delta_shock": 0,
                            "roll_shock": 0.00315725898,
                            "worst_case_bucket": {
                              "bucket": 1,
                              "side": "left",
                              "source": "standard",
                              "index": 1
                            },
                            "worst_case": 0.05968587238095239,
                            "correlation_contingency": 0
                          },
                          "risk_matrix_margin": 0.06284313098,
                          "spot_margin": 0,
                          "mmp_margin": 0.06,
                          "open_orders_margin": 1.8212e-05
                        },
                        "initial_margin": 0.122861343,
                        "maintenance_margin": 0.050274504784
                      }
                    },
                    "portfolio": {
                      "currency": {},
                      "position": {
                        "BTC-PERPETUAL": 0.314538364,
                        "BTC-28JUN24": -0.001187534
                      }
                    },
                    "index_price": {
                      "btc_usd": 65666.19
                    },
                    "ticker": {
                      "BTC-PERPETUAL": {
                        "mark_price": 65910.57,
                        "index_price": 65666.19
                      },
                      "BTC-28JUN24": {
                        "mark_price": 67371.75,
                        "index_price": 65666.19
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GetenableAffiliateProgram200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetenableAffiliateProgram200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 24,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetresetMmp200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetresetMmp200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetsetSelfTradingConfig200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetsetSelfTradingConfig200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetsetDisabledTradingProducts200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetsetDisabledTradingProducts200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetdisableApiKey200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetdisableApiKey200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2861,
                  "result": {
                    "timestamp": 1560242676023,
                    "max_scope": "account:read_write block_trade:read trade:read_write wallet:read_write",
                    "id": 3,
                    "enabled": false,
                    "default": false,
                    "client_secret": "B6RsF9rrLY5ezEGBQkyLlV-UC7whyPJ34BMA-kKYpes",
                    "client_id": "1sXMQBhM",
                    "name": ""
                  }
                }
              }
            }
          }
        }
      },
      "GetenableApiKey200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetenableApiKey200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 8580,
                  "result": {
                    "timestamp": 1560242634599,
                    "max_scope": "account:read_write block_trade:read trade:read_write wallet:read_write",
                    "id": 3,
                    "enabled": true,
                    "default": false,
                    "client_secret": "B6RsF9rrLY5ezEGBQkyLlV-UC7whyPJ34BMA-kKYpes",
                    "client_id": "1sXMQBhM",
                    "name": ""
                  }
                }
              }
            }
          }
        }
      },
      "GetcreateApiKey200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetcreateApiKey200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 8974,
                  "result": {
                    "timestamp": 1560238048714,
                    "max_scope": "account:read block_trade:read_write trade:read wallet:none",
                    "id": 5,
                    "enabled": true,
                    "enabled_features": [],
                    "default": false,
                    "public_key": "-----BEGIN PUBLIC KEY-----\nMCowBQYDK2VwAyEAM7FWhKquNqLmTOV4hfYT5r3AjrYiORTT6Tn5HIfFNV8=\n-----END PUBLIC KEY-----",
                    "client_secret": "9c:6d:c9:02:fd:9f:75:6e:14:bb:71:c5:74:95:86:c8",
                    "client_id": "wcVoQGam",
                    "name": ""
                  }
                }
              }
            }
          }
        }
      },
      "GetchangeScopeInApiKey200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetchangeScopeInApiKey200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2453,
                  "result": {
                    "timestamp": 1560242482758,
                    "max_scope": "account:read_write block_trade:read trade:read_write wallet:read_write",
                    "id": 3,
                    "enabled": true,
                    "default": false,
                    "client_secret": "B6RsF9rrLY5ezEGBQkyLlV-UC7whyPJ34BMA-kKYpes",
                    "client_id": "1sXMQBhM",
                    "name": ""
                  }
                }
              }
            }
          }
        }
      },
      "GetchangeApiKeyName200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetchangeApiKeyName200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2453,
                  "result": {
                    "timestamp": 1560242482758,
                    "max_scope": "account:read_write block_trade:read trade:read_write wallet:read_write",
                    "id": 3,
                    "enabled": true,
                    "default": false,
                    "client_secret": "B6RsF9rrLY5ezEGBQkyLlV-UC7whyPJ34BMA-kKYpes",
                    "client_id": "1sXMQBhM",
                    "name": "KeyName3"
                  }
                }
              }
            }
          }
        }
      },
      "GetresetApiKey200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetresetApiKey200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 6524,
                  "result": {
                    "timestamp": 1560238942222,
                    "max_scope": "account:read block_trade:read trade:read wallet:read",
                    "id": 3,
                    "enabled": true,
                    "default": false,
                    "client_secret": "P9Z_c73KaBPwpoTVfsXzehAhjhdJn5kM7Zlz_hhDhE8",
                    "client_id": "IY2D68DS",
                    "name": ""
                  }
                }
              }
            }
          }
        }
      },
      "GetremoveApiKey200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetremoveApiKey200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 8190,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GeteditApiKey200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GeteditApiKey200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2453,
                  "result": {
                    "timestamp": 1560242482758,
                    "max_scope": "account:read_write block_trade:read trade:read_write wallet:read_write",
                    "id": 3,
                    "enabled": true,
                    "default": false,
                    "client_secret": "B6RsF9rrLY5ezEGBQkyLlV-UC7whyPJ34BMA-kKYpes",
                    "client_id": "1sXMQBhM",
                    "name": "NewKeyName"
                  }
                }
              }
            }
          }
        }
      },
      "GetexecuteBlockTrade200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetexecuteBlockTrade200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "result": {
                    "trades": [
                      {
                        "trade_seq": 30289730,
                        "trade_id": "48079573",
                        "timestamp": 1590485535978,
                        "tick_direction": 0,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 8900.0,
                        "post_only": false,
                        "order_type": "limit",
                        "order_id": "4009043192",
                        "matching_id": "None",
                        "mark_price": 8895.19,
                        "liquidity": "M",
                        "instrument_name": "BTC-PERPETUAL",
                        "index_price": 8900.45,
                        "fee_currency": "BTC",
                        "fee": -0.00561798,
                        "direction": "sell",
                        "block_trade_id": "6165",
                        "amount": 200000.0
                      },
                      {
                        "underlying_price": 8902.86,
                        "trade_seq": 1,
                        "trade_id": "48079574",
                        "timestamp": 1590485535979,
                        "tick_direction": 1,
                        "state": "filled",
                        "reduce_only": false,
                        "price": 0.0133,
                        "post_only": false,
                        "order_type": "limit",
                        "order_id": "4009043194",
                        "matching_id": "None",
                        "mark_price": 0.01831619,
                        "liquidity": "M",
                        "iv": 62.44,
                        "instrument_name": "BTC-28MAY20-9000-C",
                        "index_price": 8900.45,
                        "fee_currency": "BTC",
                        "fee": 0.002,
                        "direction": "sell",
                        "block_trade_id": "6165",
                        "amount": 5.0
                      }
                    ],
                    "timestamp": 1590485535980,
                    "id": "6165"
                  }
                }
              }
            }
          }
        }
      },
      "GetinvalidateBlockTradeSignature200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetinvalidateBlockTradeSignature200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetmovePositions200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetmovePositions200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 3,
                  "result": [
                    {
                      "target_uid": 23,
                      "source_uid": 3,
                      "price": 0.1223,
                      "instrument_name": "BTC-28JAN22-32500-C",
                      "direction": "sell",
                      "amount": 0.1
                    },
                    {
                      "target_uid": 23,
                      "source_uid": 3,
                      "price": 35800,
                      "instrument_name": "BTC-PERPETUAL",
                      "direction": "buy",
                      "amount": 110
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetapproveBlockTrade200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetapproveBlockTrade200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetrejectBlockTrade200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetrejectBlockTrade200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetexchangeToken200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetexchangeToken200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9929,
                  "result": {
                    "access_token": "1582628593469.1MbQ-J_4.CBP-OqOwm_FBdMYj4cRK2dMXyHPfBtXGpzLxhWg31nHu3H_Q60FpE5_vqUBEQGSiMrIGzw3nC37NMb9d1tpBNqBOM_Ql9pXOmgtV9Yj3Pq1c6BqC6dU6eTxHMFO67x8GpJxqw_QcKP5IepwGBD-gfKSHfAv9AEnLJkNu3JkMJBdLToY1lrBnuedF3dU_uARm",
                    "expires_in": 31536000,
                    "refresh_token": "1582628593469.1GP4rQd0.A9Wa78o5kFRIUP49mScaD1CqHgiK50HOl2VA6kCtWa8BQZU5Dr03BhcbXPNvEh3I_MVixKZXnyoBeKJwLl8LXnfo180ckAiPj3zOclcUu4zkXuF3NNP3sTPcDf1B3C1CwMKkJ1NOcf1yPmRbsrd7hbgQ-hLa40tfx6Oa-85ymm_3Z65LZcnCeLrqlj_A9jM",
                    "scope": "session:named_session mainaccount",
                    "token_type": "bearer"
                  }
                }
              }
            }
          }
        }
      },
      "GetforkToken200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetforkToken200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9929,
                  "result": {
                    "access_token": "1582628593469.1MbQ-J_4.CBP-OqOwm_FBdMYj4cRK2dMXyHPfBtXGpzLxhWg31nHu3H_Q60FpE5_vqUBEQGSiMrIGzw3nC37NMb9d1tpBNqBOM_Ql9pXOmgtV9Yj3Pq1c6BqC6dU6eTxHMFO67x8GpJxqw_QcKP5IepwGBD-gfKSHfAv9AEnLJkNu3JkMJBdLToY1lrBnuedF3dU_uARm",
                    "expires_in": 31536000,
                    "refresh_token": "1582628593469.1GP4rQd0.A9Wa78o5kFRIUP49mScaD1CqHgiK50HOl2VA6kCtWa8BQZU5Dr03BhcbXPNvEh3I_MVixKZXnyoBeKJwLl8LXnfo180ckAiPj3zOclcUu4zkXuF3NNP3sTPcDf1B3C1CwMKkJ1NOcf1yPmRbsrd7hbgQ-hLa40tfx6Oa-85ymm_3Z65LZcnCeLrqlj_A9jM",
                    "scope": "session:named_session mainaccount",
                    "token_type": "bearer"
                  }
                }
              }
            }
          }
        }
      },
      "GetsetHeartbeat200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetsetHeartbeat200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9098,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetdisableHeartbeat200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetdisableHeartbeat200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 3562,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetdisableHeartbeat400response": {
        "description": "result when used via rest/HTTP",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetdisableHeartbeat400response"
            }
          }
        }
      },
      "Getunsubscribe401response": {
        "description": "not authorised",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Getunsubscribe401response"
            }
          }
        }
      },
      "GetunsubscribeAll200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetunsubscribeAll200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 154,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "Gethello200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Gethello200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 2841,
                  "result": {
                    "version": "1.2.26"
                  }
                }
              }
            }
          }
        }
      },
      "GetgetNewAnnouncements200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetgetNewAnnouncements200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 3022,
                  "result": [
                    {
                      "title": "Example announcement",
                      "publication_timestamp": 1550058362418,
                      "important": false,
                      "id": 1550058362418,
                      "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit."
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "GetsetAnnouncementAsRead200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetsetAnnouncementAsRead200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 5147,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetchangeSubaccountName200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetchangeSubaccountName200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 3964,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetsetEmailLanguage200response": {
        "description": "Success response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetsetEmailLanguage200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 3269,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetsetEmailForSubaccount200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetsetEmailForSubaccount200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 1667,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GettoggleSubaccountLogin200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GettoggleSubaccountLogin200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 938,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GettoggleNotificationsFromSubaccount200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GettoggleNotificationsFromSubaccount200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 9995,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetremoveSubaccount200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetremoveSubaccount200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 6,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "Getunsubscribe200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Getunsubscribe200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 3370,
                  "result": [
                    "deribit_price_index.btc_usd"
                  ]
                }
              }
            }
          }
        }
      },
      "GetenableCancelOnDisconnect200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetenableCancelOnDisconnect200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 7859,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetenableCancelOnDisconnect400response": {
        "description": "result when used via rest/HTTP",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetenableCancelOnDisconnect400response"
            }
          }
        }
      },
      "GetdisableCancelOnDisconnect200response": {
        "description": "ok response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetdisableCancelOnDisconnect200response"
            },
            "examples": {
              "jsonObject": {
                "value": {
                  "jsonrpc": "2.0",
                  "id": 1569,
                  "result": "ok"
                }
              }
            }
          }
        }
      },
      "GetdisableCancelOnDisconnect400response": {
        "description": "result when used via rest/HTTP",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetdisableCancelOnDisconnect400response"
            }
          }
        }
      },
      "Getlogout400response": {
        "description": "result when used via rest/HTTP",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Getlogout400response"
            }
          }
        }
      },
      "BookSummaryResponse": {
        "description": "Book summary data",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/book_summary"
                  }
                }
              },
              "required": [
                "result"
              ]
            }
          }
        }
      }
    }
  }
}